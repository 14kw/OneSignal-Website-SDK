!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}var installedModules={};__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";if("undefined"!=typeof OneSignal)var predefinedOneSignalPushes=OneSignal;__webpack_require__(1);if(predefinedOneSignalPushes)OneSignal._process_pushes(predefinedOneSignalPushes)},function(module,exports,__webpack_require__){(function(global){module.exports=global.OneSignal=__webpack_require__(2)}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){(function(fetch){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var _vars=__webpack_require__(4);var _api=__webpack_require__(7);var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel);var _limitStore=__webpack_require__(8);var _limitStore2=_interopRequireDefault(_limitStore);__webpack_require__(9);var _events=__webpack_require__(10);var _bell=__webpack_require__(11);var _bell2=_interopRequireDefault(_bell);var _utils=__webpack_require__(5);var OneSignal={_VERSION:109013,_HOST_URL:_vars.HOST_URL,_app_id:null,_tagsToSendOnRegister:null,_notificationOpened_callback:null,_idsAvailable_callback:[],_defaultLaunchURL:null,_initOptions:null,_httpRegistration:false,_main_page_port:null,_isNotificationEnabledCallback:null,_subscriptionSet:true,_initOneSignalHttp:null,_sessionIframeAdded:false,_useHttpMode:null,_windowWidth:550,_windowHeight:480,_isNewVisitor:false,_isInitialized:false,bell:null,LOGGING:true,SERVICE_WORKER_UPDATER_PATH:"OneSignalSDKUpdaterWorker.js",SERVICE_WORKER_PATH:"OneSignalSDKWorker.js",SERVICE_WORKER_PARAM:{},_ensureDbInstance:function _ensureDbInstance(){return new Promise(function(resolve,reject){if(OneSignal._oneSignal_db)resolve(OneSignal._oneSignal_db);else{var request=indexedDB.open("ONE_SIGNAL_SDK_DB",1);request.onsuccess=function(event){var database=event.target.result;OneSignal._oneSignal_db=database;resolve(database)};request.onerror=function(event){_loglevel2["default"].error("Unable to open IndexedDB.",event);reject(event)};request.onupgradeneeded=function(event){_loglevel2["default"].debug("Rebuilding schema in IndexedDB...");var db=event.target.result;db.createObjectStore("Ids",{keyPath:"type"});db.createObjectStore("NotificationOpened",{keyPath:"url"});db.createObjectStore("Options",{keyPath:"key"})}}})},_getDbValue:function _getDbValue(table,key){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){var request=database.transaction(table).objectStore(table).get(key);request.onsuccess=function(event){if(request.result)OneSignal._triggerEvent_dbValueRetrieved(request.result);resolve(request.result)};request.onerror=function(event){reject(request.errorCode)}})["catch"](function(e){_loglevel2["default"].error(e)})})},_getDbValues:function _getDbValues(table){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){var jsonResult={};var cursor=database.transaction(table).objectStore(table).openCursor();cursor.onsuccess=function(event){var cursor=event.target.result;if(cursor){OneSignal._triggerEvent_dbValueRetrieved(cursor);jsonResult[cursor.key]=cursor.value.value;cursor["continue"]()}else resolve(jsonResult)};cursor.onerror=function(event){reject(cursor.errorCode)}})["catch"](function(e){_loglevel2["default"].error(e)})})},_putDbValue:function _putDbValue(table,value){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){database.transaction([table],"readwrite").objectStore(table).put(value);OneSignal._triggerEvent_dbValueSet(value);resolve(value)})["catch"](function(e){_loglevel2["default"].error(e)})})},_deleteDbValue:function _deleteDbValue(table,key){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){database.transaction([table],"readwrite").objectStore(table)["delete"](key);resolve(key)})["catch"](function(e){_loglevel2["default"].error(e)})})},_sendToOneSignalApi:function _sendToOneSignalApi(url,action,inData,callback,failedCallback){_loglevel2["default"].debug("Calling "+action+" "+(OneSignal._HOST_URL+url)+" with data:",inData);var contents={method:action};if(inData){contents.headers={"Content-type":"application/json;charset=UTF-8"};contents.body=JSON.stringify(inData)}fetch(OneSignal._HOST_URL+url,contents).then(function status(response){if(response.status>=200&&response.status<300)return Promise.resolve(response);else return Promise.reject(new Error(response.statusText))}).then(function status(response){return response.json()}).then(function(jsonData){if(null!=callback)callback(jsonData)})["catch"](function(e){_loglevel2["default"].error("OneSignal._sendToOneSignalApi() failed:",e);if(null!=failedCallback)failedCallback()})},_getLanguage:function _getLanguage(){return navigator.language?navigator.language.length>3?navigator.language.substring(0,2):navigator.language:"en"},_getPlayerId:function _getPlayerId(value,callback){if(value)callback(value);else OneSignal._getDbValue("Ids","userId").then(function _getPlayerId_gotUserId(result){if(result)callback(result.id);else callback(null)})["catch"](function(e){_loglevel2["default"].error(e)})},_getBrowserName:function _getBrowserName(){if(navigator.appVersion.match(/Chrome\/(.*?) /))return"Chrome";if(navigator.appVersion.match("Version/(.*) (Safari)"))return"Safari";if(navigator.userAgent.match(/Firefox\/([0-9]{2,}\.[0-9]{1,})/))return"Firefox";return""},_registerWithOneSignal:function _registerWithOneSignal(appId,registrationId,deviceType){OneSignal._getDbValue("Ids","userId").then(function _registerWithOneSignal_GotUserId(userIdResult){OneSignal._getNotificationTypes(function(notif_types){var requestUrl="players";var jsonData={app_id:appId,device_type:deviceType,language:OneSignal._getLanguage(),timezone:-60*(new Date).getTimezoneOffset(),device_model:navigator.platform+" "+OneSignal._getBrowserName(),device_os:(navigator.appVersion.match(/Chrome\/(.*?) /)||navigator.appVersion.match("Version/(.*) Safari")||navigator.userAgent.match(/Firefox\/([0-9]{2,}\.[0-9]{1,})/))[1],sdk:OneSignal._VERSION};if(userIdResult){requestUrl="players/"+userIdResult.id+"/on_session";jsonData.notification_types=notif_types}else if(1!=notif_types)jsonData.notification_types=notif_types;if(registrationId){jsonData.identifier=registrationId;OneSignal._putDbValue("Ids",{type:"registrationId",id:registrationId})}OneSignal._sendToOneSignalApi(requestUrl,"POST",jsonData,function registeredCallback(responseJSON){sessionStorage.setItem("ONE_SIGNAL_SESSION",true);if(responseJSON.id){OneSignal._putDbValue("Ids",{type:"userId",id:responseJSON.id});OneSignal._sendUnsentTags()}OneSignal._getPlayerId(responseJSON.id,function(userId){if(OneSignal._idsAvailable_callback.length>0)for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:userId,registrationId:registrationId})}if(OneSignal._httpRegistration){_loglevel2["default"].debug("Sending player Id and registrationId back to host page");_loglevel2["default"].debug(OneSignal._initOptions);var creator=opener||parent;OneSignal._safePostMessage(creator,{idsAvailable:{userId:userId,registrationId:registrationId}},OneSignal._initOptions.origin,null);if(opener)window.close()}})})})})["catch"](function(e){_loglevel2["default"].error(e)})},_sendUnsentTags:function _sendUnsentTags(){if(OneSignal._tagsToSendOnRegister){OneSignal.sendTags(OneSignal._tagsToSendOnRegister);OneSignal._tagsToSendOnRegister=null}},setDefaultNotificationUrl:function setDefaultNotificationUrl(url){OneSignal._putDbValue("Options",{key:"defaultUrl",value:url})},setDefaultIcon:function setDefaultIcon(icon){OneSignal._putDbValue("Options",{key:"defaultIcon",value:icon})},setDefaultTitle:function setDefaultTitle(title){OneSignal._putDbValue("Options",{key:"defaultTitle",value:title})},_visibilitychange:function _visibilitychange(){if("visible"==document.visibilityState){document.removeEventListener("visibilitychange",OneSignal._visibilitychange);OneSignal._sessionInit({})}},onCustomPromptClicked:function onCustomPromptClicked(event){_loglevel2["default"].debug("Event onesignal.prompt.custom.clicked:",event.detail);OneSignal._checkTrigger_eventSubscriptionChanged()},onNativePromptChanged:function onNativePromptChanged(event){_loglevel2["default"].debug("Event onesignal.prompt.native.permissionchanged:",event.detail);OneSignal._checkTrigger_eventSubscriptionChanged()},_onSubscriptionChanged:function _onSubscriptionChanged(event){_loglevel2["default"].debug("Event onesignal.subscription.changed:",event.detail);if(OneSignal._isNewVisitor&&true===event.detail)OneSignal._getDbValue("Ids","userId").then(function(result){var welcome_notification_opts=OneSignal._initOptions.welcomeNotification;var welcome_notification_disabled=void 0!==welcome_notification_opts&&true===welcome_notification_opts.disable;var title=void 0!==welcome_notification_opts&&void 0!==welcome_notification_opts.title&&null!==welcome_notification_opts.title?welcome_notification_opts.title:"";var message=void 0!==welcome_notification_opts&&void 0!==welcome_notification_opts.message&&null!==welcome_notification_opts.message&&welcome_notification_opts.message.length>0?welcome_notification_opts.message:"Thanks for subscribing!";if(!welcome_notification_disabled){_loglevel2["default"].debug("Because this user is a new site visitor, a welcome notification will be sent.");(0,_api.sendNotification)(OneSignal._app_id,[result.id],{en:title},{en:message});(0,_events.triggerEvent)("onesignal.actions.welcomenotificationsent",{title:title,message:message});OneSignal._isNewVisitor=false}})["catch"](function(e){_loglevel2["default"].error(e)});_limitStore2["default"].put("subscription.value",event.detail)},_onDbValueRetrieved:function _onDbValueRetrieved(event){_loglevel2["default"].debug("Event onesignal.db.retrieved:",event.detail)},_onDbValueSet:function _onDbValueSet(event){_loglevel2["default"].debug("Event onesignal.db.valueset:",event.detail);var info=event.detail;if("userId"===info.type){_limitStore2["default"].put("db.ids.userId",info.id);OneSignal._checkTrigger_eventSubscriptionChanged()}},_onInternalSubscriptionSet:function _onInternalSubscriptionSet(event){_loglevel2["default"].debug("Event onesignal.internal.subscriptionset:",event.detail);var newSubscriptionValue=event.detail;_limitStore2["default"].put("subscription.internal.value",newSubscriptionValue);OneSignal._checkTrigger_eventSubscriptionChanged()},_checkTrigger_eventSubscriptionChanged:function _checkTrigger_eventSubscriptionChanged(){_loglevel2["default"].debug("Called _checkTrigger_eventSubscriptionChanged().");var permissions=_limitStore2["default"].get("notification.permission");var lastPermission=permissions[permissions.length-2];var currentPermission=permissions[permissions.length-1];var ids=_limitStore2["default"].get("db.ids.userId");var lastId=ids[ids.length-2];var currentId=ids[ids.length-1];var subscriptionStates=_limitStore2["default"].get("subscription.internal.value");var lastSubscriptionState=subscriptionStates[subscriptionStates.length-2];var currentSubscriptionState=subscriptionStates[subscriptionStates.length-1];var newSubscriptionState="unchanged";if(("default"===lastPermission||"denied"===lastPermission||null===lastPermission)&&"granted"===currentPermission&&null!==currentId&&true===currentSubscriptionState||false===lastSubscriptionState&&true===currentSubscriptionState&&null!=currentId&&"granted"===currentPermission)newSubscriptionState=true;if("denied"!==lastPermission&&"denied"===currentPermission||"granted"===lastPermission&&"granted"!==currentPermission||null!==lastId&&null===currentId||false!==lastSubscriptionState&&false===currentSubscriptionState)newSubscriptionState=false;if("unchanged"!==newSubscriptionState){var lastTriggerTimes=_limitStore2["default"].put("event.subscriptionchanged.lastriggered",Date.now());var currentTime=lastTriggerTimes[lastTriggerTimes.length-1];var lastTriggerTime=lastTriggerTimes[lastTriggerTimes.length-2];var elapsedTimeSeconds=(currentTime-lastTriggerTime)/1e3;var lastEventStates=_limitStore2["default"].put("event.subscriptionchanged.laststates",newSubscriptionState);var currentState=lastEventStates[lastEventStates.length-1];var lastState=lastEventStates[lastEventStates.length-2];var shouldNotTriggerEvent=null!=lastTriggerTime&&1>=elapsedTimeSeconds||currentState===lastState;if(false===shouldNotTriggerEvent)OneSignal._triggerEvent_subscriptionChanged(newSubscriptionState)}},init:function init(options){if(OneSignal._isInitialized){_loglevel2["default"].warn("OneSignal.init() was called again, but the SDK is already initialized. Skipping initialization.");return}OneSignal._initOptions=options;if(OneSignal.LOGGING)_loglevel2["default"].enableAll();else _loglevel2["default"].setLevel("error");_loglevel2["default"].info("OneSignal Web SDK loaded (version "+OneSignal._VERSION+").");if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("Your browser does not support push notifications.");return}if(navigator.permissions&&!((0,_utils.isBrowserFirefox)()&&(0,_utils.getFirefoxVersion)()<=45)){OneSignal._usingNativePermissionHook=true;var currentNotificationPermission=OneSignal._getNotificationPermission();_limitStore2["default"].put("notification.permission",currentNotificationPermission);navigator.permissions.query({name:"notifications"}).then(function(permissionStatus){permissionStatus.onchange=function(){var recentPermissions=_limitStore2["default"].get("notification.permission");var permissionBeforePrompt=recentPermissions[0];OneSignal._triggerEvent_nativePromptPermissionChanged(permissionBeforePrompt)}})["catch"](function(e){_loglevel2["default"].error(e)})}else{var currentNotificationPermission=OneSignal._getNotificationPermission();_limitStore2["default"].put("notification.permission",currentNotificationPermission)}OneSignal._getDbValue("Ids","userId").then(function(result){if(void 0===result)OneSignal._isNewVisitor=true;var storeValue=result?result.id:null;_limitStore2["default"].put("db.ids.userId",storeValue)});OneSignal._getSubscription(function(currentSubscription){_limitStore2["default"].put("subscription.internal.value",currentSubscription)});window.addEventListener("onesignal.prompt.custom.clicked",OneSignal.onCustomPromptClicked);window.addEventListener("onesignal.prompt.native.permissionchanged",OneSignal.onNativePromptChanged);window.addEventListener("onesignal.subscription.changed",OneSignal._onSubscriptionChanged);window.addEventListener("onesignal.db.valueretrieved",OneSignal._onDbValueRetrieved);window.addEventListener("onesignal.db.valueset",OneSignal._onDbValueSet);window.addEventListener("onesignal.db.valueset",OneSignal._onDbValueSet);window.addEventListener("onesignal.internal.subscriptionset",OneSignal._onInternalSubscriptionSet);OneSignal._useHttpMode=!(0,_utils.isSupportedSafari)()&&(!OneSignal._supportsDirectPermission()||OneSignal._initOptions.subdomainName);if(OneSignal._useHttpMode)OneSignal._initOneSignalHttp="https://"+OneSignal._initOptions.subdomainName+".onesignal.com/sdks/initOneSignalHttp";else OneSignal._initOneSignalHttp="https://onesignal.com/sdks/initOneSignalHttps";if(true)OneSignal._initOneSignalHttp=_vars.DEV_HOST+"/dev_sdks/initOneSignalHttp";if((0,_utils.isSupportedSafari)()&&"undefined"==typeof window.fetch){var s=document.createElement("script");s.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/fetch/0.9.0/fetch.js");document.head.appendChild(s)}if("complete"===document.readyState)OneSignal._internalInit();else window.addEventListener("load",OneSignal._internalInit);if(true&&(0,_utils.isBrowserEnv)()){_loglevel2["default"].info("Showing bell.");OneSignal.bell=new _bell2["default"]({size:"large",position:"bottom-right",theme:"default"});OneSignal.bell.create()}OneSignal._isInitialized=true},_internalInit:function _internalInit(){Promise.all([OneSignal._getDbValue("Ids","appId"),OneSignal._getDbValue("Ids","registrationId"),OneSignal._getDbValue("Options","subscription")]).then(function _internalInit_GotAppRegistrationSubscriptionIds(result){var appIdResult=result[0];var registrationIdResult=result[1];var subscriptionResult=result[2];if(appIdResult&&appIdResult.id!=OneSignal._initOptions.appId){OneSignal._deleteDbValue("Ids","userId");sessionStorage.removeItem("ONE_SIGNAL_SESSION")}if(sessionStorage.getItem("ONE_SIGNAL_SESSION")&&!OneSignal._initOptions.subdomainName&&("denied"==Notification.permission||sessionStorage.getItem("ONE_SIGNAL_NOTIFICATION_PERMISSION")==Notification.permission))return;sessionStorage.setItem("ONE_SIGNAL_NOTIFICATION_PERMISSION",Notification.permission);if(false==OneSignal._initOptions.autoRegister&&!registrationIdResult&&null==OneSignal._initOptions.subdomainName)return;if("visible"!=document.visibilityState){document.addEventListener("visibilitychange",OneSignal._visibilitychange);return}OneSignal._sessionInit({})})["catch"](function(e){_loglevel2["default"].error(e)})},registerForPushNotifications:function registerForPushNotifications(options){if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("Your browser does not support push notifications.");return}if(!options)options={};options.fromRegisterFor=true;OneSignal._sessionInit(options)},_initHttp:function _initHttp(options){OneSignal._initOptions=options;if(options.continuePressed)OneSignal.setSubscription(true);var isIframe=null!=parent&&parent!=window;var creator=opener||parent;if(!creator){_loglevel2["default"].debug("ERROR:_initHttp: No opener or parent found!");return}var messageChannel=new MessageChannel;messageChannel.port1.onmessage=function(event){_loglevel2["default"].debug("_initHttp.messageChannel.port1.onmessage",event);if(event.data.initOptions){OneSignal.setDefaultNotificationUrl(event.data.initOptions.defaultUrl);OneSignal.setDefaultTitle(event.data.initOptions.defaultTitle);if(event.data.initOptions.defaultIcon)OneSignal.setDefaultIcon(event.data.initOptions.defaultIcon);_loglevel2["default"].debug("document.URL",event.data.initOptions.parent_url);OneSignal._getDbValue("NotificationOpened",event.data.initOptions.parent_url).then(function registerForPushNotifications_GotNotificationOpened(notificationOpenedResult){_loglevel2["default"].debug("_initHttp NotificationOpened db",notificationOpenedResult);if(notificationOpenedResult){OneSignal._deleteDbValue("NotificationOpened",event.data.initOptions.parent_url);_loglevel2["default"].debug("OneSignal._safePostMessage:targetOrigin:",OneSignal._initOptions.origin);OneSignal._safePostMessage(creator,{openedNotification:notificationOpenedResult.data},OneSignal._initOptions.origin,null)}})["catch"](function(e){_loglevel2["default"].error(e)})}else if(event.data.getNotificationPermission)OneSignal._getSubdomainState(function(curState){OneSignal._safePostMessage(creator,{currentNotificationPermission:curState},OneSignal._initOptions.origin,null)});else if(event.data.setSubdomainState)OneSignal.setSubscription(event.data.setSubdomainState.setSubscription)};OneSignal._getSubdomainState(function(curState){curState.isIframe=isIframe;OneSignal._safePostMessage(creator,{oneSignalInitPageReady:curState},OneSignal._initOptions.origin,[messageChannel.port2])});OneSignal._initSaveState();OneSignal._httpRegistration=true;if(0==location.search.indexOf("?session=true"))return;OneSignal._getPlayerId(null,function(player_id){if(!isIframe||player_id){_loglevel2["default"].debug("Before navigator.serviceWorker.register");navigator.serviceWorker.register(OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);_loglevel2["default"].debug("After navigator.serviceWorker.register")}})},_getSubdomainState:function _getSubdomainState(callback){var state={};Promise.all([OneSignal._getDbValue("Ids","userId"),OneSignal._getDbValue("Ids","registrationId"),OneSignal._getDbValue("Options","subscription")]).then(function _internalInit_GotAppRegistrationSubscriptionIds(result){var userIdResult=result[0];var registrationIdResult=result[1];var subscriptionResult=result[2];callback({userId:userIdResult?userIdResult.id:null,registrationId:registrationIdResult?registrationIdResult.id:null,notifPermssion:Notification.permission,subscriptionSet:subscriptionResult?subscriptionResult.value:null,isPushEnabled:"granted"==Notification.permission&&userIdResult&&registrationIdResult&&(subscriptionResult&&subscriptionResult.value||null==subscriptionResult)})})["catch"](function(e){_loglevel2["default"].error(e)})},_initSaveState:function _initSaveState(){OneSignal._app_id=OneSignal._initOptions.appId;OneSignal._putDbValue("Ids",{type:"appId",id:OneSignal._app_id});OneSignal._putDbValue("Options",{key:"pageTitle",value:document.title})},_supportsDirectPermission:function _supportsDirectPermission(){return(0,_utils.isSupportedSafari)()||"https:"==location.protocol||0==location.host.indexOf("localhost")||0==location.host.indexOf("127.0.0.1")},_sessionInit:function _sessionInit(options){_loglevel2["default"].debug("Called OneSignal._sessionInit():",options);OneSignal._initSaveState();var hostPageProtocol=location.origin.match(/^http(s|):\/\/(www\.|)/)[0];if(OneSignal._useHttpMode){if(options.fromRegisterFor){var dualScreenLeft=void 0!=window.screenLeft?window.screenLeft:screen.left;var dualScreenTop=void 0!=window.screenTop?window.screenTop:screen.top;var thisWidth=window.innerWidth?window.innerWidth:document.documentElement.clientWidth?document.documentElement.clientWidth:screen.width;var thisHeight=window.innerHeight?window.innerHeight:document.documentElement.clientHeight?document.documentElement.clientHeight:screen.height;var childWidth=OneSignal._windowWidth;var childHeight=OneSignal._windowHeight;var left=thisWidth/2-childWidth/2+dualScreenLeft;var top=thisHeight/2-childHeight/2+dualScreenTop;_loglevel2["default"].debug("Opening popup window.");var message_localization_opts=OneSignal._initOptions.promptOptions;var message_localization_opts_str="";if(message_localization_opts){var message_localization_params=["actionMessage","exampleNotificationTitleDesktop","exampleNotificationMessageDesktop","exampleNotificationTitleMobile","exampleNotificationMessageMobile","exampleNotificationCaption","acceptButtonText","cancelButtonText"];for(var i=0;i<message_localization_params.length;i++){var key=message_localization_params[i];var value=message_localization_opts[key];var encoded_value=encodeURIComponent(value);if(value||""===value)message_localization_opts_str+="&"+key+"="+encoded_value}}var childWindow=window.open(OneSignal._initOneSignalHttp+"?"+message_localization_opts_str+"&hostPageProtocol="+hostPageProtocol,"_blank","scrollbars=yes, width="+childWidth+", height="+childHeight+", top="+top+", left="+left);if(childWindow)childWindow.focus()}else{_loglevel2["default"].debug("Opening iFrame.");OneSignal._addSessionIframe(hostPageProtocol)}return}if((0,_utils.isSupportedSafari)()){if(OneSignal._initOptions.safari_web_id){var notificationPermissionBeforeRequest=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);window.safari.pushNotification.requestPermission(OneSignal._HOST_URL+"safari",OneSignal._initOptions.safari_web_id,{app_id:OneSignal._app_id},function(data){_loglevel2["default"].debug(data);var notificationPermissionAfterRequest=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);if(data.deviceToken)OneSignal._registerWithOneSignal(OneSignal._app_id,data.deviceToken.toLowerCase(),7);else sessionStorage.setItem("ONE_SIGNAL_SESSION",true);OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest)})}}else if(options.modalPrompt&&options.fromRegisterFor){if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("An attempt was made to open the HTTPS modal permission prompt, but push notifications are not supported on this browser. Opening canceled.");return}OneSignal.isPushNotificationsEnabled(function(pushEnabled){var element=document.createElement("div");element.setAttribute("id","OneSignal-iframe-modal");element.innerHTML='<div id="notif-permission" style="background: rgba(0, 0, 0, 0.7); position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 9000; display: block"></div>';document.body.appendChild(element);var iframeStyle=document.createElement("style");iframeStyle.innerHTML="@media (max-width: 560px) { .OneSignal-permission-iframe { width: 100%; height: 100%;} }@media (min-width: 561px) { .OneSignal-permission-iframe { top: 50%; left: 50%; margin-left: -275px; margin-top: -248px;} }";document.getElementsByTagName("head")[0].appendChild(iframeStyle);var iframeNode=document.createElement("iframe");iframeNode.className="OneSignal-permission-iframe";iframeNode.style.cssText="background: rgba(255, 255, 255, 1); position: fixed;";iframeNode.src=OneSignal._initOneSignalHttp+"?id="+OneSignal._app_id+"&httpsPrompt=true&pushEnabled="+pushEnabled+"&permissionBlocked="+("undefined"==typeof Notification||"denied"==Notification.permission)+"&hostPageProtocol="+hostPageProtocol;iframeNode.setAttribute("frameborder","0");iframeNode.width=OneSignal._windowWidth.toString();iframeNode.height=OneSignal._windowHeight.toString();_loglevel2["default"].debug("Opening HTTPS modal prompt.");document.getElementById("notif-permission").appendChild(iframeNode)})}else if("serviceWorker"in navigator)OneSignal._registerForW3CPush(options);else _loglevel2["default"].debug("Service workers are not supported in this browser.");(0,_events.triggerEvent)("onesignal.sdk.initialized",null)},_registerForW3CPush:function _registerForW3CPush(options){OneSignal._getDbValue("Ids","registrationId").then(function _registerForW3CPush_GotRegistrationId(registrationIdResult){if(!registrationIdResult||!options.fromRegisterFor||"granted"!=Notification.permission)navigator.serviceWorker.getRegistration().then(function(event){var sw_path="";if(OneSignal._initOptions.path)sw_path=OneSignal._initOptions.path;if("undefined"==typeof event)navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);else if(event.active){if(event.active.scriptURL.indexOf(sw_path+OneSignal.SERVICE_WORKER_PATH)>-1)OneSignal._getDbValue("Ids","WORKER1_ONE_SIGNAL_SW_VERSION").then(function(versionResult){if(versionResult)if(versionResult.id!=OneSignal._VERSION)event.unregister().then(function(){navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)});else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)});else if(event.active.scriptURL.indexOf(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH)>-1)OneSignal._getDbValue("Ids","WORKER1_ONE_SIGNAL_SW_VERSION").then(function(versionResult){if(versionResult)if(versionResult.id!=OneSignal._VERSION)event.unregister().then(function(){navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)});else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)})}else if(null==event.installing)navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)})})["catch"](function(e){_loglevel2["default"].error(e)})},_addSessionIframe:function _addSessionIframe(hostPageProtocol){var node=document.createElement("iframe");node.style.display="none";node.src=OneSignal._initOneSignalHttp+"Iframe";if(sessionStorage.getItem("ONE_SIGNAL_SESSION"))node.src+="?session=true&hostPageProtocol="+hostPageProtocol;else node.src+="?hostPageProtocol="+hostPageProtocol;document.body.appendChild(node);_loglevel2["default"].debug("Adding session iFrame.");OneSignal._sessionIframeAdded=true},_registerError:function _registerError(err){_loglevel2["default"].debug("navigator.serviceWorker.register:ERROR: "+err)},_enableNotifications:function _enableNotifications(existingServiceWorkerRegistration){if(existingServiceWorkerRegistration)_loglevel2["default"].debug("There is an older ServiceWorker:",existingServiceWorkerRegistration);if(!("PushManager"in window)){_loglevel2["default"].debug("Push messaging is not supported. No PushManager.");sessionStorage.setItem("ONE_SIGNAL_SESSION",true);return}if(!("showNotification"in ServiceWorkerRegistration.prototype)){_loglevel2["default"].debug("Notifications are not supported. showNotification not available in ServiceWorkerRegistration.");sessionStorage.setItem("ONE_SIGNAL_SESSION",true);return}if("denied"===Notification.permission){_loglevel2["default"].warn("The user has disabled notifications.");return}navigator.serviceWorker.ready.then(function(serviceWorkerRegistration){_loglevel2["default"].info("Service worker active:",serviceWorkerRegistration);OneSignal._subscribeForPush(serviceWorkerRegistration)})["catch"](function(e){_loglevel2["default"].error(e)})},_getNotificationPermission:function _getNotificationPermission(safariWebId){if(window.safari)if(safariWebId)return window.safari.pushNotification.permission(safariWebId).permission;else return"default";else return Notification.permission},_triggerEvent_customPromptClicked:function _triggerEvent_customPromptClicked(clickResult){var recentPermissions=_limitStore2["default"].put("notification.permission",clickResult);(0,_events.triggerEvent)("onesignal.prompt.custom.clicked",{result:clickResult})},_triggerEvent_nativePromptPermissionChanged:function _triggerEvent_nativePromptPermissionChanged(from,to){if(void 0===to)to=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);if(from!==to){var recentPermissions=_limitStore2["default"].put("notification.permission",to);(0,_events.triggerEvent)("onesignal.prompt.native.permissionchanged",{from:from,to:to})}},_triggerEvent_subscriptionChanged:function _triggerEvent_subscriptionChanged(to){(0,_events.triggerEvent)("onesignal.subscription.changed",to)},_triggerEvent_dbValueRetrieved:function _triggerEvent_dbValueRetrieved(value){(0,_events.triggerEvent)("onesignal.db.valueretrieved",value)},_triggerEvent_dbValueSet:function _triggerEvent_dbValueSet(value){(0,_events.triggerEvent)("onesignal.db.valueset",value)},_triggerEvent_internalSubscriptionSet:function _triggerEvent_internalSubscriptionSet(value){(0,_events.triggerEvent)("onesignal.internal.subscriptionset",value)},_subscribeForPush:function _subscribeForPush(serviceWorkerRegistration){var notificationPermissionBeforeRequest=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);serviceWorkerRegistration.pushManager.subscribe({
userVisibleOnly:true}).then(function(subscription){sessionStorage.setItem("ONE_SIGNAL_NOTIFICATION_PERMISSION",Notification.permission);OneSignal._getDbValue("Ids","appId").then(function _subscribeForPush_GotAppId(appIdResult){var appId=appIdResult.id;_loglevel2["default"].debug("Called OneSignal._subscribeForPush() -> serviceWorkerRegistration.pushManager.subscribe().");var registrationId=null;if(subscription)if("undefined"!=typeof subscription.subscriptionId)registrationId=subscription.subscriptionId;else registrationId=subscription.endpoint.replace(new RegExp("^(https://android.googleapis.com/gcm/send/|https://updates.push.services.mozilla.com/push/)"),"");else _loglevel2["default"].warn("Could not subscribe your browser for push notifications.");OneSignal._registerWithOneSignal(appId,registrationId,(0,_utils.isSupportedFireFox)()?8:5);if(!OneSignal._usingNativePermissionHook)OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest)})["catch"](function(e){_loglevel2["default"].error(e)})})["catch"](function(e){_loglevel2["default"].error("Error while subscribing for push:",e);if(!OneSignal._usingNativePermissionHook)OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest);if(20==e.code&&opener&&OneSignal._httpRegistration)window.close()})},sendTag:function sendTag(key,value){var jsonKeyValue={};jsonKeyValue[key]=value;OneSignal.sendTags(jsonKeyValue)},sendTags:function sendTags(jsonPair){OneSignal._getDbValue("Ids","userId").then(function sendTags_GotUserId(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id,"PUT",{app_id:OneSignal._app_id,tags:jsonPair});else if(null==OneSignal._tagsToSendOnRegister)OneSignal._tagsToSendOnRegister=jsonPair;else{var resultObj={};for(var _obj in OneSignal._tagsToSendOnRegister)resultObj[_obj]=OneSignal._tagsToSendOnRegister[_obj];for(var _obj in jsonPair)resultObj[_obj]=jsonPair[_obj];OneSignal._tagsToSendOnRegister=resultObj}})["catch"](function(e){_loglevel2["default"].error("sendTags:",e)})},deleteTag:function deleteTag(key){OneSignal.deleteTags([key])},deleteTags:function deleteTags(keyArray){var jsonPair={};var length=keyArray.length;for(var i=0;length>i;i++)jsonPair[keyArray[i]]="";OneSignal.sendTags(jsonPair)},_handleNotificationOpened:function _handleNotificationOpened(event){var notificationData=JSON.parse(event.notification.tag);event.notification.close();Promise.all([OneSignal._getDbValue("Ids","appId"),OneSignal._getDbValue("Ids","userId")]).then(function _handleNotificationOpened_GotAppUserIds(results){var appIdResult=results[0];var userIdResult=results[1];if(appIdResult&&userIdResult)OneSignal._sendToOneSignalApi("notifications/"+notificationData.id,"PUT",{app_id:appIdResult.id,player_id:userIdResult.id,opened:true})})["catch"](function(e){_loglevel2["default"].error(e)});event.waitUntil(clients.matchAll({type:"window"}).then(function(clientList){var launchURL=registration.scope;if(OneSignal._defaultLaunchURL)launchURL=OneSignal._defaultLaunchURL;if(notificationData.launchURL)launchURL=notificationData.launchURL;for(var i=0;i<clientList.length;i++){var client=clientList[i];if("focus"in client&&client.url==launchURL){client.focus();client.postMessage(notificationData);return}}if("javascript:void(0);"!==launchURL&&"do_not_open"!==launchURL){OneSignal._putDbValue("NotificationOpened",{url:launchURL,data:notificationData});clients.openWindow(launchURL)["catch"](function(error){clients.openWindow(registration.scope+"redirector.html?url="+launchURL)})}})["catch"](function(e){_loglevel2["default"].error(e)}))},_getTitle:function _getTitle(incomingTitle,callback){if(null!=incomingTitle){callback(incomingTitle);return}Promise.all([OneSignal._getDbValue("Options","defaultTitle"),OneSignal._getDbValue("Options","pageTitle")]).then(function _getTitle_GotDefaultPageTitles(results){var defaultTitleResult=results[0];var pageTitleResult=results[1];if(defaultTitleResult){callback(defaultTitleResult.value);return}else if(pageTitleResult&&null!=pageTitleResult.value){callback(pageTitleResult.value);return}else callback("")})["catch"](function(e){_loglevel2["default"].error(e)})},_handleGCMMessage:function _handleGCMMessage(serviceWorker,event){if(event.data&&"{"==event.data.text()[0]){_loglevel2["default"].debug("Received data.text: ",event.data.text());_loglevel2["default"].debug("Received data.json: ",event.data.json())}event.waitUntil(new Promise(function(resolve,reject){OneSignal._getTitle(null,function(title){OneSignal._getDbValue("Options","defaultIcon").then(function _handleGCMMessage_GotDefaultIcon(defaultIconResult){OneSignal._getLastNotifications(function(response,appId){var notificationData={id:response.custom.i,message:response.alert,additionalData:response.custom.a};if(response.title)notificationData.title=response.title;else notificationData.title=title;if(response.custom.u)notificationData.launchURL=response.custom.u;if(response.icon)notificationData.icon=response.icon;else if(defaultIconResult)notificationData.icon=defaultIconResult.value;serviceWorker.registration.showNotification(notificationData.title,{body:response.alert,icon:notificationData.icon,tag:JSON.stringify(notificationData)}).then(resolve)["catch"](function(e){_loglevel2["default"].error(e)});OneSignal._getDbValue("Options","defaultUrl").then(function(defaultUrlResult){if(defaultUrlResult)OneSignal._defaultLaunchURL=defaultUrlResult.value})["catch"](function(e){_loglevel2["default"].error(e)})},resolve)})["catch"](function(e){_loglevel2["default"].error(e)})})}))},_getLastNotifications:function _getLastNotifications(itemCallback,completeCallback){OneSignal._getDbValue("Ids","userId").then(function _getLastNotifications_GotUserId(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id+"/chromeweb_notification","GET",null,function(response){for(var i=0;i<response.length;i++)itemCallback(JSON.parse(response[i]))},function(){completeCallback()});else{_loglevel2["default"].debug("Error: could not get notificationId");completeCallback()}})["catch"](function(e){_loglevel2["default"].error(e)})},_listener_receiveMessage:function receiveMessage(event){_loglevel2["default"].debug("_listener_receiveMessage: ",event);if(void 0==OneSignal._initOptions)return;if(false)return;if(event.data.oneSignalInitPageReady){OneSignal._getDbValues("Options").then(function _listener_receiveMessage(options){_loglevel2["default"].debug("current options",options);if(!options.defaultUrl)options.defaultUrl=document.URL;if(!options.defaultTitle)options.defaultTitle=document.title;options.parent_url=document.URL;_loglevel2["default"].debug("Posting message to port[0]",event.ports[0]);event.ports[0].postMessage({initOptions:options})})["catch"](function(e){_loglevel2["default"].error("_listener_receiveMessage:",e)});var eventData=event.data.oneSignalInitPageReady;if(eventData.isIframe)OneSignal._iframePort=event.ports[0];if(eventData.userId)OneSignal._putDbValue("Ids",{type:"userId",id:eventData.userId});if(eventData.registrationId)OneSignal._putDbValue("Ids",{type:"registrationId",id:eventData.registrationId});OneSignal._fireNotificationEnabledCallback(eventData.isPushEnabled);OneSignal._sendUnsentTags()}else if(event.data.currentNotificationPermission)OneSignal._fireNotificationEnabledCallback(event.data.currentNotificationPermission.isPushEnabled);else if(event.data.idsAvailable){sessionStorage.setItem("ONE_SIGNAL_SESSION",true);OneSignal._putDbValue("Ids",{type:"userId",id:event.data.idsAvailable.userId});OneSignal._putDbValue("Ids",{type:"registrationId",id:event.data.idsAvailable.registrationId});if(OneSignal._idsAvailable_callback.length>0)for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:event.data.idsAvailable.userId,registrationId:event.data.idsAvailable.registrationId})}OneSignal._sendUnsentTags()}else if(event.data.httpsPromptAccepted){OneSignal.registerForPushNotifications();OneSignal.setSubscription(true);var elem=document.getElementById("OneSignal-iframe-modal");elem.parentNode.removeChild(elem);OneSignal._triggerEvent_customPromptClicked("granted")}else if(event.data.httpsPromptCanceled){var elem=document.getElementById("OneSignal-iframe-modal");elem.parentNode.removeChild(elem);OneSignal._triggerEvent_customPromptClicked("denied")}else if(event.data.httpPromptAccepted)OneSignal._triggerEvent_customPromptClicked("granted");else if(event.data.httpPromptCanceled)OneSignal._triggerEvent_customPromptClicked("denied");else if(OneSignal._notificationOpened_callback)OneSignal._notificationOpened_callback(event.data)},addListenerForNotificationOpened:function addListenerForNotificationOpened(callback){OneSignal._notificationOpened_callback=callback;if(window)OneSignal._getDbValue("NotificationOpened",document.URL).then(function(notificationOpenedResult){if(notificationOpenedResult){OneSignal._deleteDbValue("NotificationOpened",document.URL);OneSignal._notificationOpened_callback(notificationOpenedResult.data)}})["catch"](function(e){_loglevel2["default"].error(e)})},_fireNotificationEnabledCallback:function _fireNotificationEnabledCallback(notifPermssion){if(OneSignal._isNotificationEnabledCallback){OneSignal._isNotificationEnabledCallback(notifPermssion);OneSignal._isNotificationEnabledCallback=null}},getIdsAvailable:function getIdsAvailable(callback){if(void 0===callback)return;OneSignal._idsAvailable_callback.push(callback);Promise.all([OneSignal._getDbValue("Ids","userId"),OneSignal._getDbValue("Ids","registrationId")]).then(function getIdsAvailable_GotUserRegistrationIds(results){var userIdResult=results[0];var registrationIdResult=results[1];if(userIdResult)if(registrationIdResult)for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:userIdResult.id,registrationId:registrationIdResult.id})}else for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:userIdResult.id,registrationId:null})}})["catch"](function(e){_loglevel2["default"].error(e)})},getTags:function getTags(callback){OneSignal._getDbValue("Ids","userId").then(function(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id,"GET",null,function(response){callback(response.tags)})})["catch"](function(e){_loglevel2["default"].error(e)})},isPushNotificationsEnabled:function isPushNotificationsEnabled(callback){if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("Your browser does not support push notifications.");return}if(OneSignal._initOptions.subdomainName&&!(0,_utils.isBrowserSafari)()){OneSignal._isNotificationEnabledCallback=callback;if(OneSignal._iframePort)OneSignal._iframePort.postMessage({getNotificationPermission:true});return}Promise.all([OneSignal._getDbValue("Ids","registrationId"),OneSignal._getDbValue("Options","subscription")]).then(function(results){var registrationIdResult=results[0];var subscriptionResult=results[1];if(registrationIdResult){if(subscriptionResult&&!subscriptionResult.value)return callback(false);callback("granted"==Notification.permission)}else callback(false)})["catch"](function(e){_loglevel2["default"].error(e)})},_getNotificationTypes:function _getNotificationTypes(callback){OneSignal._getSubscription(function(db_subscriptionSet){callback(db_subscriptionSet?1:-2)})},setSubscription:function setSubscription(newSubscription){if(OneSignal._iframePort)OneSignal._iframePort.postMessage({setSubdomainState:{setSubscription:newSubscription}});else OneSignal._getSubscription(function(currentSubscription){if(currentSubscription!=newSubscription){OneSignal._putDbValue("Options",{key:"subscription",value:newSubscription});OneSignal._getDbValue("Ids","userId").then(function(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id,"PUT",{app_id:OneSignal._app_id,notification_types:newSubscription?1:-2},function setSubscriptionSetCallback(){OneSignal._triggerEvent_internalSubscriptionSet(newSubscription)})})["catch"](function(e){_loglevel2["default"].error(e)})}})},_getSubscription:function _getSubscription(callback){OneSignal._getDbValue("Options","subscription").then(function(subscriptionResult){callback(!(subscriptionResult&&false==subscriptionResult.value))})["catch"](function(e){_loglevel2["default"].error(e)})},_safePostMessage:function _safePostMessage(creator,data,targetOrigin,receiver){var tOrigin=targetOrigin.toLowerCase();if(tOrigin.startsWith("http://")){var queryDict={};location.search.substr(1).split("&").forEach(function(item){queryDict[item.split("=")[0]]=item.split("=")[1]});var validPreURLRegex=/^http(s|):\/\/(www\.|)/;tOrigin=tOrigin.replace(validPreURLRegex,queryDict.hostPageProtocol)}if(receiver)creator.postMessage(data,tOrigin,receiver);else creator.postMessage(data,tOrigin)},_process_pushes:function _process_pushes(array){for(var i=0;i<array.length;i++)OneSignal.push(array[i])},push:function push(item){if("function"==typeof item)item();else{var functionName=item.shift();OneSignal[functionName].apply(null,item)}}};if("undefined"!=typeof window)window.addEventListener("message",OneSignal._listener_receiveMessage,false);else{importScripts("https://cdn.onesignal.com/sdks/serviceworker-cache-polyfill.js");self.addEventListener("push",function(event){OneSignal._handleGCMMessage(self,event)});self.addEventListener("notificationclick",function(event){OneSignal._handleNotificationOpened(event)});var isSWonSubdomain=null!=location.href.match(/https\:\/\/.*\.onesignal.com\/sdks\//);if(true)isSWonSubdomain=true;self.addEventListener("install",function(event){_loglevel2["default"].debug("OneSignal Installed service worker: "+OneSignal._VERSION);if(self.location.pathname.indexOf("OneSignalSDKWorker.js")>-1)OneSignal._putDbValue("Ids",{type:"WORKER1_ONE_SIGNAL_SW_VERSION",id:OneSignal._VERSION});else OneSignal._putDbValue("Ids",{type:"WORKER2_ONE_SIGNAL_SW_VERSION",id:OneSignal._VERSION});if(isSWonSubdomain)event.waitUntil(caches.open("OneSignal_"+OneSignal._VERSION).then(function(cache){return cache.addAll(["/sdks/initOneSignalHttpIframe","/sdks/initOneSignalHttpIframe?session=*","/sdks/manifest_json"])})["catch"](function(e){_loglevel2["default"].error(e)}))});if(isSWonSubdomain)self.addEventListener("fetch",function(event){event.respondWith(caches.match(event.request).then(function(response){if(response)return response;return fetch(event.request)})["catch"](function(e){_loglevel2["default"].error(e)}))})}module.exports=OneSignal}).call(exports,__webpack_require__(3))},function(module,exports){(function(global){(function(){!function(){"use strict";function normalizeName(name){if("string"!=typeof name)name=String(name);if(/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name))throw new TypeError("Invalid character in header field name");return name.toLowerCase()}function normalizeValue(value){if("string"!=typeof value)value=String(value);return value}function Headers(headers){this.map={};if(headers instanceof Headers)headers.forEach(function(value,name){this.append(name,value)},this);else if(headers)Object.getOwnPropertyNames(headers).forEach(function(name){this.append(name,headers[name])},this)}function consumed(body){if(body.bodyUsed)return Promise.reject(new TypeError("Already read"));body.bodyUsed=true}function fileReaderReady(reader){return new Promise(function(resolve,reject){reader.onload=function(){resolve(reader.result)};reader.onerror=function(){reject(reader.error)}})}function readBlobAsArrayBuffer(blob){var reader=new FileReader;reader.readAsArrayBuffer(blob);return fileReaderReady(reader)}function readBlobAsText(blob){var reader=new FileReader;reader.readAsText(blob);return fileReaderReady(reader)}function Body(){this.bodyUsed=false;this._initBody=function(body){this._bodyInit=body;if("string"==typeof body)this._bodyText=body;else if(support.blob&&Blob.prototype.isPrototypeOf(body))this._bodyBlob=body;else if(support.formData&&FormData.prototype.isPrototypeOf(body))this._bodyFormData=body;else if(!body)this._bodyText="";else if(support.arrayBuffer&&ArrayBuffer.prototype.isPrototypeOf(body));else throw new Error("unsupported BodyInit type")};if(support.blob){this.blob=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);else if(this._bodyFormData)throw new Error("could not read FormData body as blob");else return Promise.resolve(new Blob([this._bodyText]))};this.arrayBuffer=function(){return this.blob().then(readBlobAsArrayBuffer)};this.text=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);else if(this._bodyFormData)throw new Error("could not read FormData body as text");else return Promise.resolve(this._bodyText)}}else this.text=function(){var rejected=consumed(this);return rejected?rejected:Promise.resolve(this._bodyText)};if(support.formData)this.formData=function(){return this.text().then(decode)};this.json=function(){return this.text().then(JSON.parse)};return this}function normalizeMethod(method){var upcased=method.toUpperCase();return methods.indexOf(upcased)>-1?upcased:method}function Request(input,options){options=options||{};var body=options.body;if(Request.prototype.isPrototypeOf(input)){if(input.bodyUsed)throw new TypeError("Already read");this.url=input.url;this.credentials=input.credentials;if(!options.headers)this.headers=new Headers(input.headers);this.method=input.method;this.mode=input.mode;if(!body){body=input._bodyInit;input.bodyUsed=true}}else this.url=input;this.credentials=options.credentials||this.credentials||"omit";if(options.headers||!this.headers)this.headers=new Headers(options.headers);this.method=normalizeMethod(options.method||this.method||"GET");this.mode=options.mode||this.mode||null;this.referrer=null;if(("GET"===this.method||"HEAD"===this.method)&&body)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(body)}function decode(body){var form=new FormData;body.trim().split("&").forEach(function(bytes){if(bytes){var split=bytes.split("=");var name=split.shift().replace(/\+/g," ");var value=split.join("=").replace(/\+/g," ");form.append(decodeURIComponent(name),decodeURIComponent(value))}});return form}function headers(xhr){var head=new Headers;var pairs=xhr.getAllResponseHeaders().trim().split("\n");pairs.forEach(function(header){var split=header.trim().split(":");var key=split.shift().trim();var value=split.join(":").trim();head.append(key,value)});return head}function Response(bodyInit,options){if(!options)options={};this._initBody(bodyInit);this.type="default";this.status=options.status;this.ok=this.status>=200&&this.status<300;this.statusText=options.statusText;this.headers=options.headers instanceof Headers?options.headers:new Headers(options.headers);this.url=options.url||""}if(self.fetch)return;Headers.prototype.append=function(name,value){name=normalizeName(name);value=normalizeValue(value);var list=this.map[name];if(!list){list=[];this.map[name]=list}list.push(value)};Headers.prototype["delete"]=function(name){delete this.map[normalizeName(name)]};Headers.prototype.get=function(name){var values=this.map[normalizeName(name)];return values?values[0]:null};Headers.prototype.getAll=function(name){return this.map[normalizeName(name)]||[]};Headers.prototype.has=function(name){return this.map.hasOwnProperty(normalizeName(name))};Headers.prototype.set=function(name,value){this.map[normalizeName(name)]=[normalizeValue(value)]};Headers.prototype.forEach=function(callback,thisArg){Object.getOwnPropertyNames(this.map).forEach(function(name){this.map[name].forEach(function(value){callback.call(thisArg,value,name,this)},this)},this)};var support={blob:"FileReader"in self&&"Blob"in self&&function(){try{new Blob;return true}catch(e){return false}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};var methods=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];Request.prototype.clone=function(){return new Request(this)};Body.call(Request.prototype);Body.call(Response.prototype);Response.prototype.clone=function(){return new Response(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})};Response.error=function(){var response=new Response(null,{status:0,statusText:""});response.type="error";return response};var redirectStatuses=[301,302,303,307,308];Response.redirect=function(url,status){if(-1===redirectStatuses.indexOf(status))throw new RangeError("Invalid status code");return new Response(null,{status:status,headers:{location:url}})};self.Headers=Headers;self.Request=Request;self.Response=Response;self.fetch=function(input,init){return new Promise(function(resolve,reject){function responseURL(){if("responseURL"in xhr)return xhr.responseURL;if(/^X-Request-URL:/m.test(xhr.getAllResponseHeaders()))return xhr.getResponseHeader("X-Request-URL");return}var request;if(Request.prototype.isPrototypeOf(input)&&!init)request=input;else request=new Request(input,init);var xhr=new XMLHttpRequest;xhr.onload=function(){var status=1223===xhr.status?204:xhr.status;if(100>status||status>599){reject(new TypeError("Network request failed"));return}var options={status:status,statusText:xhr.statusText,headers:headers(xhr),url:responseURL()};var body="response"in xhr?xhr.response:xhr.responseText;resolve(new Response(body,options))};xhr.onerror=function(){reject(new TypeError("Network request failed"))};xhr.open(request.method,request.url,true);if("include"===request.credentials)xhr.withCredentials=true;if("responseType"in xhr&&support.blob)xhr.responseType="blob";request.headers.forEach(function(value,name){xhr.setRequestHeader(name,value)});xhr.send("undefined"==typeof request._bodyInit?null:request._bodyInit)})};self.fetch.polyfill=true}();module.exports=global.fetch}).call(global)}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.HOST_URL=exports.PROD_HOST=exports.DEV_HOST=void 0;var _utils=__webpack_require__(5);var DEV_HOST=exports.DEV_HOST="https://192.168.1.206:3000";var PROD_HOST=exports.PROD_HOST="https://onesignal.com";var HOST_URL=exports.HOST_URL=((0,_utils.isDev)()?DEV_HOST:PROD_HOST)+"/api/v1/"},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _typeof(obj){return obj&&"undefined"!=typeof Symbol&&obj.constructor===Symbol?"symbol":typeof obj}function isArray(variable){return"[object Array]"===Object.prototype.toString.call(variable)}function getHumanizedTimeDuration(timeDurationInMilliseconds){function addPluralSuffix(number){return number>1?"s":""}var duration=Math.floor(timeDurationInMilliseconds/1e3);var years=Math.floor(duration/31536e3);if(years)return years+" year"+addPluralSuffix(years);var days=Math.floor((duration%=31536e3)/86400);if(days)return days+" day"+addPluralSuffix(days);var hours=Math.floor((duration%=86400)/3600);if(hours)return hours+" hour"+addPluralSuffix(hours);var minutes=Math.floor((duration%=3600)/60);if(minutes)return minutes+" minute"+addPluralSuffix(minutes);var seconds=duration%60;if(seconds)return seconds+" second"+addPluralSuffix(seconds);return"just now"}function isBrowserEnv(){return"undefined"!=typeof window}function isDev(){return true}function isPushNotificationsSupported(){var chromeVersion=navigator.appVersion.match(/Chrome\/(.*?) /);if(isSupportedFireFox())return true;if(isSupportedSafari())return true;if(!chromeVersion)return false;if(navigator.appVersion.match(/Edge/))return false;if(navigator.appVersion.match(/ wv/))return false;if(navigator.appVersion.match(/OPR\//))return false;if(/iPad|iPhone|iPod/.test(navigator.platform))return false;return parseInt(chromeVersion[1].substring(0,2))>41}function isBrowserSafari(){var safariVersion=navigator.appVersion.match("Version/([0-9]?).* Safari");return null!=safariVersion}function isSupportedFireFox(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);if(fireFoxVersion)return parseInt(fireFoxVersion[2].substring(0,2))>43;return false}function isBrowserFirefox(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);return null!=fireFoxVersion}function getFirefoxVersion(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);if(fireFoxVersion)return parseInt(fireFoxVersion[2].substring(0,2));else return-1}function isSupportedSafari(){var safariVersion=navigator.appVersion.match("Version/([0-9]?).* Safari");if(null==safariVersion)return false;if(/iPhone|iPad|iPod/i.test(navigator.userAgent))return false;return parseInt(safariVersion[1])>6}function removeDomElement(selector){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)els[i].parentNode.removeChild(els[i])}function addDomElement(targetSelectorOrElement,addOrder,elementHtml){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).insertAdjacentHTML(addOrder,elementHtml);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.insertAdjacentHTML(addOrder,elementHtml);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function addCssClass(targetSelectorOrElement,cssClass){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).classList.add(cssClass);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.classList.add(cssClass);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function removeCssClass(targetSelectorOrElement,cssClass){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).classList.remove(cssClass);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.classList.remove(cssClass);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function on(targetSelectorOrElement,event,task){if(!event)_loglevel2["default"].error("Cannot call on() with no event: ",event);if(!task)_loglevel2["default"].error("Cannot call on() with no task: ",task);_loglevel2["default"].debug("Debug me here.");if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)on(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)on(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.addEventListener(event,task);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function once(targetSelectorOrElement,event,task){var manualDestroy=arguments.length<=3||void 0===arguments[3]?false:arguments[3];if(!event)_loglevel2["default"].error("Cannot call on() with no event: ",event);if(!task)_loglevel2["default"].error("Cannot call on() with no task: ",task);if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)once(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)once(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement))){var taskWrapper=function(){var internalTaskFunction=function internalTaskFunction(e){var destroyEventListener=function destroyEventListener(){targetSelectorOrElement.removeEventListener(e.type,taskWrapper)};if(!manualDestroy)destroyEventListener();task(e,destroyEventListener)};return internalTaskFunction}();targetSelectorOrElement.addEventListener(event,taskWrapper)}else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function off(targetSelectorOrElement,event,task){if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)off(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)off(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))if(task)targetSelectorOrElement.removeEventListener(event,task);else targetSelectorOrElement.removeEventListener(event);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}Object.defineProperty(exports,"__esModule",{value:true});exports.isArray=isArray;exports.getHumanizedTimeDuration=getHumanizedTimeDuration;exports.isBrowserEnv=isBrowserEnv;exports.isDev=isDev;exports.isPushNotificationsSupported=isPushNotificationsSupported;exports.isBrowserSafari=isBrowserSafari;exports.isSupportedFireFox=isSupportedFireFox;exports.isBrowserFirefox=isBrowserFirefox;exports.getFirefoxVersion=getFirefoxVersion;exports.isSupportedSafari=isSupportedSafari;exports.removeDomElement=removeDomElement;exports.addDomElement=addDomElement;exports.addCssClass=addCssClass;exports.removeCssClass=removeCssClass;exports.on=on;exports.once=once;exports.off=off;var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel)},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__;!function(root,definition){"use strict";if("object"==typeof module&&module.exports&&true)module.exports=definition();else if(true)!(__WEBPACK_AMD_DEFINE_FACTORY__=definition,__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.call(exports,__webpack_require__,exports,module):__WEBPACK_AMD_DEFINE_FACTORY__,void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));else root.log=definition()}(this,function(){"use strict";function realMethod(methodName){if(typeof console===undefinedType)return false;else if(void 0!==console[methodName])return bindMethod(console,methodName);else if(void 0!==console.log)return bindMethod(console,"log");else return noop}function bindMethod(obj,methodName){var method=obj[methodName];if("function"==typeof method.bind)return method.bind(obj);else try{return Function.prototype.bind.call(method,obj)}catch(e){return function(){return Function.prototype.apply.apply(method,[obj,arguments])}}}function enableLoggingWhenConsoleArrives(methodName,level,loggerName){return function(){if(typeof console!==undefinedType){replaceLoggingMethods.call(this,level,loggerName);this[methodName].apply(this,arguments)}}}function replaceLoggingMethods(level,loggerName){for(var i=0;i<logMethods.length;i++){var methodName=logMethods[i];this[methodName]=level>i?noop:this.methodFactory(methodName,level,loggerName)}}function defaultMethodFactory(methodName,level,loggerName){return realMethod(methodName)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(name,defaultLevel,factory){function persistLevelIfPossible(levelNum){var levelName=(logMethods[levelNum]||"silent").toUpperCase();try{window.localStorage[storageKey]=levelName;return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"="+levelName+";"}catch(ignore){}}function getPersistedLevel(){var storedLevel;try{storedLevel=window.localStorage[storageKey]}catch(ignore){}if(typeof storedLevel===undefinedType)try{var cookie=window.document.cookie;var location=cookie.indexOf(encodeURIComponent(storageKey)+"=");if(location)storedLevel=/^([^;]+)/.exec(cookie.slice(location))[1];
}catch(ignore){}if(void 0===self.levels[storedLevel])storedLevel=void 0;return storedLevel}var self=this;var currentLevel;var storageKey="loglevel";if(name)storageKey+=":"+name;self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5};self.methodFactory=factory||defaultMethodFactory;self.getLevel=function(){return currentLevel};self.setLevel=function(level,persist){if("string"==typeof level&&void 0!==self.levels[level.toUpperCase()])level=self.levels[level.toUpperCase()];if("number"==typeof level&&level>=0&&level<=self.levels.SILENT){currentLevel=level;if(false!==persist)persistLevelIfPossible(level);replaceLoggingMethods.call(self,level,name);if(typeof console===undefinedType&&level<self.levels.SILENT)return"No console available for logging"}else throw"log.setLevel() called with invalid level: "+level};self.setDefaultLevel=function(level){if(!getPersistedLevel())self.setLevel(level,false)};self.enableAll=function(persist){self.setLevel(self.levels.TRACE,persist)};self.disableAll=function(persist){self.setLevel(self.levels.SILENT,persist)};var initialLevel=getPersistedLevel();if(null==initialLevel)initialLevel=null==defaultLevel?"WARN":defaultLevel;self.setLevel(initialLevel,false)}var noop=function(){};var undefinedType="undefined";var logMethods=["trace","debug","info","warn","error"];var defaultLogger=new Logger;var _loggersByName={};defaultLogger.getLogger=function getLogger(name){if("string"!=typeof name||""===name)throw new TypeError("You must supply a name when creating a logger.");var logger=_loggersByName[name];if(!logger)logger=_loggersByName[name]=new Logger(name,defaultLogger.getLevel(),defaultLogger.methodFactory);return logger};var _log=typeof window!==undefinedType?window.log:void 0;defaultLogger.noConflict=function(){if(typeof window!==undefinedType&&window.log===defaultLogger)window.log=_log;return defaultLogger};return defaultLogger})},function(module,exports,__webpack_require__){(function(fetch){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function apiCall(action,method,data){var headers=new Headers;headers.append("Content-Type","application/json;charset=UTF-8");var contents={method:method||"NO_METHOD_SPECIFIED",headers:headers,cache:"no-cache",body:JSON.stringify(data)};return new Promise(function(resolve,reject){fetch(_vars.HOST_URL+action,contents).then(function status(response){if(response.status>=200&&response.status<300)resolve(response.json());else reject(new Error(response.statusText))})["catch"](function(e){reject(e)})})}function sendNotification(appId,playerIds,titles,contents){var params={app_id:appId,headings:titles,contents:contents,include_player_ids:playerIds,isAnyWeb:true,url:"javascript:void(0);"};return apiCall("notifications","POST",params)}Object.defineProperty(exports,"__esModule",{value:true});exports.apiCall=apiCall;exports.sendNotification=sendNotification;var _vars=__webpack_require__(4);var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel)}).call(exports,__webpack_require__(3))},function(module,exports){"use strict";function LimitStore(){}Object.defineProperty(exports,"__esModule",{value:true});LimitStore.store={};LimitStore.LIMIT=2;LimitStore.put=function(key,value){if(void 0===LimitStore.store[key])LimitStore.store[key]=[null,null];LimitStore.store[key].push(value);if(LimitStore.store[key].length==LimitStore.LIMIT+1)LimitStore.store[key].shift();return LimitStore.store[key]};LimitStore.get=function(key){return LimitStore.store[key]};exports["default"]=LimitStore},function(module,exports){"use strict";if("undefined"!=typeof window)!function(){function CustomEvent(event,params){params=params||{bubbles:false,cancelable:false,details:void 0};var evt=document.createEvent("CustomEvent");evt.initCustomEvent(event,params.bubbles,params.cancelable,params.details);return evt}CustomEvent.prototype=window.Event.prototype;window.CustomEvent=CustomEvent}()},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function triggerEvent(eventName,data){if("undefined"==typeof window){_loglevel2["default"].debug("Skipping triggering of event:",eventName,"because we are running in a ServiceWorker context.");return}var event=new CustomEvent(eventName,{bubbles:true,cancelable:true,details:data});window.dispatchEvent(event)}Object.defineProperty(exports,"__esModule",{value:true});exports.triggerEvent=triggerEvent;var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel)},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _utils=__webpack_require__(5);var _limitStore=__webpack_require__(8);var _limitStore2=_interopRequireDefault(_limitStore);var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel);var _events=__webpack_require__(10);if((0,_utils.isBrowserEnv)()){__webpack_require__(12);var logoSvg=__webpack_require__(16);var Bell=function(){function Bell(){var _this=this;var _ref=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];var _ref$size=_ref.size;var size=void 0===_ref$size?"small":_ref$size;var _ref$position=_ref.position;var position=void 0===_ref$position?"bottom-left":_ref$position;var _ref$theme=_ref.theme;var theme=void 0===_ref$theme?"red-white":_ref$theme;var _ref$showLauncherAfte=_ref.showLauncherAfter;var showLauncherAfter=void 0===_ref$showLauncherAfte?10:_ref$showLauncherAfte;var _ref$showBadgeAfter=_ref.showBadgeAfter;var showBadgeAfter=void 0===_ref$showBadgeAfter?300:_ref$showBadgeAfter;var _ref$messages=_ref.messages;var messages=void 0===_ref$messages?{unsubscribed:"Subscribe to notifications",subscribed:"You're subscribed to notifications"}:_ref$messages;var _ref$prenotify=_ref.prenotify;var prenotify=void 0===_ref$prenotify?true:_ref$prenotify;_classCallCheck(this,Bell);this.options={size:size,position:position,theme:theme,showLauncherAfter:showLauncherAfter,showBadgeAfter:showBadgeAfter,messages:messages,prenotify:prenotify};this.size=this.options.size;this.position=this.options.position;this.messages=this.options.messages;this.messages.queued=[];if(!this.messages.unsubscribed)this.messages.unsubscribed="Subscribe to notifications";if(!this.messages.subscribed)this.messages.subscribed="You're subscribed to notifications";this.states={uninitialized:"The bell is loading.",subscribed:"The user is subscribed",unsubscribed:"The user is unsubscribed"};this.state="uninitialized";window.addEventListener("onesignal.bell.state.changed",function(state){console.info("onesignal.bell.state.changed",state.detail)});window.addEventListener("onesignal.bell.click",function(){var originalCall=function originalCall(){_this.hideMessage();if("unsubscribed"===_this.state)OneSignal.registerForPushNotifications();else if(!_this.isDialogOpened())_this.showDialog().then(function(e){var self=_this;(0,_utils.once)(document,"click",function(e,destroyEventListener){var wasDialogClicked=self.launcherDialog.contains(e.target);if(wasDialogClicked);else{destroyEventListener();self.hideDialog().then(function(e){if(_this.wasInactive){_this.setInactive(true);_this.wasInactive=void 0}})["catch"](function(e){_loglevel2["default"].error(e)})}},true)})["catch"](function(e){_loglevel2["default"].error(e)})};if(_this.isInactive()){_this.wasInactive=true;_this.setInactive(false).then(function(){originalCall()})["catch"](function(e){_loglevel2["default"].error(e)})}else originalCall()});window.addEventListener("onesignal.bell.hovering",function(){if(_this.isInactive()){_this.wasInactive=true;_this.setInactive(false)}if(_this.isMessageOpened()||_this.isDialogOpened()){console.debug("There is already a message being displayed; wait until it is hidden again.");return}if(messages.queued.length>0){var dequeuedMessage=_this.dequeueMessage();_this.setMessage(dequeuedMessage)}else _this.setMessage(_this.messages[_this.state]);_this.showMessage()});window.addEventListener("onesignal.bell.hovered",function(){if(_this.isMessageOpened())_this.hideMessage().then(function(){_this.setMessage(_this.messages[_this.state]);if(_this.wasInactive&&!_this.isDialogOpened()){_this.setInactive(true);_this.wasInactive=void 0}})});window.addEventListener("onesignal.subscription.changed",function(e){_this.setState(e.detail?"subscribed":"unsubscribed")});window.addEventListener("onesignal.actions.welcomenotificationsent",function(e){_this.displayMessage("Thanks for subscribing!",2500).then(function(){_this.setInactive(true)})["catch"](function(e){_loglevel2["default"].error(e)})});this.updateState()}_createClass(Bell,[{key:"create",value:function create(){var _this2=this;if(!(0,_utils.isPushNotificationsSupported)())return;if(this.container)(0,_utils.removeDomElement)("onesignal-bell-container");window.addDomElement=_utils.addDomElement;(0,_utils.addDomElement)("body","beforeend",'<div id="onesignal-bell-container" class="onesignal-bell-container onesignal-reset"></div>');(0,_utils.addDomElement)(this.container,"beforeend",'<div id="onesignal-bell-launcher" class="onesignal-bell-launcher"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-button"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-badge"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-message"></div>');(0,_utils.addDomElement)(this.launcherMessage,"beforeend",'<div class="onesignal-bell-launcher-message-body"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-dialog"></div>');(0,_utils.addDomElement)(this.launcherDialog,"beforeend",'<div class="onesignal-bell-launcher-dialog-body"></div>');(0,_utils.addDomElement)(this.launcherDialogBody,"beforeend",'\n        <h1>Manage Site Notifications</h1>\n        <div class="push-notification">\n          <div class="push-notification-icon"></div>\n          <div class="push-notification-text-container">\n            <div class="push-notification-text-short"></div>\n            <div class="push-notification-text"></div>\n            <div class="push-notification-text"></div>\n          </div>\n        </div>\n        <div class="action-container">\n          <button type="button" id="action-button">Unsubscribe</button>\n        </div>\n        <div class="divider"></div>\n        <div class="kickback">Powered by OneSignal</div>\n        ');this.launcherButton.addEventListener("mouseover",function(){var isHoveringData=_limitStore2["default"].get("bell.launcherButton.mouse","over");if(void 0===isHoveringData||"out"===isHoveringData[isHoveringData.length-1])(0,_events.triggerEvent)("onesignal.bell.hovering");_limitStore2["default"].put("bell.launcherButton.mouse","over")});this.launcherButton.addEventListener("mouseleave",function(){_limitStore2["default"].put("bell.launcherButton.mouse","out");(0,_events.triggerEvent)("onesignal.bell.hovered")});this.launcherButton.addEventListener("mousedown",function(){(0,_utils.removeDomElement)(".pulse-ring");(0,_utils.addDomElement)(_this2.launcherButton,"beforeend",'<div class="pulse-ring"></div>');(0,_utils.addCssClass)(_this2.launcherButton,"onesignal-bell-launcher-button-active");(0,_utils.addCssClass)(_this2.launcherBadge,"onesignal-bell-launcher-badge-active")});this.launcherButton.addEventListener("mouseup",function(){(0,_utils.removeCssClass)(_this2.launcherButton,"onesignal-bell-launcher-button-active");(0,_utils.removeCssClass)(_this2.launcherBadge,"onesignal-bell-launcher-badge-active")});this.launcherButton.addEventListener("click",function(){(0,_events.triggerEvent)("onesignal.bell.button.click");(0,_events.triggerEvent)("onesignal.bell.click")});(0,_utils.addDomElement)(this.launcherButton,"beforeEnd",logoSvg);this.setSize(this.options.size);if("bottom-left"===this.options.position){(0,_utils.addCssClass)(this.container,"onesignal-bell-container-bottom-left");(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-bottom-left")}else if("bottom-right"===this.options.position){(0,_utils.addCssClass)(this.container,"onesignal-bell-container-bottom-right");(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-bottom-right")}else throw new Error("Invalid OneSignal bell position "+this.options.position);if("default"===this.options.theme)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-theme-default");else if("inverse"===this.options.theme)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-theme-inverse");else throw new Error("Invalid OneSignal bell theme "+this.options.theme);OneSignal.isPushNotificationsEnabled(function(isPushEnabled){if(isPushEnabled){console.log("isPushEnabled",isPushEnabled);var promise=_this2.setInactive(true)}else var promise=Promise.resolve();promise.then(function(){_this2._scheduleEvent(_this2.options.showLauncherAfter,function(){_this2.showLauncher()}).then(function(){return _this2._scheduleEvent(_this2.options.showBadgeAfter,function(){if(_this2.options.prenotify)if(!isPushEnabled){_this2.enqueueMessage("Click to subscribe to notifications");_this2.showBadge()}_this2.initialized=true})})["catch"](function(e){_loglevel2["default"].error(e)})})})}},{key:"_scheduleEvent",value:function _scheduleEvent(msInFuture,task){if("function"!=typeof task)throw new Error("Task to be scheduled must be a function.");if(0>=msInFuture){task();return Promise.resolve()}return new Promise(function(resolve,reject){setTimeout(function(){task();resolve()},msInFuture)})}},{key:"updateState",value:function updateState(){var _this3=this;OneSignal.isPushNotificationsEnabled(function(isEnabled){_this3.setState(isEnabled?"subscribed":"unsubscribed")})}},{key:"setState",value:function setState(newState){if(this.states.hasOwnProperty(newState)){var lastState=this.state;this.state=newState;if(lastState!==newState)(0,_events.triggerEvent)("onesignal.bell.state.changed",{from:lastState,to:newState});this.setMessage(this.messages[newState])}else _loglevel2["default"].error("Cannot update to invalid new state",newState)}},{key:"enqueueMessage",value:function enqueueMessage(message){var _this4=this;var notify=arguments.length<=1||void 0===arguments[1]?false:arguments[1];this.messages.queued.push(message);if(this.isBadgeOpen())this.hideBadge().then(function(){_this4.incrementBadge();_this4.showBadge()});else{this.incrementBadge();if(this.initialized)this.showBadge()}}},{key:"dequeueMessage",value:function dequeueMessage(message){var _this5=this;var dequeuedMessage=this.messages.queued.pop(message);if(this.isBadgeOpen())this.hideBadge().then(function(){_this5.decrementBadge();_this5.showBadge()});else{var newBadgeNumber=this.decrementBadge();if(0>=newBadgeNumber)this.hideBadge()}return dequeuedMessage}},{key:"showDialog",value:function showDialog(){var _this6=this;(0,_utils.addCssClass)(this.launcherDialog,"onesignal-bell-launcher-dialog-opened");return new Promise(function(resolve,reject){(0,_utils.once)(_this6.launcherDialog,"transitionend",function(e){if(e.target===_this6.launcherDialog){e.stopPropagation();return resolve(e)}})})}},{key:"hideDialog",value:function hideDialog(){var _this7=this;(0,_utils.removeCssClass)(this.launcherDialog,"onesignal-bell-launcher-dialog-opened");return new Promise(function(resolve,reject){(0,_utils.once)(_this7.launcherDialog,"transitionend",function(e){if(e.target===_this7.launcherDialog){e.stopPropagation();return resolve(e)}})})}},{key:"isDialogOpened",value:function isDialogOpened(){return document.querySelector(".onesignal-bell-launcher-dialog-opened")}},{key:"showLauncher",value:function showLauncher(){(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-active")}},{key:"hideLauncher",value:function hideLauncher(){(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-active")}},{key:"setMessage",value:function setMessage(message){this.launcherMessageBody.innerHTML=message}},{key:"showMessage",value:function showMessage(){(0,_utils.addCssClass)(this.launcherMessage,"onesignal-bell-launcher-message-opened")}},{key:"hideMessage",value:function hideMessage(){var _this8=this;(0,_utils.removeCssClass)(this.launcherMessage,"onesignal-bell-launcher-message-opened");return new Promise(function(resolve,reject){(0,_utils.once)(_this8.launcherMessage,"transitionend",function(e){if(e.target===_this8.launcherMessage){e.stopPropagation();return resolve(e)}})})}},{key:"isMessageOpened",value:function isMessageOpened(){return document.querySelector(".onesignal-bell-launcher-message-opened")}},{key:"displayMessage",value:function displayMessage(content){var _this9=this;var hideAfter=arguments.length<=1||void 0===arguments[1]?0:arguments[1];return new Promise(function(resolve,reject){if(_this9.isMessageOpened())_this9.hideMessage().then(function(){_this9.setMessage(content);_this9.showMessage();if(hideAfter)setTimeout(function(){_this9.hideMessage();return resolve()},hideAfter);else return resolve()})["catch"](function(e){_loglevel2["default"].error(e)});else{_this9.setMessage(content);_this9.showMessage();if(hideAfter)setTimeout(function(){_this9.hideMessage();return resolve()},hideAfter);else return resolve()}})}},{key:"setBadge",value:function setBadge(content){this.launcherBadge.innerHTML=content}},{key:"showBadge",value:function showBadge(){if(this.badgeHasContent())(0,_utils.addCssClass)(this.launcherBadge,"onesignal-bell-launcher-badge-opened")}},{key:"isBadgeOpen",value:function isBadgeOpen(){return document.querySelector(".onesignal-bell-badge-opened")}},{key:"badgeHasContent",value:function badgeHasContent(){return this.launcherBadge.innerHTML.length>0}},{key:"getBadgeContent",value:function getBadgeContent(){return this.launcherBadge.innerHTML}},{key:"incrementBadge",value:function incrementBadge(){var content=this.getBadgeContent();if(!isNaN(content)){var badgeNumber=+content;badgeNumber+=1;this.setBadge(badgeNumber);return badgeNumber}}},{key:"decrementBadge",value:function decrementBadge(){var content=this.getBadgeContent();if(!isNaN(content)){var badgeNumber=+content;badgeNumber-=1;this.setBadge(badgeNumber);return badgeNumber}}},{key:"hideBadge",value:function hideBadge(){var _this10=this;return new Promise(function(resolve,reject){(0,_utils.removeCssClass)(_this10.launcherBadge,"onesignal-bell-launcher-badge-opened");(0,_utils.once)(_this10.launcherBadge,"transitionend",function(e){if(e.target===_this10.launcherBadge){e.stopPropagation();return resolve(e)}})})["catch"](function(e){_loglevel2["default"].error(e);reject(e)})}},{key:"isInactive",value:function isInactive(){return document.querySelector(".onesignal-bell-launcher-inactive")}},{key:"setInactive",value:function setInactive(isInactive){var _this11=this;if(isInactive){this.hideMessage();if(this.badgeHasContent())return this.hideBadge().then(function(){(0,_utils.addCssClass)(_this11.launcher,"onesignal-bell-launcher-inactive");_this11.setSize("small");var launcher=_this11.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}).then(function(){_this11.showBadge()})["catch"](function(e){_loglevel2["default"].error(e)});else{(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-inactive");this.setSize("small");this.setSize("small");var launcher=this.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}}else if(this.badgeHasContent())return this.hideBadge().then(function(){(0,_utils.removeCssClass)(_this11.launcher,"onesignal-bell-launcher-inactive");_this11.setSize(_this11.options.size);var launcher=_this11.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}).then(function(){_this11.showBadge()})["catch"](function(e){_loglevel2["default"].error(e)});else{(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-inactive");this.setSize(this.options.size);var launcher=this.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}}},{key:"setSize",value:function setSize(size){(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-sm");(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-md");(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-lg");if("small"===size)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-sm");else if("medium"===size)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-md");else if("large"===size)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-lg");else throw new Error("Invalid OneSignal bell size "+size)}},{key:"container",get:function get(){return document.querySelector("#onesignal-bell-container")}},{key:"launcher",get:function get(){return this.container.querySelector("#onesignal-bell-launcher")}},{key:"launcherButton",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-button")}},{key:"launcherBadge",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-badge")}},{key:"launcherMessage",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-message")}},{key:"launcherMessageBody",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-message-body")}},{key:"launcherDialog",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-dialog")}},{key:"launcherDialogBody",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-dialog-body")}}]);return Bell}();module.exports=Bell}},function(module,exports,__webpack_require__){var content=__webpack_require__(13);if("string"==typeof content)content=[[module.id,content,""]];var update=__webpack_require__(15)(content,{});if(content.locals)module.exports=content.locals;if(false){if(!content.locals)module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./bell.scss",function(){var newContent=require("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./bell.scss");if("string"==typeof newContent)newContent=[[module.id,newContent,""]];update(newContent)});module.hot.dispose(function(){update()})}},function(module,exports,__webpack_require__){exports=module.exports=__webpack_require__(14)();exports.push([module.id,'/*!\n* CleanSlate\n*   github.com/premasagar/cleanslate\n*\n*/.onesignal-reset,.onesignal-reset a,.onesignal-reset abbr,.onesignal-reset acronym,.onesignal-reset address,.onesignal-reset applet,.onesignal-reset area,.onesignal-reset article,.onesignal-reset aside,.onesignal-reset audio,.onesignal-reset b,.onesignal-reset big,.onesignal-reset blockquote,.onesignal-reset button,.onesignal-reset canvas,.onesignal-reset caption,.onesignal-reset cite,.onesignal-reset code,.onesignal-reset col,.onesignal-reset colgroup,.onesignal-reset datalist,.onesignal-reset dd,.onesignal-reset del,.onesignal-reset dfn,.onesignal-reset div,.onesignal-reset dl,.onesignal-reset dt,.onesignal-reset em,.onesignal-reset fieldset,.onesignal-reset figcaption,.onesignal-reset figure,.onesignal-reset footer,.onesignal-reset form,.onesignal-reset h1,.onesignal-reset h2,.onesignal-reset h3,.onesignal-reset h4,.onesignal-reset h5,.onesignal-reset h6,.onesignal-reset header,.onesignal-reset hr,.onesignal-reset i,.onesignal-reset iframe,.onesignal-reset img,.onesignal-reset input,.onesignal-reset ins,.onesignal-reset kbd,.onesignal-reset label,.onesignal-reset legend,.onesignal-reset li,.onesignal-reset main,.onesignal-reset map,.onesignal-reset mark,.onesignal-reset menu,.onesignal-reset meta,.onesignal-reset nav,.onesignal-reset object,.onesignal-reset ol,.onesignal-reset optgroup,.onesignal-reset option,.onesignal-reset output,.onesignal-reset p,.onesignal-reset pre,.onesignal-reset progress,.onesignal-reset q,.onesignal-reset samp,.onesignal-reset section,.onesignal-reset select,.onesignal-reset small,.onesignal-reset span,.onesignal-reset strike,.onesignal-reset strong,.onesignal-reset sub,.onesignal-reset summary,.onesignal-reset sup,.onesignal-reset table,.onesignal-reset tbody,.onesignal-reset td,.onesignal-reset textarea,.onesignal-reset tfoot,.onesignal-reset th,.onesignal-reset thead,.onesignal-reset time,.onesignal-reset tr,.onesignal-reset tt,.onesignal-reset ul,.onesignal-reset var,.onesignal-reset video{background-attachment:scroll;background-color:transparent;background-image:none;background-position:0 0;background-repeat:repeat;border-color:#000;border:medium none currentColor;bottom:auto;clear:none;clip:auto;color:inherit;counter-increment:none;counter-reset:none;cursor:auto;direction:inherit;display:inline;float:none;font-family:inherit;font-size:inherit;font-style:inherit;font-variant:normal;font-weight:inherit;height:auto;left:auto;letter-spacing:normal;line-height:inherit;list-style-type:inherit;list-style-position:outside;list-style-image:none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;outline:medium none invert;overflow:visible;padding:0;position:static;quotes:"" "";right:auto;table-layout:auto;text-align:inherit;text-decoration:inherit;text-indent:0;text-transform:none;top:auto;unicode-bidi:normal;vertical-align:baseline;visibility:inherit;white-space:normal;width:auto;word-spacing:normal;z-index:auto;background-origin:padding-box;background-clip:border-box;background-size:auto;-webkit-border-image:none;-o-border-image:none;border-image:none;border-radius:0;box-shadow:none;box-sizing:content-box;-webkit-column-count:auto;-moz-column-count:auto;column-count:auto;-webkit-column-gap:normal;-moz-column-gap:normal;column-gap:normal;-webkit-column-rule:medium none #000;-moz-column-rule:medium none #000;column-rule:medium none #000;-webkit-column-span:1;-moz-column-span:1;column-span:1;-webkit-column-width:auto;-moz-column-width:auto;column-width:auto;font-feature-settings:normal;overflow-x:visible;overflow-y:visible;-webkit-hyphens:manual;-moz-hyphens:manual;hyphens:manual;-webkit-perspective:none;-ms-perspective:none;-o-perspective:none;perspective:none;-webkit-perspective-origin:50% 50%;-ms-perspective-origin:50% 50%;-o-perspective-origin:50% 50%;perspective-origin:50% 50%;-webkit-backface-visibility:visible;backface-visibility:visible;text-shadow:none;-webkit-transition:all 0s ease 0s;transition:all 0s ease 0s;-webkit-transform:none;-ms-transform:none;transform:none;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform-style:flat;transform-style:flat;word-break:normal}.onesignal-reset,.onesignal-reset address,.onesignal-reset article,.onesignal-reset audio,.onesignal-reset blockquote,.onesignal-reset caption,.onesignal-reset colgroup,.onesignal-reset dd,.onesignal-reset dialog,.onesignal-reset div,.onesignal-reset dl,.onesignal-reset dt,.onesignal-reset fieldset,.onesignal-reset figure,.onesignal-reset footer,.onesignal-reset form,.onesignal-reset h1,.onesignal-reset h2,.onesignal-reset h3,.onesignal-reset h4,.onesignal-reset h5,.onesignal-reset h6,.onesignal-reset header,.onesignal-reset hgroup,.onesignal-reset hr,.onesignal-reset main,.onesignal-reset menu,.onesignal-reset nav,.onesignal-reset ol,.onesignal-reset option,.onesignal-reset p,.onesignal-reset pre,.onesignal-reset progress,.onesignal-reset section,.onesignal-reset summary,.onesignal-reset ul,.onesignal-reset video{display:block}.onesignal-reset h1,.onesignal-reset h2,.onesignal-reset h3,.onesignal-reset h4,.onesignal-reset h5,.onesignal-reset h6{font-weight:700}.onesignal-reset h1{font-size:2em;padding:.67em 0}.onesignal-reset h2{font-size:1.5em;padding:.83em 0}.onesignal-reset h3{font-size:1.17em;padding:.83em 0}.onesignal-reset h4{font-size:1em}.onesignal-reset h5{font-size:.83em}.onesignal-reset p{margin:1em 0}.onesignal-reset table{display:table}.onesignal-reset thead{display:table-header-group}.onesignal-reset tbody{display:table-row-group}.onesignal-reset tfoot{display:table-footer-group}.onesignal-reset tr{display:table-row}.onesignal-reset td,.onesignal-reset th{display:table-cell;padding:2px}.onesignal-reset ol,.onesignal-reset ul{margin:1em 0}.onesignal-reset ol li,.onesignal-reset ol ol li,.onesignal-reset ol ol ol li,.onesignal-reset ol ol ul li,.onesignal-reset ol ul ul li,.onesignal-reset ul li,.onesignal-reset ul ol ol li,.onesignal-reset ul ul li,.onesignal-reset ul ul ol li,.onesignal-reset ul ul ul li{list-style-position:inside;margin-top:.08em}.onesignal-reset ol ol,.onesignal-reset ol ol ol,.onesignal-reset ol ol ul,.onesignal-reset ol ul,.onesignal-reset ol ul ul,.onesignal-reset ul ol,.onesignal-reset ul ol ol,.onesignal-reset ul ul,.onesignal-reset ul ul ol,.onesignal-reset ul ul ul{padding-left:40px;margin:0}.onesignal-reset nav ol,.onesignal-reset nav ul{list-style-type:none}.onesignal-reset menu,.onesignal-reset ul{list-style-type:disc}.onesignal-reset ol{list-style-type:decimal}.onesignal-reset menu menu,.onesignal-reset menu ul,.onesignal-reset ol menu,.onesignal-reset ol ul,.onesignal-reset ul menu,.onesignal-reset ul ul{list-style-type:circle}.onesignal-reset menu menu menu,.onesignal-reset menu menu ul,.onesignal-reset menu ol menu,.onesignal-reset menu ol ul,.onesignal-reset menu ul menu,.onesignal-reset menu ul ul,.onesignal-reset ol menu menu,.onesignal-reset ol menu ul,.onesignal-reset ol ol menu,.onesignal-reset ol ol ul,.onesignal-reset ol ul menu,.onesignal-reset ol ul ul,.onesignal-reset ul menu menu,.onesignal-reset ul menu ul,.onesignal-reset ul ol menu,.onesignal-reset ul ol ul,.onesignal-reset ul ul menu,.onesignal-reset ul ul ul{list-style-type:square}.onesignal-reset li{display:list-item;min-height:auto;min-width:auto;padding-left:20px}.onesignal-reset strong{font-weight:700}.onesignal-reset em{font-style:italic}.onesignal-reset code,.onesignal-reset kbd,.onesignal-reset pre,.onesignal-reset samp{font-family:monospace}.onesignal-reset a{color:blue;text-decoration:underline}.onesignal-reset a:visited{color:#529}.onesignal-reset a,.onesignal-reset a *,.onesignal-reset input[type=checkbox],.onesignal-reset input[type=radio],.onesignal-reset input[type=submit],.onesignal-reset select{cursor:pointer}.onesignal-reset button,.onesignal-reset input[type=submit]{text-align:center;padding:2px 6px 3px;border-radius:4px;text-decoration:none;font-family:arial,helvetica,sans-serif;font-size:small;-webkit-appearance:push-button;color:buttontext;border:1px solid #a6a6a6;background:#d3d3d3;background:#fff;background:-webkit-gradient(linear,left top,left bottom,color-stop(0,#fff),color-stop(100%,#ddd),color-stop(100%,#d1d1d1),color-stop(100%,#ddd));background:-webkit-linear-gradient(top,#fff 0,#ddd 100%,#d1d1d1 100%,#ddd 100%);background:linear-gradient(to bottom,#fff 0,#ddd 100%,#d1d1d1 100%,#ddd 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#ffffff\',endColorstr=\'#dddddd\',GradientType=0);-o-box-shadow:1px 1px 0 #eee;box-shadow:1px 1px 0 #eee;outline:initial}.onesignal-reset button{padding:1px 6px 2px;margin-right:5px}.onesignal-reset input[type=hidden]{display:none}.onesignal-reset textarea{-webkit-appearance:textarea;background:#fff;padding:2px;margin-left:4px;word-wrap:break-word;white-space:pre-wrap;font-size:11px;font-family:arial,helvetica,sans-serif;line-height:13px;resize:both}.onesignal-reset input,.onesignal-reset select,.onesignal-reset textarea{border:1px solid #ccc}.onesignal-reset select{font-size:11px;font-family:helvetica,arial,sans-serif;display:inline-block}.onesignal-reset input:focus,.onesignal-reset textarea:focus{outline:5px auto -webkit-focus-ring-color;outline:initial}.onesignal-reset input[type=text]{background:#fff;padding:1px;font-family:initial;font-size:small}.onesignal-reset input[type=checkbox],.onesignal-reset input[type=radio]{border:1px solid #2b2b2b;border-radius:4px;outline:intial}.onesignal-reset input[type=radio]{margin:2px 2px 3px}.onesignal-reset button:active,.onesignal-reset input[type=submit]:active{background:#3b679e;background:-webkit-gradient(linear,left top,left bottom,color-stop(0,#3b679e),color-stop(50%,#2b88d9),color-stop(51%,#207cca),color-stop(100%,#7db9e8));background:-webkit-linear-gradient(top,#3b679e 0,#2b88d9 50%,#207cca 51%,#7db9e8 100%);background:linear-gradient(to bottom,#3b679e 0,#2b88d9 50%,#207cca 51%,#7db9e8 100%);border-color:#5259b0}.onesignal-reset abbr[title],.onesignal-reset acronym[title],.onesignal-reset dfn[title]{cursor:help;border-bottom-width:1px;border-bottom-style:dotted}.onesignal-reset ins{background-color:#ff9;color:#000}.onesignal-reset del{text-decoration:line-through}.onesignal-reset blockquote,.onesignal-reset q{quotes:none}.onesignal-reset blockquote:after,.onesignal-reset blockquote:before,.onesignal-reset li:after,.onesignal-reset li:before,.onesignal-reset q:after,.onesignal-reset q:before{content:""}.onesignal-reset input,.onesignal-reset select{vertical-align:middle}.onesignal-reset table{border-collapse:collapse;border-spacing:0}.onesignal-reset hr{display:block;height:1px;border:0;border-top:1px solid #ccc;margin:1em 0}.onesignal-reset [dir=rtl]{direction:rtl}.onesignal-reset mark{background-color:#ff9;color:#000;font-style:italic;font-weight:700}.onesignal-reset menu{padding-left:40px;padding-top:8px}.onesignal-reset [hidden],.onesignal-reset template{display:none}.onesignal-reset abbr[title]{border-bottom:1px dotted}.onesignal-reset sub,.onesignal-reset sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.onesignal-reset sup{top:-.5em}.onesignal-reset sub{bottom:-.25em}.onesignal-reset img{border:0}.onesignal-reset figure{margin:0}.onesignal-reset textarea{overflow:auto;vertical-align:top}.onesignal-reset{font-size:medium;line-height:1;direction:ltr;text-align:left;text-align:start;font-family:Times New Roman,Times,serif;color:#000;font-style:normal;font-weight:400;text-decoration:none;list-style-type:disc}.onesignal-reset pre{white-space:pre}#onesignal-bell-container.onesignal-reset{z-index:2147483000;position:fixed}#onesignal-bell-container.onesignal-reset.onesignal-bell-container-bottom-left{bottom:0;left:0}#onesignal-bell-container.onesignal-reset.onesignal-bell-container-bottom-right{bottom:0;right:0}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:absolute;z-index:2147483000;font-family:Helvetica Neue,Helvetica,Arial,sans-serif;transform:scale(.01) translateZ(0);opacity:0;transition:transform 175ms ease-in-out,opacity 175ms ease-in-out;width:330px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left{bottom:20px;left:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm{transform-origin:16px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-message{left:42px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog{bottom:39px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:before{right:5px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:after{right:7px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md{transform-origin:24px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-message{left:61px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog{bottom:58px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:before{right:12px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:after{right:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg{transform-origin:32px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-message{left:81px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog{bottom:78px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:before{right:18px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:after{right:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-badge{left:4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-message{transform-origin:left center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-message:after{right:100%;border-right-color:#000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-button{left:0}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right{bottom:20px;right:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm{transform-origin:314px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-message{right:42px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog{bottom:39px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:before{right:5px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:after{right:7px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md{transform-origin:306px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-message{right:61px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog{bottom:58px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:before{right:12px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:after{right:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg{transform-origin:298px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-message{right:81px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog{bottom:78px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:before{right:18px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:after{right:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-badge{right:4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-message{transform-origin:right center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-message:after{left:100%;border-left-color:#000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-button{right:0}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-button{position:absolute;bottom:0;border-radius:50%;transition:transform 175ms ease-in-out,border 175ms ease-in-out,width 175ms ease-in-out,height 175ms ease-in-out;cursor:pointer;z-index:2147483000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-button svg{width:100%;height:100%;-webkit-filter:drop-shadow(0 2px 4px rgba(34,36,38,.35));filter:drop-shadow(0 2px 4px rgba(34,36,38,.35))}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-button.onesignal-bell-launcher-button-hover{cursor:pointer}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-badge{position:absolute;bottom:0;border-radius:50%;text-align:center;top:0;cursor:pointer;-webkit-filter:drop-shadow(0 2px 4px rgba(34,36,38,0));filter:drop-shadow(0 2px 4px rgba(34,36,38,0));transition:transform 175ms ease-in-out,border 175ms ease-in-out,opacity .21s ease-in-out,width .21s ease-in-out,height .21s ease-in-out,position .21s ease-in-out,right .21s ease-in-out,top .21s ease-in-out,bottom .21s ease-in-out,left .21s ease-in-out;z-index:2147483400;opacity:0;transform:scale(.01);pointer-events:none}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-badge.onesignal-bell-launcher-badge-hover{cursor:pointer}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-badge.onesignal-bell-launcher-badge-opened{opacity:1;transform:scale(1)}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message{position:absolute;color:#fff;background:#000;cursor:pointer;border-radius:5px;transform:translateY(-50%) scaleX(0) translateZ(0);opacity:0;pointer-events:none;transition:transform 175ms ease-in-out,opacity 175ms ease-in-out;top:50%;z-index:2147481000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message:after{top:50%;border:solid transparent;content:" ";height:0;width:0;position:absolute;pointer-events:none;border-color:transparent}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{z-index:2147482000;max-width:100%;white-space:nowrap;text-overflow:ellipsis}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message.onesignal-bell-launcher-message-opened{pointer-events:auto;opacity:1;transform:translateY(-50%) scaleX(1) translateZ(0)}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog{cursor:pointer;position:absolute;right:0;background-color:#fff;border-radius:5px;border:1px solid rgba(0,0,0,.1);-webkit-filter:drop-shadow(0 2px 2px rgba(34,36,38,.15));filter:drop-shadow(0 2px 2px rgba(34,36,38,.15));opacity:0;transform:scale(0) translateZ(0);transition:transform 175ms ease-in-out,opacity 175ms ease-in-out;transform-origin:right bottom;z-index:2147481000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog:after,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog:before{top:100%;border:solid transparent;content:" ";height:0;width:0;position:absolute}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body{z-index:2147482000;max-width:100%;white-space:nowrap;text-overflow:ellipsis;font-family:Helvetica Neue,Helvetica,Arial,sans-serif}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog.onesignal-bell-launcher-dialog-opened{transform:scale(1) translateZ(0);opacity:1}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm{height:32px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-button{width:32px;height:32px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-badge{font-size:8px;width:12px;height:12px;line-height:12px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-message{padding:9.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-message:after{border-width:6.6px;margin-top:-6.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog{padding:3.2px 9.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:after{border-top-color:#fff;border-width:6.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:before{border-top-color:rgba(0,0,0,.1);border-width:8.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body h1{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md{height:48px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-button{width:48px;height:48px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-badge{font-size:12px;width:18px;height:18px;line-height:18px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-message{padding:14.4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-message:after{border-width:9.9px;margin-top:-9.9px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog{padding:4.8px 14.4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:after{border-top-color:#fff;border-width:9.9px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:before{border-top-color:rgba(0,0,0,.1);border-width:11.9px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body h1{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg{height:64px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-button{width:64px;height:64px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-badge{font-size:12px;width:24px;height:24px;line-height:24px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-message{padding:19.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-message:after{border-width:13.2px;margin-top:-13.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog{padding:6.4px 19.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:after{border-top-color:#fff;border-width:13.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:before{border-top-color:rgba(0,0,0,.1);border-width:15.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body h1{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button svg .background{fill:#e54b4d}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button svg .foreground{fill:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button svg .stroke{fill:none;stroke:#fff;stroke-width:3px;stroke-miterlimit:10}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button.onesignal-bell-launcher-badge-active svg .background,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button.onesignal-bell-launcher-button-active svg .background{fill:#dd2022!important}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-badge{border:1px solid #fff;background:#000;color:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button svg .background{fill:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button svg .foreground{fill:#e54b4d}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button svg .stroke{fill:none;stroke:#e54b4d;stroke-width:3px;stroke-miterlimit:10}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button.onesignal-bell-launcher-badge-active svg .background,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button.onesignal-bell-launcher-button-active svg .background{fill:#f2f2f2!important}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-badge{border:1px solid #fff;background:#e54b4d;color:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-active,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-enabled{transform:scale(1);opacity:1}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-disabled{visibility:hidden}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-inactive{opacity:.6}#onesignal-bell-container.onesignal-reset .pulse-ring{border:7px solid hsla(0,0%,100%,.4);border-radius:50%;position:absolute;left:0;top:0;bottom:0;right:0;-webkit-animation:pulse .35s ease-in-out;animation:pulse .35s ease-in-out;-webkit-animation-iteration-count:1;animation-iteration-count:1;opacity:0;z-index:1000;pointer-events:none}@media print{#onesignal-bell-container{display:none}}@-webkit-keyframes pulse{0%{-webkit-transform:scale(.1);opacity:0;border-width:10px}50%{opacity:1;border-width:5px}to{-webkit-transform:scale(1.2);opacity:0;border-width:1px}}',""]);
},function(module,exports){module.exports=function(){var list=[];list.toString=function toString(){var result=[];for(var i=0;i<this.length;i++){var item=this[i];if(item[2])result.push("@media "+item[2]+"{"+item[1]+"}");else result.push(item[1])}return result.join("")};list.i=function(modules,mediaQuery){if("string"==typeof modules)modules=[[null,modules,""]];var alreadyImportedModules={};for(var i=0;i<this.length;i++){var id=this[i][0];if("number"==typeof id)alreadyImportedModules[id]=true}for(i=0;i<modules.length;i++){var item=modules[i];if("number"!=typeof item[0]||!alreadyImportedModules[item[0]]){if(mediaQuery&&!item[2])item[2]=mediaQuery;else if(mediaQuery)item[2]="("+item[2]+") and ("+mediaQuery+")";list.push(item)}}};return list}},function(module,exports,__webpack_require__){function addStylesToDom(styles,options){for(var i=0;i<styles.length;i++){var item=styles[i];var domStyle=stylesInDom[item.id];if(domStyle){domStyle.refs++;for(var j=0;j<domStyle.parts.length;j++)domStyle.parts[j](item.parts[j]);for(;j<item.parts.length;j++)domStyle.parts.push(addStyle(item.parts[j],options))}else{var parts=[];for(var j=0;j<item.parts.length;j++)parts.push(addStyle(item.parts[j],options));stylesInDom[item.id]={id:item.id,refs:1,parts:parts}}}}function listToStyles(list){var styles=[];var newStyles={};for(var i=0;i<list.length;i++){var item=list[i];var id=item[0];var css=item[1];var media=item[2];var sourceMap=item[3];var part={css:css,media:media,sourceMap:sourceMap};if(!newStyles[id])styles.push(newStyles[id]={id:id,parts:[part]});else newStyles[id].parts.push(part)}return styles}function insertStyleElement(options,styleElement){var head=getHeadElement();var lastStyleElementInsertedAtTop=styleElementsInsertedAtTop[styleElementsInsertedAtTop.length-1];if("top"===options.insertAt){if(!lastStyleElementInsertedAtTop)head.insertBefore(styleElement,head.firstChild);else if(lastStyleElementInsertedAtTop.nextSibling)head.insertBefore(styleElement,lastStyleElementInsertedAtTop.nextSibling);else head.appendChild(styleElement);styleElementsInsertedAtTop.push(styleElement)}else if("bottom"===options.insertAt)head.appendChild(styleElement);else throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.")}function removeStyleElement(styleElement){styleElement.parentNode.removeChild(styleElement);var idx=styleElementsInsertedAtTop.indexOf(styleElement);if(idx>=0)styleElementsInsertedAtTop.splice(idx,1)}function createStyleElement(options){var styleElement=document.createElement("style");styleElement.type="text/css";insertStyleElement(options,styleElement);return styleElement}function createLinkElement(options){var linkElement=document.createElement("link");linkElement.rel="stylesheet";insertStyleElement(options,linkElement);return linkElement}function addStyle(obj,options){var styleElement,update,remove;if(options.singleton){var styleIndex=singletonCounter++;styleElement=singletonElement||(singletonElement=createStyleElement(options));update=applyToSingletonTag.bind(null,styleElement,styleIndex,false);remove=applyToSingletonTag.bind(null,styleElement,styleIndex,true)}else if(obj.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa){styleElement=createLinkElement(options);update=updateLink.bind(null,styleElement);remove=function(){removeStyleElement(styleElement);if(styleElement.href)URL.revokeObjectURL(styleElement.href)}}else{styleElement=createStyleElement(options);update=applyToTag.bind(null,styleElement);remove=function(){removeStyleElement(styleElement)}}update(obj);return function updateStyle(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap)return;update(obj=newObj)}else remove()}}function applyToSingletonTag(styleElement,index,remove,obj){var css=remove?"":obj.css;if(styleElement.styleSheet)styleElement.styleSheet.cssText=replaceText(index,css);else{var cssNode=document.createTextNode(css);var childNodes=styleElement.childNodes;if(childNodes[index])styleElement.removeChild(childNodes[index]);if(childNodes.length)styleElement.insertBefore(cssNode,childNodes[index]);else styleElement.appendChild(cssNode)}}function applyToTag(styleElement,obj){var css=obj.css;var media=obj.media;var sourceMap=obj.sourceMap;if(media)styleElement.setAttribute("media",media);if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}function updateLink(linkElement,obj){var css=obj.css;var media=obj.media;var sourceMap=obj.sourceMap;if(sourceMap)css+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))+" */";var blob=new Blob([css],{type:"text/css"});var oldSrc=linkElement.href;linkElement.href=URL.createObjectURL(blob);if(oldSrc)URL.revokeObjectURL(oldSrc)}var stylesInDom={},memoize=function(fn){var memo;return function(){if("undefined"==typeof memo)memo=fn.apply(this,arguments);return memo}},isOldIE=memoize(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),getHeadElement=memoize(function(){return document.head||document.getElementsByTagName("head")[0]}),singletonElement=null,singletonCounter=0,styleElementsInsertedAtTop=[];module.exports=function(list,options){if(true)if("object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");options=options||{};if("undefined"==typeof options.singleton)options.singleton=isOldIE();if("undefined"==typeof options.insertAt)options.insertAt="bottom";var styles=listToStyles(list);addStylesToDom(styles,options);return function update(newList){var mayRemove=[];for(var i=0;i<styles.length;i++){var item=styles[i];var domStyle=stylesInDom[item.id];domStyle.refs--;mayRemove.push(domStyle)}if(newList){var newStyles=listToStyles(newList);addStylesToDom(newStyles,options)}for(var i=0;i<mayRemove.length;i++){var domStyle=mayRemove[i];if(0===domStyle.refs){for(var j=0;j<domStyle.parts.length;j++)domStyle.parts[j]();delete stylesInDom[domStyle.id]}}}};var replaceText=function(){var textStore=[];return function(index,replacement){textStore[index]=replacement;return textStore.filter(Boolean).join("\n")}}()},function(module,exports){module.exports='<?xml version="1.0" encoding="utf-8"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version="1.1" class="onesignal-bell-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n	 width="99.7px" height="99.7px" viewBox="0 0 99.7 99.7" style="enable-background:new 0 0 99.7 99.7;" xml:space="preserve">\n<g>\n	<circle class="background" cx="49.9" cy="49.9" r="49.9"/>\n	<g id="Layer_2">\n		<g>\n			<path class="foreground" d="M50.1,66.2H27.7c0,0-2-0.2-2-2.1c0-1.9,1.7-2,1.7-2s6.7-3.2,6.7-5.5c0-2.3-1.1-3.9-1.1-13.3\n				s6-16.6,13.2-16.6c0,0,1-2.4,3.9-2.4c2.8,0,3.8,2.4,3.8,2.4c7.2,0,13.2,7.2,13.2,16.6s-1,11-1,13.3c0,2.3,6.7,5.5,6.7,5.5\n				s1.7,0.1,1.7,2c0,1.8-2.1,2.1-2.1,2.1H50.1z"/>\n			<path class="foreground" d="M42.9,68.5h14.5c0,0-1,6.3-7.2,6.3S42.9,68.5,42.9,68.5z"/>\n			<ellipse class="stroke" cx="49.9" cy="49.9" rx="37.4" ry="36.9"/>\n		</g>\n	</g>\n</g>\n</svg>\n'}]);
//# sourceMappingURL=data:application/json;base64,