/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\n__webpack_require__(1);\n\n__webpack_require__(8);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZW50cnkuanM/OGQyNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsbUJBQU8sQ0FBQyxDQUEyQixDQUFDIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL3Nkay5qc1wiO1xuXG5yZXF1aXJlKFwiZXhwb3NlP09uZVNpZ25hbCEuL3Nkay5qc1wiKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9lbnRyeS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 1:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(fetch) {'use strict';\n\nvar _vars = __webpack_require__(3);\n\nvar _api = __webpack_require__(50);\n\nvar _loglevel = __webpack_require__(5);\n\nvar _loglevel2 = _interopRequireDefault(_loglevel);\n\nvar _limitStore = __webpack_require__(6);\n\nvar _limitStore2 = _interopRequireDefault(_limitStore);\n\n__webpack_require__(7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _temp_OneSignal = null;\n\nif (typeof OneSignal !== \"undefined\") _temp_OneSignal = OneSignal;\n\nvar OneSignal = {\n  _VERSION: 109000,\n  _HOST_URL: _vars.HOST_URL,\n  _app_id: null,\n  _tagsToSendOnRegister: null,\n  _notificationOpened_callback: null,\n  _idsAvailable_callback: [],\n  _defaultLaunchURL: null,\n  _initOptions: null,\n  _httpRegistration: false,\n  _main_page_port: null,\n  _isNotificationEnabledCallback: null,\n  _subscriptionSet: true,\n  _initOneSignalHttp: null,\n  _sessionIframeAdded: false,\n  _useHttpMode: null,\n  _windowWidth: 550,\n  _windowHeight: 480,\n  _isNewVisitor: false,\n  LOGGING: false,\n  SERVICE_WORKER_UPDATER_PATH: \"OneSignalSDKUpdaterWorker.js\",\n  SERVICE_WORKER_PATH: \"OneSignalSDKWorker.js\",\n  SERVICE_WORKER_PARAM: {},\n\n  _ensureDbInstance: function _ensureDbInstance() {\n    return new Promise(function (resolve, reject) {\n      if (OneSignal._oneSignal_db) {\n        resolve(OneSignal._oneSignal_db);\n      } else {\n        var request = indexedDB.open(\"ONE_SIGNAL_SDK_DB\", 1);\n        request.onsuccess = function (event) {\n          var database = event.target.result;\n          OneSignal._oneSignal_db = database;\n          _loglevel2.default.debug('Succesfully opened IndexedDB.');\n          resolve(database);\n        };\n        request.onerror = function (event) {\n          _loglevel2.default.error('Unable to open IndexedDB.', event);\n          reject(event);\n        };\n\n        request.onupgradeneeded = function (event) {\n          _loglevel2.default.debug('Rebuilding schema in IndexedDB...');\n          var db = event.target.result;\n          db.createObjectStore(\"Ids\", { keyPath: \"type\" });\n          db.createObjectStore(\"NotificationOpened\", { keyPath: \"url\" });\n          db.createObjectStore(\"Options\", { keyPath: \"key\" });\n        };\n      }\n    });\n  },\n\n  _getDbValue: function _getDbValue(table, key) {\n    return new Promise(function (resolve, reject) {\n      OneSignal._ensureDbInstance().then(function (database) {\n        var request = database.transaction(table).objectStore(table).get(key);\n        request.onsuccess = function (event) {\n          if (request.result) OneSignal._triggerEvent_dbValueRetrieved(request.result);\n          resolve(request.result);\n        };\n        request.onerror = function (event) {\n          reject(request.errorCode);\n        };\n      }).catch(function (e) {\n        _loglevel2.default.error(e.stack);\n      });\n      ;\n    });\n  },\n\n  _getDbValues: function _getDbValues(table) {\n    return new Promise(function (resolve, reject) {\n      OneSignal._ensureDbInstance().then(function (database) {\n        var jsonResult = {};\n        var cursor = database.transaction(table).objectStore(table).openCursor();\n        cursor.onsuccess = function (event) {\n          var cursor = event.target.result;\n          if (cursor) {\n            OneSignal._triggerEvent_dbValueRetrieved(cursor);\n            jsonResult[cursor.key] = cursor.value.value;\n            cursor.continue();\n          } else resolve(jsonResult);\n        };\n        cursor.onerror = function (event) {\n          reject(cursor.errorCode);\n        };\n      }).catch(function (e) {\n        _loglevel2.default.error(e.stack);\n      });\n    });\n  },\n\n  _putDbValue: function _putDbValue(table, value) {\n    return new Promise(function (resolve, reject) {\n      OneSignal._ensureDbInstance().then(function (database) {\n        database.transaction([table], \"readwrite\").objectStore(table).put(value);\n        OneSignal._triggerEvent_dbValueSet(value);\n        resolve(value);\n      }).catch(function (e) {\n        _loglevel2.default.error(e.stack);\n      });\n    });\n  },\n\n  _deleteDbValue: function _deleteDbValue(table, key) {\n    return new Promise(function (resolve, reject) {\n      OneSignal._ensureDbInstance().then(function (database) {\n        database.transaction([table], \"readwrite\").objectStore(table).delete(key);\n        resolve(key);\n      }).catch(function (e) {\n        _loglevel2.default.error(e.stack);\n      });\n      ;\n    });\n  },\n\n  _sendToOneSignalApi: function _sendToOneSignalApi(url, action, inData, callback, failedCallback) {\n    var contents = {\n      method: action\n    };\n\n    //mode: 'no-cors', // no-cors is disabled for non-serviceworker.\n    if (inData) {\n      contents.headers = { \"Content-type\": \"application/json;charset=UTF-8\" };\n      contents.body = JSON.stringify(inData);\n    }\n\n    fetch(OneSignal._HOST_URL + url, contents).then(function status(response) {\n      if (response.status >= 200 && response.status < 300) return Promise.resolve(response);else return Promise.reject(new Error(response.statusText));\n    }).then(function status(response) {\n      return response.json();\n    }).then(function (jsonData) {\n      if (callback != null) callback(jsonData);\n    }).catch(function (e) {\n      _loglevel2.default.error('OneSignal._sendToOneSignalApi() failed:', e);\n      if (failedCallback != null) failedCallback();\n    });\n  },\n\n  _getLanguage: function _getLanguage() {\n    return navigator.language ? navigator.language.length > 3 ? navigator.language.substring(0, 2) : navigator.language : 'en';\n  },\n\n  _getPlayerId: function _getPlayerId(value, callback) {\n    if (value) callback(value);else {\n      OneSignal._getDbValue('Ids', 'userId').then(function _getPlayerId_gotUserId(result) {\n        if (result) callback(result.id);else callback(null);\n      }).catch(function (e) {\n        _loglevel2.default.error(e.stack);\n      });\n      ;\n    }\n  },\n\n  _getBrowserName: function _getBrowserName() {\n    if (navigator.appVersion.match(/Chrome\\/(.*?) /)) return \"Chrome\";\n    if (navigator.appVersion.match(\"Version/(.*) (Safari)\")) return \"Safari\";\n    if (navigator.userAgent.match(/Firefox\\/([0-9]{2,}\\.[0-9]{1,})/)) return \"Firefox\";\n\n    return \"\";\n  },\n\n  _registerWithOneSignal: function _registerWithOneSignal(appId, registrationId, deviceType) {\n\n    OneSignal._getDbValue('Ids', 'userId').then(function _registerWithOneSignal_GotUserId(userIdResult) {\n      OneSignal._getNotificationTypes(function (notif_types) {\n        var requestUrl = 'players';\n\n        var jsonData = {\n          app_id: appId,\n          device_type: deviceType,\n          language: OneSignal._getLanguage(),\n          timezone: new Date().getTimezoneOffset() * -60,\n          device_model: navigator.platform + \" \" + OneSignal._getBrowserName(),\n          device_os: (navigator.appVersion.match(/Chrome\\/(.*?) /) || navigator.appVersion.match(\"Version/(.*) Safari\") || navigator.userAgent.match(/Firefox\\/([0-9]{2,}\\.[0-9]{1,})/))[1],\n          sdk: OneSignal._VERSION\n        };\n\n        if (userIdResult) {\n          requestUrl = 'players/' + userIdResult.id + '/on_session';\n          jsonData.notification_types = notif_types;\n        } else if (notif_types != 1) jsonData.notification_types = notif_types;\n\n        if (registrationId) {\n          jsonData.identifier = registrationId;\n          OneSignal._putDbValue(\"Ids\", { type: \"registrationId\", id: registrationId });\n        }\n\n        OneSignal._sendToOneSignalApi(requestUrl, 'POST', jsonData, function registeredCallback(responseJSON) {\n          sessionStorage.setItem(\"ONE_SIGNAL_SESSION\", true);\n\n          if (responseJSON.id) {\n            OneSignal._putDbValue(\"Ids\", { type: \"userId\", id: responseJSON.id });\n            OneSignal._sendUnsentTags();\n          }\n\n          OneSignal._getPlayerId(responseJSON.id, function (userId) {\n            if (OneSignal._idsAvailable_callback.length > 0) {\n              while (OneSignal._idsAvailable_callback.length > 0) {\n                var curr_callback = OneSignal._idsAvailable_callback.pop();\n                curr_callback({ userId: userId, registrationId: registrationId });\n              }\n            }\n\n            if (OneSignal._httpRegistration) {\n              _loglevel2.default.debug(\"Sending player Id and registrationId back to host page\");\n              _loglevel2.default.debug(OneSignal._initOptions);\n              var creator = opener || parent;\n              OneSignal._safePostMessage(creator, {\n                idsAvailable: {\n                  userId: userId,\n                  registrationId: registrationId\n                }\n              }, OneSignal._initOptions.origin, null);\n\n              if (opener) window.close();\n            }\n          });\n        });\n      });\n    }).catch(function (e) {\n      _loglevel2.default.error(e.stack);\n    });\n    ;\n  },\n\n  _sendUnsentTags: function _sendUnsentTags() {\n    if (OneSignal._tagsToSendOnRegister) {\n      OneSignal.sendTags(OneSignal._tagsToSendOnRegister);\n      OneSignal._tagsToSendOnRegister = null;\n    }\n  },\n\n  setDefaultNotificationUrl: function setDefaultNotificationUrl(url) {\n    OneSignal._putDbValue(\"Options\", { key: \"defaultUrl\", value: url });\n  },\n\n  setDefaultIcon: function setDefaultIcon(icon) {\n    OneSignal._putDbValue(\"Options\", { key: \"defaultIcon\", value: icon });\n  },\n\n  setDefaultTitle: function setDefaultTitle(title) {\n    OneSignal._putDbValue(\"Options\", { key: \"defaultTitle\", value: title });\n  },\n\n  _visibilitychange: function _visibilitychange() {\n    if (document.visibilityState == \"visible\") {\n      document.removeEventListener(\"visibilitychange\", OneSignal._visibilitychange);\n      OneSignal._sessionInit({});\n    }\n  },\n\n  onNativePromptChanged: function onNativePromptChanged(event) {\n    _loglevel2.default.debug('Event onesignal.prompt.native.permissionchanged:', event.detail);\n    OneSignal._checkTrigger_eventSubscriptionChanged();\n  },\n\n  _onSubscriptionChanged: function _onSubscriptionChanged(event) {\n    _loglevel2.default.debug('Event onesignal.subscription.changed:', event.detail);\n    if (OneSignal._isNewVisitor && event.detail === true) {\n      _loglevel2.default.debug('Because this user is a new site visitor, a welcome notification will be sent.');\n      OneSignal._getDbValue('Ids', 'userId').then(function (result) {\n        (0, _api.sendNotification)(OneSignal._app_id, [result.id], { 'en': 'Thanks for subscribing!' }, { 'en': \"You'll get new content updates!\" });\n      }).catch(function (e) {\n        _loglevel2.default.error(e);\n      });\n    }\n  },\n\n  _onDbValueRetrieved: function _onDbValueRetrieved(event) {\n    _loglevel2.default.debug('Event onesignal.db.retrieved:', event.detail);\n  },\n\n  _onDbValueSet: function _onDbValueSet(event) {\n    _loglevel2.default.debug('Event onesignal.db.valueset:', event.detail);\n    var info = event.detail;\n    if (info.type === 'userId') {\n      _limitStore2.default.put('db.ids.userId', info.id);\n      OneSignal._checkTrigger_eventSubscriptionChanged();\n    }\n  },\n\n  _onInternalSubscriptionSet: function _onInternalSubscriptionSet(event) {\n    _loglevel2.default.debug('Event onesignal.internal.subscriptionset:', event.detail);\n    var newSubscriptionValue = event.detail;\n    _limitStore2.default.put('subscription.value', newSubscriptionValue);\n    OneSignal._checkTrigger_eventSubscriptionChanged();\n  },\n\n  _checkTrigger_eventSubscriptionChanged: function _checkTrigger_eventSubscriptionChanged() {\n    var permissions = _limitStore2.default.get('notification.permission');\n    var lastPermission = permissions[permissions.length - 2];\n    var currentPermission = permissions[permissions.length - 1];\n\n    var ids = _limitStore2.default.get('db.ids.userId');\n    var lastId = ids[ids.length - 2];\n    var currentId = ids[ids.length - 1];\n\n    var subscriptionStates = _limitStore2.default.get('subscription.value');\n    var lastSubscriptionState = subscriptionStates[subscriptionStates.length - 2];\n    var currentSubscriptionState = subscriptionStates[subscriptionStates.length - 1];\n\n    var newSubscriptionState = 'unchanged';\n\n    if ((lastPermission === 'default' || lastPermission === 'denied' || lastPermission === null) && currentPermission === 'granted' && currentId !== null && currentSubscriptionState === true || lastSubscriptionState === false && currentSubscriptionState === true && currentId != null && currentPermission === 'granted') {\n      newSubscriptionState = true;\n    }\n\n    if (lastPermission !== 'denied' && currentPermission === 'denied' || lastPermission === 'granted' && currentPermission !== 'granted' || lastId !== null && currentId === null || lastSubscriptionState !== false && currentSubscriptionState === false) {\n      newSubscriptionState = false;\n    }\n\n    if (newSubscriptionState !== \"unchanged\") {\n      var lastTriggerTimes = _limitStore2.default.put('event.subscriptionchanged.lastriggered', Date.now());\n      var currentTime = lastTriggerTimes[lastTriggerTimes.length - 1];\n      var lastTriggerTime = lastTriggerTimes[lastTriggerTimes.length - 2];\n      var elapsedTimeSeconds = (currentTime - lastTriggerTime) / 1000;\n\n      var lastEventStates = _limitStore2.default.put('event.subscriptionchanged.laststates', newSubscriptionState);\n      var currentState = lastEventStates[lastEventStates.length - 1];\n      var lastState = lastEventStates[lastEventStates.length - 2];\n\n      // If event already triggered within the last second, don't re-trigger.\n      var shouldNotTriggerEvent = lastTriggerTime != null && elapsedTimeSeconds <= 1 || currentState === lastState;\n      if (shouldNotTriggerEvent === false) {\n        OneSignal._triggerEvent_subscriptionChanged(newSubscriptionState);\n      }\n    }\n  },\n\n  init: function init(options) {\n    OneSignal._initOptions = options;\n\n    if (OneSignal.LOGGING) _loglevel2.default.enableAll();else _loglevel2.default.disableAll();\n\n    _loglevel2.default.info('OneSignal Web SDK loaded (version ' + OneSignal._VERSION + ').');\n    if (!OneSignal.isPushNotificationsSupported()) {\n      _loglevel2.default.warn(\"Your browser does not support push notifications.\");\n      return;\n    }\n\n    if (navigator.permissions && !(OneSignal._isBrowserFirefox() && OneSignal._getFirefoxVersion() <= 45)) {\n      _loglevel2.default.info(\"Using browser's native PermissionStatus.onChange() to hook permission change event.\");\n      OneSignal._usingNativePermissionHook = true;\n      var currentNotificationPermission = OneSignal._getNotificationPermission();\n      _limitStore2.default.put('notification.permission', currentNotificationPermission);\n      // If the browser natively supports hooking the subscription prompt permission change event\n      //     use it instead of our SDK method\n      navigator.permissions.query({ name: 'notifications' }).then(function (permissionStatus) {\n        permissionStatus.onchange = function () {\n          var recentPermissions = _limitStore2.default.put('notification.permission', this.state);\n          var permissionBeforePrompt = recentPermissions[0];\n          var permissionsAfterPrompt = recentPermissions[1];\n          OneSignal._triggerEvent_nativePromptPermissionChanged(permissionBeforePrompt, permissionsAfterPrompt);\n        };\n      }).catch(function (e) {\n        _loglevel2.default.error(e.stack);\n      });\n    } else {\n      var currentNotificationPermission = OneSignal._getNotificationPermission();\n      _limitStore2.default.put('notification.permission', currentNotificationPermission);\n    }\n\n    // Store the current value of Ids:registrationId, so that we can see if the value changes in the future\n    OneSignal._getDbValue('Ids', 'userId').then(function (result) {\n      if (result === undefined) {\n        OneSignal._isNewVisitor = true;\n      }\n      var storeValue = result ? result.id : null;\n      _limitStore2.default.put('db.ids.userId', storeValue);\n    });\n\n    // Store the current value of subscription, so that we can see if the value changes in the future\n    OneSignal._getSubscription(function (currentSubscription) {\n      _limitStore2.default.put('subscription.value', currentSubscription);\n    });\n\n    window.addEventListener('onesignal.prompt.native.permissionchanged', OneSignal.onNativePromptChanged);\n    window.addEventListener('onesignal.subscription.changed', OneSignal._onSubscriptionChanged);\n    window.addEventListener('onesignal.db.valueretrieved', OneSignal._onDbValueRetrieved);\n    window.addEventListener('onesignal.db.valueset', OneSignal._onDbValueSet);\n    window.addEventListener('onesignal.db.valueset', OneSignal._onDbValueSet);\n    window.addEventListener('onesignal.internal.subscriptionset', OneSignal._onInternalSubscriptionSet);\n\n    OneSignal._useHttpMode = !OneSignal._isSupportedSafari() && (!OneSignal._supportsDirectPermission() || OneSignal._initOptions.subdomainName);\n\n    if (OneSignal._useHttpMode) OneSignal._initOneSignalHttp = 'https://' + OneSignal._initOptions.subdomainName + '.onesignal.com/sdks/initOneSignalHttp';else OneSignal._initOneSignalHttp = 'https://onesignal.com/sdks/initOneSignalHttps';\n\n    if (true) OneSignal._initOneSignalHttp = _vars.DEV_HOST + '/dev_sdks/initOneSignalHttp';\n\n    // If Safari - add 'fetch' pollyfill if it isn't already added.\n    if (OneSignal._isSupportedSafari() && typeof window.fetch == \"undefined\") {\n      var s = document.createElement('script');\n      s.setAttribute('src', \"https://cdnjs.cloudflare.com/ajax/libs/fetch/0.9.0/fetch.js\");\n      document.head.appendChild(s);\n    }\n\n    if (document.readyState === \"complete\") OneSignal._internalInit();else window.addEventListener('load', OneSignal._internalInit);\n  },\n\n  _internalInit: function _internalInit() {\n    Promise.all([OneSignal._getDbValue('Ids', 'appId'), OneSignal._getDbValue('Ids', 'registrationId'), OneSignal._getDbValue('Options', 'subscription')]).then(function _internalInit_GotAppRegistrationSubscriptionIds(result) {\n      var appIdResult = result[0];\n      var registrationIdResult = result[1];\n      var subscriptionResult = result[2];\n\n      // If AppId changed delete playerId and continue.\n      if (appIdResult && appIdResult.id != OneSignal._initOptions.appId) {\n        OneSignal._deleteDbValue(\"Ids\", \"userId\");\n        sessionStorage.removeItem(\"ONE_SIGNAL_SESSION\");\n      }\n\n      // HTTPS - Only register for push notifications once per session or if the user changes notification permission to Ask or Allow.\n      if (sessionStorage.getItem(\"ONE_SIGNAL_SESSION\") && !OneSignal._initOptions.subdomainName && (Notification.permission == \"denied\" || sessionStorage.getItem(\"ONE_SIGNAL_NOTIFICATION_PERMISSION\") == Notification.permission)) return;\n\n      sessionStorage.setItem(\"ONE_SIGNAL_NOTIFICATION_PERMISSION\", Notification.permission);\n\n      if (OneSignal._initOptions.autoRegister == false && !registrationIdResult && OneSignal._initOptions.subdomainName == null) return;\n\n      if (document.visibilityState != \"visible\") {\n        document.addEventListener(\"visibilitychange\", OneSignal._visibilitychange);\n        return;\n      }\n\n      OneSignal._sessionInit({});\n    }).catch(function (e) {\n      _loglevel2.default.error(e.stack);\n    });\n  },\n\n  registerForPushNotifications: function registerForPushNotifications(options) {\n    if (!OneSignal.isPushNotificationsSupported()) {\n      _loglevel2.default.warn(\"Your browser does not support push notifications.\");\n      return;\n    }\n    // WARNING: Do NOT add callbacks that have to fire to get from here to window.open in _sessionInit.\n    //          Otherwise the pop-up to ask for push permission on HTTP connections will be blocked by Chrome.\n    if (!options) options = {};\n    options.fromRegisterFor = true;\n    OneSignal._sessionInit(options);\n  },\n\n  // Http only - Only called from iframe's init.js\n  _initHttp: function _initHttp(options) {\n    OneSignal._initOptions = options;\n\n    if (options.continuePressed) {\n      OneSignal.setSubscription(true);\n    }\n\n    var isIframe = parent != null && parent != window;\n    var creator = opener || parent;\n\n    if (!creator) {\n      _loglevel2.default.debug(\"ERROR:_initHttp: No opener or parent found!\");\n      return;\n    }\n    // Setting up message channel to receive message from host page.\n    var messageChannel = new MessageChannel();\n    messageChannel.port1.onmessage = function (event) {\n      _loglevel2.default.debug(\"_initHttp.messageChannel.port1.onmessage\", event);\n\n      if (event.data.initOptions) {\n        OneSignal.setDefaultNotificationUrl(event.data.initOptions.defaultUrl);\n        OneSignal.setDefaultTitle(event.data.initOptions.defaultTitle);\n        if (event.data.initOptions.defaultIcon) OneSignal.setDefaultIcon(event.data.initOptions.defaultIcon);\n\n        _loglevel2.default.debug(\"document.URL\", event.data.initOptions.parent_url);\n        OneSignal._getDbValue(\"NotificationOpened\", event.data.initOptions.parent_url).then(function registerForPushNotifications_GotNotificationOpened(notificationOpenedResult) {\n          _loglevel2.default.debug(\"_initHttp NotificationOpened db\", notificationOpenedResult);\n          if (notificationOpenedResult) {\n            OneSignal._deleteDbValue(\"NotificationOpened\", event.data.initOptions.parent_url);\n            _loglevel2.default.debug(\"OneSignal._safePostMessage:targetOrigin:\", OneSignal._initOptions.origin);\n\n            OneSignal._safePostMessage(creator, { openedNotification: notificationOpenedResult.data }, OneSignal._initOptions.origin, null);\n          }\n        }).catch(function (e) {\n          _loglevel2.default.error(e.stack);\n        });\n        ;\n      } else if (event.data.getNotificationPermission) {\n        OneSignal._getSubdomainState(function (curState) {\n          OneSignal._safePostMessage(creator, { currentNotificationPermission: curState }, OneSignal._initOptions.origin, null);\n        });\n      } else if (event.data.setSubdomainState) OneSignal.setSubscription(event.data.setSubdomainState.setSubscription);\n    };\n\n    OneSignal._getSubdomainState(function (curState) {\n      curState[\"isIframe\"] = isIframe;\n      OneSignal._safePostMessage(creator, { oneSignalInitPageReady: curState }, OneSignal._initOptions.origin, [messageChannel.port2]);\n    });\n\n    OneSignal._initSaveState();\n    OneSignal._httpRegistration = true;\n    if (location.search.indexOf(\"?session=true\") == 0) return;\n\n    OneSignal._getPlayerId(null, function (player_id) {\n      if (!isIframe || player_id) {\n        _loglevel2.default.debug(\"Before navigator.serviceWorker.register\");\n        navigator.serviceWorker.register(OneSignal.SERVICE_WORKER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n        _loglevel2.default.debug(\"After navigator.serviceWorker.register\");\n      }\n    });\n  },\n\n  _getSubdomainState: function _getSubdomainState(callback) {\n    var state = {};\n\n    Promise.all([OneSignal._getDbValue('Ids', 'userId'), OneSignal._getDbValue('Ids', 'registrationId'), OneSignal._getDbValue('Options', 'subscription')]).then(function _internalInit_GotAppRegistrationSubscriptionIds(result) {\n      var userIdResult = result[0];\n      var registrationIdResult = result[1];\n      var subscriptionResult = result[2];\n\n      callback({\n        userId: userIdResult ? userIdResult.id : null,\n        registrationId: registrationIdResult ? registrationIdResult.id : null,\n        notifPermssion: Notification.permission,\n        subscriptionSet: subscriptionResult ? subscriptionResult.value : null,\n        isPushEnabled: Notification.permission == \"granted\" && userIdResult && registrationIdResult && (subscriptionResult && subscriptionResult.value || subscriptionResult == null)\n      });\n    }).catch(function (e) {\n      _loglevel2.default.error(e.stack);\n    });\n    ;\n  },\n\n  _initSaveState: function _initSaveState() {\n    OneSignal._app_id = OneSignal._initOptions.appId;\n    OneSignal._putDbValue(\"Ids\", { type: \"appId\", id: OneSignal._app_id });\n    OneSignal._putDbValue(\"Options\", { key: \"pageTitle\", value: document.title });\n  },\n\n  _supportsDirectPermission: function _supportsDirectPermission() {\n    return OneSignal._isSupportedSafari() || location.protocol == 'https:' || location.host.indexOf(\"localhost\") == 0 || location.host.indexOf(\"127.0.0.1\") == 0;\n  },\n\n  _sessionInit: function _sessionInit(options) {\n    _loglevel2.default.debug(\"Called OneSignal._sessionInit():\", options);\n    OneSignal._initSaveState();\n\n    var hostPageProtocol = location.origin.match(/^http(s|):\\/\\/(www\\.|)/)[0];\n\n    // If HTTP or using subdomain mode\n    if (OneSignal._useHttpMode) {\n      if (options.fromRegisterFor) {\n        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;\n        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;\n\n        var thisWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;\n        var thisHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;\n        var childWidth = OneSignal._windowWidth;\n        var childHeight = OneSignal._windowHeight;\n\n        var left = thisWidth / 2 - childWidth / 2 + dualScreenLeft;\n        var top = thisHeight / 2 - childHeight / 2 + dualScreenTop;\n\n        _loglevel2.default.debug('Opening popup window.');\n        var message_localization_opts = OneSignal._initOptions['promptOptions'];\n        var message_localization_opts_str = '';\n        if (message_localization_opts) {\n          var message_localization_params = ['actionMessage', 'exampleNotificationTitleDesktop', 'exampleNotificationMessageDesktop', 'exampleNotificationTitleMobile', 'exampleNotificationMessageMobile', 'exampleNotificationCaption', 'acceptButtonText', 'cancelButtonText'];\n          for (var i = 0; i < message_localization_params.length; i++) {\n            var key = message_localization_params[i];\n            var value = message_localization_opts[key];\n            var encoded_value = encodeURIComponent(value);\n            if (value || value === '') {\n              message_localization_opts_str += '&' + key + '=' + encoded_value;\n            }\n          }\n        }\n        var childWindow = window.open(OneSignal._initOneSignalHttp + \"?\" + message_localization_opts_str + \"&hostPageProtocol=\" + hostPageProtocol, \"_blank\", 'scrollbars=yes, width=' + childWidth + ', height=' + childHeight + ', top=' + top + ', left=' + left);\n\n        if (childWindow) childWindow.focus();\n      } else {\n        _loglevel2.default.debug('Opening iFrame.');\n        OneSignal._addSessionIframe(hostPageProtocol);\n      }\n\n      return;\n    }\n\n    if (OneSignal._isSupportedSafari()) {\n      if (OneSignal._initOptions.safari_web_id) {\n        var notificationPermissionBeforeRequest = OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);\n        window.safari.pushNotification.requestPermission(OneSignal._HOST_URL + 'safari', OneSignal._initOptions.safari_web_id, { app_id: OneSignal._app_id }, function (data) {\n          _loglevel2.default.debug(data);\n          var notificationPermissionAfterRequest = OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);\n          if (data.deviceToken) {\n            OneSignal._registerWithOneSignal(OneSignal._app_id, data.deviceToken.toLowerCase(), 7);\n          } else {\n            sessionStorage.setItem(\"ONE_SIGNAL_SESSION\", true);\n          }\n          OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest);\n        });\n      }\n    } else if (options.modalPrompt && options.fromRegisterFor) {\n      // If HTTPS - Show modal\n      if (!OneSignal.isPushNotificationsSupported()) {\n        _loglevel2.default.warn('An attempt was made to open the HTTPS modal permission prompt, but push notifications are not supported on this browser. Opening canceled.');\n        return;\n      }\n      OneSignal.isPushNotificationsEnabled(function (pushEnabled) {\n        var element = document.createElement('div');\n        element.setAttribute('id', 'OneSignal-iframe-modal');\n        element.innerHTML = '<div id=\"notif-permission\" style=\"background: rgba(0, 0, 0, 0.7); position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 9000; display: block\"></div>';\n        document.body.appendChild(element);\n\n        var iframeStyle = document.createElement('style');\n        iframeStyle.innerHTML = \"@media (max-width: 560px) { .OneSignal-permission-iframe { width: 100%; height: 100%;} }\" + \"@media (min-width: 561px) { .OneSignal-permission-iframe { top: 50%; left: 50%; margin-left: -275px; margin-top: -248px;} }\";\n        document.getElementsByTagName('head')[0].appendChild(iframeStyle);\n\n        var iframeNode = document.createElement(\"iframe\");\n        iframeNode.className = \"OneSignal-permission-iframe\";\n        iframeNode.style.cssText = \"background: rgba(255, 255, 255, 1); position: fixed;\";\n        iframeNode.src = OneSignal._initOneSignalHttp + '?id=' + OneSignal._app_id + '&httpsPrompt=true' + '&pushEnabled=' + pushEnabled + '&permissionBlocked=' + (typeof Notification === \"undefined\" || Notification.permission == \"denied\") + '&hostPageProtocol=' + hostPageProtocol;\n        iframeNode.setAttribute('frameborder', '0');\n        iframeNode.width = OneSignal._windowWidth.toString();\n        iframeNode.height = OneSignal._windowHeight.toString();\n\n        _loglevel2.default.debug('Opening HTTPS modal prompt.');\n        document.getElementById(\"notif-permission\").appendChild(iframeNode);\n      });\n    } else if ('serviceWorker' in navigator) // If HTTPS - Show native prompt\n      OneSignal._registerForW3CPush(options);else _loglevel2.default.debug('Service workers are not supported in this browser.');\n\n    OneSignal._triggerEvent('onesignal.sdk.initialized', null);\n  },\n\n  _registerForW3CPush: function _registerForW3CPush(options) {\n\n    OneSignal._getDbValue('Ids', 'registrationId').then(function _registerForW3CPush_GotRegistrationId(registrationIdResult) {\n      if (!registrationIdResult || !options.fromRegisterFor || Notification.permission != \"granted\") {\n        navigator.serviceWorker.getRegistration().then(function (event) {\n          var sw_path = \"\";\n\n          if (OneSignal._initOptions.path) sw_path = OneSignal._initOptions.path;\n\n          if (typeof event === \"undefined\") // Nothing registered, very first run\n            navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);else {\n            if (event.active) {\n              if (event.active.scriptURL.indexOf(sw_path + OneSignal.SERVICE_WORKER_PATH) > -1) {\n\n                OneSignal._getDbValue('Ids', 'WORKER1_ONE_SIGNAL_SW_VERSION').then(function (versionResult) {\n                  if (versionResult) {\n                    if (versionResult.id != OneSignal._VERSION) {\n                      event.unregister().then(function () {\n                        navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_UPDATER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n                      }).catch(function (e) {\n                        _loglevel2.default.error(e);\n                      });\n                      ;\n                    } else navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n                  } else navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n                }).catch(function (e) {\n                  _loglevel2.default.error(e);\n                });\n                ;\n              } else if (event.active.scriptURL.indexOf(sw_path + OneSignal.SERVICE_WORKER_UPDATER_PATH) > -1) {\n\n                OneSignal._getDbValue('Ids', 'WORKER1_ONE_SIGNAL_SW_VERSION').then(function (versionResult) {\n                  if (versionResult) {\n                    if (versionResult.id != OneSignal._VERSION) {\n                      event.unregister().then(function () {\n                        navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n                      });\n                    } else navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_UPDATER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n                  } else navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_UPDATER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n                }).catch(function (e) {\n                  _loglevel2.default.error(e);\n                });\n                ;\n              }\n            } else if (event.installing == null) navigator.serviceWorker.register(sw_path + OneSignal.SERVICE_WORKER_PATH, OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications, OneSignal._registerError);\n          }\n        }).catch(function (e) {\n          _loglevel2.default.error(e);\n        });\n      }\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n    ;\n  },\n\n  _addSessionIframe: function _addSessionIframe(hostPageProtocol) {\n\n    var node = document.createElement(\"iframe\");\n    node.style.display = \"none\";\n    node.src = OneSignal._initOneSignalHttp + \"Iframe\";\n    if (sessionStorage.getItem(\"ONE_SIGNAL_SESSION\")) node.src += \"?session=true\" + \"&hostPageProtocol=\" + hostPageProtocol;else node.src += \"?hostPageProtocol=\" + hostPageProtocol;\n    document.body.appendChild(node);\n    _loglevel2.default.debug('Adding session iFrame.');\n\n    OneSignal._sessionIframeAdded = true;\n  },\n\n  _registerError: function _registerError(err) {\n    _loglevel2.default.debug(\"navigator.serviceWorker.register:ERROR: \" + err);\n  },\n\n  _enableNotifications: function _enableNotifications(existingServiceWorkerRegistration) {\n    // is ServiceWorkerRegistration type\n    if (!('PushManager' in window)) {\n      _loglevel2.default.debug(\"Push messaging is not supported. No PushManager.\");\n      sessionStorage.setItem(\"ONE_SIGNAL_SESSION\", true);\n      return;\n    }\n\n    if (!('showNotification' in ServiceWorkerRegistration.prototype)) {\n      _loglevel2.default.debug(\"Notifications are not supported. showNotification not available in ServiceWorkerRegistration.\");\n      sessionStorage.setItem(\"ONE_SIGNAL_SESSION\", true);\n      return;\n    }\n\n    if (Notification.permission === 'denied') {\n      _loglevel2.default.warn(\"The user has disabled notifications.\");\n      return;\n    }\n\n    navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {\n      _loglevel2.default.info('Service worker active:', serviceWorkerRegistration);\n\n      OneSignal._subscribeForPush(serviceWorkerRegistration);\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n    ;\n  },\n\n  /*\n   Returns the current browser-agnostic notification permission as \"default\", \"granted\", \"denied\".\n   safariWebId: Used only to get the current notification permission state in Safari (required as part of the spec).\n   */\n  _getNotificationPermission: function _getNotificationPermission(safariWebId) {\n    if (window.safari) {\n      // The user is on Safari\n      // A web ID is required to determine the current notificiation permission\n      if (safariWebId) {\n        return window.safari.pushNotification.permission(safariWebId).permission;\n      } else {\n        // The user didn't set up Safari web push properly; notifications are unlikely to be enabled\n        return \"default\";\n      }\n    } else {\n      // Identical API on Firefox and Chrome\n      return Notification.permission;\n    }\n  },\n\n  _triggerEvent: function _triggerEvent(eventName, data) {\n    if (typeof window === \"undefined\") {\n      _loglevel2.default.debug('Skipping triggering of event:', eventName, 'because we are running in a ServiceWorker context.');\n      return;\n    }\n    var event = new CustomEvent(eventName, {\n      bubbles: true, cancelable: true, details: data\n    });\n    window.dispatchEvent(event);\n  },\n\n  _triggerEvent_customPromptClicked: function _triggerEvent_customPromptClicked(clickResult) {\n    OneSignal._triggerEvent('onesignal.prompt.custom.clicked', {\n      result: clickResult\n    });\n  },\n\n  _triggerEvent_nativePromptPermissionChanged: function _triggerEvent_nativePromptPermissionChanged(from, to) {\n    if (to === undefined) {\n      to = OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);\n    }\n    if (from !== to) {\n      OneSignal._triggerEvent('onesignal.prompt.native.permissionchanged', {\n        from: from,\n        to: to\n      });\n    }\n  },\n\n  _triggerEvent_subscriptionChanged: function _triggerEvent_subscriptionChanged(to) {\n    OneSignal._triggerEvent('onesignal.subscription.changed', to);\n  },\n\n  _triggerEvent_dbValueRetrieved: function _triggerEvent_dbValueRetrieved(value) {\n    OneSignal._triggerEvent('onesignal.db.valueretrieved', value);\n  },\n\n  _triggerEvent_dbValueSet: function _triggerEvent_dbValueSet(value) {\n    OneSignal._triggerEvent('onesignal.db.valueset', value);\n  },\n\n  _triggerEvent_internalSubscriptionSet: function _triggerEvent_internalSubscriptionSet(value) {\n    OneSignal._triggerEvent('onesignal.internal.subscriptionset', value);\n  },\n\n  _subscribeForPush: function _subscribeForPush(serviceWorkerRegistration) {\n    var notificationPermissionBeforeRequest = OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);\n    serviceWorkerRegistration.pushManager.subscribe({ userVisibleOnly: true }).then(function (subscription) {\n      sessionStorage.setItem(\"ONE_SIGNAL_NOTIFICATION_PERMISSION\", Notification.permission);\n\n      OneSignal._getDbValue('Ids', 'appId').then(function _subscribeForPush_GotAppId(appIdResult) {\n        var appId = appIdResult.id;\n        _loglevel2.default.debug(\"Called OneSignal._subscribeForPush() -> serviceWorkerRegistration.pushManager.subscribe().\");\n\n        var registrationId = null;\n        if (subscription) {\n          if (typeof subscription.subscriptionId != \"undefined\") // Chrome 43 & 42\n            registrationId = subscription.subscriptionId;else // Chrome 44+ and FireFox\n            registrationId = subscription.endpoint.replace(new RegExp(\"^(https://android.googleapis.com/gcm/send/|https://updates.push.services.mozilla.com/push/)\"), \"\");\n        } else _loglevel2.default.warn('Could not subscribe your browser for push notifications.');\n\n        OneSignal._registerWithOneSignal(appId, registrationId, OneSignal._isSupportedFireFox() ? 8 : 5);\n\n        if (!OneSignal._usingNativePermissionHook) OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest);\n      }).catch(function (e) {\n        _loglevel2.default.error(e);\n      });\n    }).catch(function (e) {\n      _loglevel2.default.error('Error while subscribing for push:', e);\n\n      if (!OneSignal._usingNativePermissionHook) OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest);\n\n      if (e.code == 20 && opener && OneSignal._httpRegistration) window.close();\n    });\n  },\n\n  sendTag: function sendTag(key, value) {\n    var jsonKeyValue = {};\n    jsonKeyValue[key] = value;\n    OneSignal.sendTags(jsonKeyValue);\n  },\n\n  sendTags: function sendTags(jsonPair) {\n    OneSignal._getDbValue('Ids', 'userId').then(function sendTags_GotUserId(userIdResult) {\n      if (userIdResult) OneSignal._sendToOneSignalApi(\"players/\" + userIdResult.id, \"PUT\", {\n        app_id: OneSignal._app_id,\n        tags: jsonPair\n      });else {\n        if (OneSignal._tagsToSendOnRegister == null) OneSignal._tagsToSendOnRegister = jsonPair;else {\n          var resultObj = {};\n          for (var _obj in OneSignal._tagsToSendOnRegister) {\n            resultObj[_obj] = OneSignal._tagsToSendOnRegister[_obj];\n          }for (var _obj in jsonPair) {\n            resultObj[_obj] = jsonPair[_obj];\n          }OneSignal._tagsToSendOnRegister = resultObj;\n        }\n      }\n    }).catch(function (e) {\n      _loglevel2.default.error('sendTags:', e);\n    });\n  },\n\n  deleteTag: function deleteTag(key) {\n    OneSignal.deleteTags([key]);\n  },\n\n  deleteTags: function deleteTags(keyArray) {\n    var jsonPair = {};\n    var length = keyArray.length;\n    for (var i = 0; i < length; i++) {\n      jsonPair[keyArray[i]] = \"\";\n    }OneSignal.sendTags(jsonPair);\n  },\n\n  _handleNotificationOpened: function _handleNotificationOpened(event) {\n    var notificationData = JSON.parse(event.notification.tag);\n    event.notification.close();\n\n    Promise.all([OneSignal._getDbValue('Ids', 'appId'), OneSignal._getDbValue('Ids', 'userId')]).then(function _handleNotificationOpened_GotAppUserIds(results) {\n      var appIdResult = results[0];\n      var userIdResult = results[1];\n      if (appIdResult && userIdResult) {\n        OneSignal._sendToOneSignalApi(\"notifications/\" + notificationData.id, \"PUT\", {\n          app_id: appIdResult.id,\n          player_id: userIdResult.id,\n          opened: true\n        });\n      }\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n    ;\n\n    event.waitUntil(clients.matchAll({ type: \"window\" }).then(function (clientList) {\n      var launchURL = registration.scope;\n      if (OneSignal._defaultLaunchURL) launchURL = OneSignal._defaultLaunchURL;\n      if (notificationData.launchURL) launchURL = notificationData.launchURL;\n\n      for (var i = 0; i < clientList.length; i++) {\n        var client = clientList[i];\n        if ('focus' in client && client.url == launchURL) {\n          client.focus();\n\n          // targetOrigin not valid here as the service worker owns the page.\n          client.postMessage(notificationData);\n          return;\n        }\n      }\n\n      if (launchURL !== 'javascript:void(0);' && launchURL !== 'do_not_open') {\n        OneSignal._putDbValue(\"NotificationOpened\", { url: launchURL, data: notificationData });\n        clients.openWindow(launchURL).catch(function (error) {\n          // Should only fall into here if going to an external URL on Chrome older than 43.\n          clients.openWindow(registration.scope + \"redirector.html?url=\" + launchURL);\n        });\n      }\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    }));\n  },\n\n  _getTitle: function _getTitle(incomingTitle, callback) {\n    if (incomingTitle != null) {\n      callback(incomingTitle);\n      return;\n    }\n\n    Promise.all([OneSignal._getDbValue('Options', 'defaultTitle'), OneSignal._getDbValue('Options', 'pageTitle')]).then(function _getTitle_GotDefaultPageTitles(results) {\n      var defaultTitleResult = results[0];\n      var pageTitleResult = results[1];\n\n      if (defaultTitleResult) {\n        callback(defaultTitleResult.value);\n        return;\n      } else if (pageTitleResult && pageTitleResult.value != null) {\n        callback(pageTitleResult.value);\n        return;\n      } else {\n        callback('');\n      }\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n  },\n\n  // Displays notification from content received from OneSignal.\n  // This method is only called by ServiceWorker\n  _handleGCMMessage: function _handleGCMMessage(serviceWorker, event) {\n    // TODO: Read data from the GCM payload when Chrome no longer requires the below command line parameter.\n    // --enable-push-message-payload\n    // The command line param is required even on Chrome 43 nightly build 2015/03/17.\n    if (event.data && event.data.text()[0] == \"{\") {\n      _loglevel2.default.debug('Received data.text: ', event.data.text());\n      _loglevel2.default.debug('Received data.json: ', event.data.json());\n    }\n\n    event.waitUntil(new Promise(function (resolve, reject) {\n      OneSignal._getTitle(null, function (title) {\n        OneSignal._getDbValue('Options', 'defaultIcon').then(function _handleGCMMessage_GotDefaultIcon(defaultIconResult) {\n          OneSignal._getLastNotifications(function (response, appId) {\n            var notificationData = {\n              id: response.custom.i,\n              message: response.alert,\n              additionalData: response.custom.a\n            };\n\n            if (response.title) notificationData.title = response.title;else notificationData.title = title;\n\n            if (response.custom.u) notificationData.launchURL = response.custom.u;\n\n            if (response.icon) notificationData.icon = response.icon;else if (defaultIconResult) notificationData.icon = defaultIconResult.value;\n\n            // Never nest the following line in a callback from the point of entering from _getLastNotifications\n            serviceWorker.registration.showNotification(notificationData.title, {\n              body: response.alert,\n              icon: notificationData.icon,\n              tag: JSON.stringify(notificationData)\n            }).then(resolve).catch(function (e) {\n              _loglevel2.default.error(e);\n            });\n\n            OneSignal._getDbValue('Options', 'defaultUrl').then(function (defaultUrlResult) {\n              if (defaultUrlResult) OneSignal._defaultLaunchURL = defaultUrlResult.value;\n            }).catch(function (e) {\n              _loglevel2.default.error(e);\n            });\n            ;\n          }, resolve);\n        }).catch(function (e) {\n          _loglevel2.default.error(e);\n        });\n      });\n    }));\n  },\n\n  _getLastNotifications: function _getLastNotifications(itemCallback, completeCallback) {\n    OneSignal._getDbValue('Ids', 'userId').then(function _getLastNotifications_GotUserId(userIdResult) {\n      if (userIdResult) {\n        OneSignal._sendToOneSignalApi(\"players/\" + userIdResult.id + \"/chromeweb_notification\", \"GET\", null, function (response) {\n          for (var i = 0; i < response.length; i++) {\n            itemCallback(JSON.parse(response[i]));\n          }\n        }, function () {\n          completeCallback();\n        }); // Failed callback\n      } else {\n          _loglevel2.default.debug(\"Error: could not get notificationId\");\n          completeCallback();\n        }\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n    ;\n  },\n\n  // HTTP & HTTPS - Runs on main page\n  _listener_receiveMessage: function receiveMessage(event) {\n    _loglevel2.default.debug(\"_listener_receiveMessage: \", event);\n\n    if (OneSignal._initOptions == undefined) return;\n\n    if (false) return;\n\n    if (event.data.oneSignalInitPageReady) {\n      // Only called on HTTP pages.\n      OneSignal._getDbValues(\"Options\").then(function _listener_receiveMessage(options) {\n        _loglevel2.default.debug(\"current options\", options);\n        if (!options.defaultUrl) options.defaultUrl = document.URL;\n        if (!options.defaultTitle) options.defaultTitle = document.title;\n\n        options.parent_url = document.URL;\n        _loglevel2.default.debug(\"Posting message to port[0]\", event.ports[0]);\n        event.ports[0].postMessage({ initOptions: options });\n      }).catch(function (e) {\n        _loglevel2.default.error('_listener_receiveMessage:', e);\n      });\n\n      var eventData = event.data.oneSignalInitPageReady;\n\n      if (eventData.isIframe) OneSignal._iframePort = event.ports[0];\n\n      if (eventData.userId) OneSignal._putDbValue(\"Ids\", { type: \"userId\", id: eventData.userId });\n      if (eventData.registrationId) OneSignal._putDbValue(\"Ids\", { type: \"registrationId\", id: eventData.registrationId });\n\n      OneSignal._fireNotificationEnabledCallback(eventData.isPushEnabled);\n      OneSignal._sendUnsentTags();\n    } else if (event.data.currentNotificationPermission) // Subdomain Only\n      OneSignal._fireNotificationEnabledCallback(event.data.currentNotificationPermission.isPushEnabled);else if (event.data.idsAvailable) {\n      // Only called on HTTP pages.\n      sessionStorage.setItem(\"ONE_SIGNAL_SESSION\", true);\n      OneSignal._putDbValue(\"Ids\", { type: \"userId\", id: event.data.idsAvailable.userId });\n      OneSignal._putDbValue(\"Ids\", { type: \"registrationId\", id: event.data.idsAvailable.registrationId });\n\n      if (OneSignal._idsAvailable_callback.length > 0) {\n        while (OneSignal._idsAvailable_callback.length > 0) {\n          var curr_callback = OneSignal._idsAvailable_callback.pop();\n          curr_callback({\n            userId: event.data.idsAvailable.userId,\n            registrationId: event.data.idsAvailable.registrationId\n          });\n        }\n      }\n      OneSignal._sendUnsentTags();\n    } else if (event.data.httpsPromptAccepted) {\n      // HTTPS Only\n      OneSignal.registerForPushNotifications();\n      OneSignal.setSubscription(true);\n      (elem = document.getElementById('OneSignal-iframe-modal')).parentNode.removeChild(elem);\n      OneSignal._triggerEvent_customPromptClicked('granted');\n    } else if (event.data.httpsPromptCanceled) {\n      // HTTPS Only\n      (elem = document.getElementById('OneSignal-iframe-modal')).parentNode.removeChild(elem);\n      OneSignal._triggerEvent_customPromptClicked('denied');\n    } else if (event.data.httpPromptAccepted) {\n      // HTTP Only\n      OneSignal._triggerEvent_customPromptClicked('granted');\n    } else if (event.data.httpPromptCanceled) {\n      // HTTP Only\n      OneSignal._triggerEvent_customPromptClicked('denied');\n    } else if (OneSignal._notificationOpened_callback) // HTTP and HTTPS\n      OneSignal._notificationOpened_callback(event.data);\n  },\n\n  addListenerForNotificationOpened: function addListenerForNotificationOpened(callback) {\n    OneSignal._notificationOpened_callback = callback;\n    if (window) {\n      OneSignal._getDbValue(\"NotificationOpened\", document.URL).then(function (notificationOpenedResult) {\n        if (notificationOpenedResult) {\n          OneSignal._deleteDbValue(\"NotificationOpened\", document.URL);\n          OneSignal._notificationOpened_callback(notificationOpenedResult.data);\n        }\n      }).catch(function (e) {\n        _loglevel2.default.error(e);\n      });\n      ;\n    }\n  },\n\n  // Subdomain - Fired from message received from iframe.\n  _fireNotificationEnabledCallback: function _fireNotificationEnabledCallback(notifPermssion) {\n    if (OneSignal._isNotificationEnabledCallback) {\n      OneSignal._isNotificationEnabledCallback(notifPermssion);\n      OneSignal._isNotificationEnabledCallback = null;\n    }\n  },\n\n  getIdsAvailable: function getIdsAvailable(callback) {\n    if (callback === undefined) return;\n\n    OneSignal._idsAvailable_callback.push(callback);\n\n    Promise.all([OneSignal._getDbValue('Ids', 'userId'), OneSignal._getDbValue('Ids', 'registrationId')]).then(function getIdsAvailable_GotUserRegistrationIds(results) {\n      var userIdResult = results[0];\n      var registrationIdResult = results[1];\n\n      if (userIdResult) {\n        if (registrationIdResult) {\n          while (OneSignal._idsAvailable_callback.length > 0) {\n            var curr_callback = OneSignal._idsAvailable_callback.pop();\n            curr_callback({\n              userId: userIdResult.id,\n              registrationId: registrationIdResult.id\n            });\n          }\n        } else while (OneSignal._idsAvailable_callback.length > 0) {\n          var curr_callback = OneSignal._idsAvailable_callback.pop();\n          curr_callback({ userId: userIdResult.id, registrationId: null });\n        }\n      }\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n    ;\n  },\n\n  getTags: function getTags(callback) {\n    OneSignal._getDbValue('Ids', 'userId').then(function (userIdResult) {\n      if (userIdResult) {\n        OneSignal._sendToOneSignalApi(\"players/\" + userIdResult.id, 'GET', null, function (response) {\n          callback(response.tags);\n        });\n      }\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n    ;\n  },\n\n  isPushNotificationsEnabled: function isPushNotificationsEnabled(callback) {\n    if (!OneSignal.isPushNotificationsSupported()) {\n      _loglevel2.default.warn(\"Your browser does not support push notifications.\");\n      return;\n    }\n\n    // If Subdomain\n    if (OneSignal._initOptions.subdomainName && !OneSignal._isBrowserSafari()) {\n      OneSignal._isNotificationEnabledCallback = callback;\n      if (OneSignal._iframePort) OneSignal._iframePort.postMessage({ getNotificationPermission: true });\n      return;\n    }\n\n    // If HTTPS\n\n    Promise.all([OneSignal._getDbValue('Ids', 'registrationId'), OneSignal._getDbValue('Options', 'subscription')]).then(function (results) {\n      var registrationIdResult = results[0];\n      var subscriptionResult = results[1];\n\n      if (registrationIdResult) {\n        if (subscriptionResult && !subscriptionResult.value) return callback(false);\n\n        callback(Notification.permission == \"granted\");\n      } else callback(false);\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n  },\n\n  _isSupportedSafari: function _isSupportedSafari() {\n    var safariVersion = navigator.appVersion.match(\"Version/([0-9]?).* Safari\");\n    if (safariVersion == null) return false;\n    if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) return false;\n    return parseInt(safariVersion[1]) > 6;\n  },\n\n  _isBrowserSafari: function _isBrowserSafari() {\n    var safariVersion = navigator.appVersion.match(\"Version/([0-9]?).* Safari\");\n    return safariVersion != null;\n  },\n\n  _isSupportedFireFox: function _isSupportedFireFox() {\n    var fireFoxVersion = navigator.userAgent.match(/(Firefox\\/)([0-9]{2,}\\.[0-9]{1,})/);\n    if (fireFoxVersion) return parseInt(fireFoxVersion[2].substring(0, 2)) > 43;\n    return false;\n  },\n\n  _isBrowserFirefox: function _isBrowserFirefox() {\n    var fireFoxVersion = navigator.userAgent.match(/(Firefox\\/)([0-9]{2,}\\.[0-9]{1,})/);\n    return fireFoxVersion != null;\n  },\n\n  _getFirefoxVersion: function _getFirefoxVersion() {\n    var fireFoxVersion = navigator.userAgent.match(/(Firefox\\/)([0-9]{2,}\\.[0-9]{1,})/);\n    if (fireFoxVersion) return parseInt(fireFoxVersion[2].substring(0, 2));else return -1;\n  },\n\n  isPushNotificationsSupported: function isPushNotificationsSupported() {\n    var chromeVersion = navigator.appVersion.match(/Chrome\\/(.*?) /);\n\n    if (OneSignal._isSupportedFireFox()) return true;\n\n    if (OneSignal._isSupportedSafari()) return true;\n\n    // Chrome is not found in appVersion.\n    if (!chromeVersion) return false;\n\n    // Microsoft Edge\n    if (navigator.appVersion.match(/Edge/)) return false;\n\n    // Android Chrome WebView\n    if (navigator.appVersion.match(/ wv/)) return false;\n\n    // Opera\n    if (navigator.appVersion.match(/OPR\\//)) return false;\n\n    // The user is on iOS\n    if (/iPad|iPhone|iPod/.test(navigator.platform)) return false;\n\n    return parseInt(chromeVersion[1].substring(0, 2)) > 41;\n  },\n\n  _getNotificationTypes: function _getNotificationTypes(callback) {\n    OneSignal._getSubscription(function (db_subscriptionSet) {\n      callback(db_subscriptionSet ? 1 : -2);\n    });\n  },\n\n  setSubscription: function setSubscription(newSubscription) {\n    if (OneSignal._iframePort) OneSignal._iframePort.postMessage({ setSubdomainState: { setSubscription: newSubscription } });else {\n      OneSignal._getSubscription(function (currentSubscription) {\n        if (currentSubscription != newSubscription) {\n          OneSignal._putDbValue(\"Options\", { key: \"subscription\", value: newSubscription });\n          OneSignal._getDbValue('Ids', 'userId').then(function (userIdResult) {\n            if (userIdResult) OneSignal._sendToOneSignalApi(\"players/\" + userIdResult.id, \"PUT\", {\n              app_id: OneSignal._app_id,\n              notification_types: newSubscription ? 1 : -2\n            }, function setSubscriptionSetCallback() {\n              OneSignal._triggerEvent_internalSubscriptionSet(newSubscription);\n            });\n          }).catch(function (e) {\n            _loglevel2.default.error(e);\n          });\n        }\n      });\n    }\n  },\n\n  _getSubscription: function _getSubscription(callback) {\n    OneSignal._getDbValue('Options', 'subscription').then(function (subscriptionResult) {\n      callback(!(subscriptionResult && subscriptionResult.value == false));\n    }).catch(function (e) {\n      _loglevel2.default.error(e);\n    });\n    ;\n  },\n\n  _safePostMessage: function _safePostMessage(creator, data, targetOrigin, receiver) {\n    var tOrigin = targetOrigin.toLowerCase();\n\n    // If we are trying to target a http site allow the https version. (w/ or w/o 'wwww.' too)\n    if (tOrigin.startsWith(\"http://\")) {\n      var queryDict = {};\n      location.search.substr(1).split(\"&\").forEach(function (item) {\n        queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1];\n      });\n      var validPreURLRegex = /^http(s|):\\/\\/(www\\.|)/;\n      tOrigin = tOrigin.replace(validPreURLRegex, queryDict[\"hostPageProtocol\"]);\n    }\n\n    if (receiver) creator.postMessage(data, tOrigin, receiver);else creator.postMessage(data, tOrigin);\n  },\n\n  _process_pushes: function _process_pushes(array) {\n    for (var i = 0; i < array.length; i++) {\n      OneSignal.push(array[i]);\n    }\n  },\n\n  push: function push(item) {\n    if (typeof item == \"function\") item();else {\n      var functionName = item.shift();\n      OneSignal[functionName].apply(null, item);\n    }\n  }\n};\n\n// If imported on your page.\nif (typeof window !== \"undefined\") window.addEventListener(\"message\", OneSignal._listener_receiveMessage, false);else {\n  // if imported from the service worker.\n  importScripts('https://cdn.onesignal.com/sdks/serviceworker-cache-polyfill.js');\n\n  self.addEventListener('push', function (event) {\n    OneSignal._handleGCMMessage(self, event); // Can handle messages from any browser (except Safari), rename method\n  });\n  self.addEventListener('notificationclick', function (event) {\n    // Also only by SW\n    OneSignal._handleNotificationOpened(event);\n  });\n\n  var isSWonSubdomain = location.href.match(/https\\:\\/\\/.*\\.onesignal.com\\/sdks\\//) != null;\n  if (true) isSWonSubdomain = true;\n\n  self.addEventListener('install', function (event) {\n    _loglevel2.default.debug(\"OneSignal Installed service worker: \" + OneSignal._VERSION);\n    if (self.location.pathname.indexOf(\"OneSignalSDKWorker.js\") > -1) OneSignal._putDbValue(\"Ids\", { type: \"WORKER1_ONE_SIGNAL_SW_VERSION\", id: OneSignal._VERSION });else OneSignal._putDbValue(\"Ids\", { type: \"WORKER2_ONE_SIGNAL_SW_VERSION\", id: OneSignal._VERSION });\n\n    if (isSWonSubdomain) {\n      event.waitUntil(caches.open(\"OneSignal_\" + OneSignal._VERSION).then(function (cache) {\n        return cache.addAll(['/sdks/initOneSignalHttpIframe', '/sdks/initOneSignalHttpIframe?session=*', '/sdks/manifest_json']);\n      }).catch(function (e) {\n        _loglevel2.default.error(e);\n      }));\n    }\n  });\n\n  if (isSWonSubdomain) {\n    self.addEventListener('fetch', function (event) {\n      event.respondWith(caches.match(event.request).then(function (response) {\n        // Cache hit - return response\n        if (response) return response;\n\n        return fetch(event.request);\n      }).catch(function (e) {\n        _loglevel2.default.error(e);\n      }));\n    });\n  }\n}\n\nif (_temp_OneSignal) OneSignal._process_pushes(_temp_OneSignal);\n\nmodule.exports = OneSignal;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 2:
/***/ function(module, exports) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n(function() {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob();\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = xhr.getAllResponseHeaders().trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this._initBody(bodyInit)\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers;\n  self.Request = Request;\n  self.Response = Response;\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return;\n      }\n\n      xhr.onload = function() {\n        var status = (xhr.status === 1223) ? 204 : xhr.status\n        if (status < 100 || status > 599) {\n          reject(new TypeError('Network request failed'))\n          return\n        }\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})();\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = global.fetch\n}.call(global));\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//@ sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 3:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HOST_URL = exports.PROD_HOST = exports.DEV_HOST = undefined;\n\nvar _utils = __webpack_require__(4);\n\nvar DEV_HOST = exports.DEV_HOST = 'https://192.168.1.206:3000';\nvar PROD_HOST = exports.PROD_HOST = 'https://onesignal.com';\nvar HOST_URL = exports.HOST_URL = ((0, _utils.isDev)() ? DEV_HOST : PROD_HOST) + '/api/v1/';//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmFycy5qcz8wOTAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVPLElBQU0sUUFBUSxXQUFSLFFBQVEsR0FBRyw0QkFBNEIsQ0FBQztBQUM5QyxJQUFNLFNBQVMsV0FBVCxTQUFTLEdBQUcsdUJBQXVCLENBQUM7QUFDMUMsSUFBTSxRQUFRLFdBQVIsUUFBUSxHQUFHLENBQUMsV0FKaEIsS0FBSyxHQUlrQixHQUFHLFFBQVEsR0FBRyxTQUFTLElBQUksVUFBVSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEZXYgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IERFVl9IT1NUID0gJ2h0dHBzOi8vMTkyLjE2OC4xLjIwNjozMDAwJztcbmV4cG9ydCBjb25zdCBQUk9EX0hPU1QgPSAnaHR0cHM6Ly9vbmVzaWduYWwuY29tJztcbmV4cG9ydCBjb25zdCBIT1NUX1VSTCA9IChpc0RldigpID8gREVWX0hPU1QgOiBQUk9EX0hPU1QpICsgJy9hcGkvdjEvJztcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy92YXJzLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 4:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHumanizedTimeDuration = getHumanizedTimeDuration;\nexports.isServiceWorkerContext = isServiceWorkerContext;\nexports.isDev = isDev;\nfunction getHumanizedTimeDuration(timeDurationInMilliseconds) {\n  function addPluralSuffix(number) {\n    return number > 1 ? 's' : '';\n  }\n  var duration = Math.floor(timeDurationInMilliseconds / 1000);\n\n  var years = Math.floor(duration / 31536000);\n  if (years) return years + ' year' + addPluralSuffix(years);\n\n  var days = Math.floor((duration %= 31536000) / 86400);\n  if (days) return days + ' day' + addPluralSuffix(days);\n\n  var hours = Math.floor((duration %= 86400) / 3600);\n  if (hours) return hours + ' hour' + addPluralSuffix(hours);\n\n  var minutes = Math.floor((duration %= 3600) / 60);\n  if (minutes) return minutes + ' minute' + addPluralSuffix(minutes);\n\n  var seconds = duration % 60;\n  if (seconds) return seconds + ' second' + addPluralSuffix(seconds);\n\n  return 'just now';\n}\n\nfunction isServiceWorkerContext() {\n  return typeof window === \"undefined\";\n}\n\nfunction isDev() {\n  return (true);\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanM/MmZmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQUFnQix3QkFBd0IsR0FBeEIsd0JBQXdCO1FBNkJ4QixzQkFBc0IsR0FBdEIsc0JBQXNCO1FBSXRCLEtBQUssR0FBTCxLQUFLO0FBakNkLFNBQVMsd0JBQXdCLENBQUMsMEJBQTBCLEVBQUU7QUFDbkUsV0FBUyxlQUFlLENBQUMsTUFBTSxFQUFFO0FBQy9CLFdBQVEsTUFBTSxHQUFHLENBQUMsR0FBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0dBQ2hDO0FBQ0QsTUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFFN0QsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7QUFDNUMsTUFBSSxLQUFLLEVBQ1AsT0FBTyxLQUFLLEdBQUcsT0FBTyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFbEQsTUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLElBQUksS0FBSyxDQUFDLENBQUM7QUFDdEQsTUFBSSxJQUFJLEVBQ04sT0FBTyxJQUFJLEdBQUcsTUFBTSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFL0MsTUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUM7QUFDbkQsTUFBSSxLQUFLLEVBQ1AsT0FBTyxLQUFLLEdBQUcsT0FBTyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFbEQsTUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7QUFDbEQsTUFBSSxPQUFPLEVBQ1QsT0FBTyxPQUFPLEdBQUcsU0FBUyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFeEQsTUFBSSxPQUFPLEdBQUcsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUM1QixNQUFJLE9BQU8sRUFDVCxPQUFPLE9BQU8sR0FBRyxTQUFTLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztBQUV4RCxTQUFPLFVBQVUsQ0FBQztDQUNuQjs7QUFFTSxTQUFTLHNCQUFzQixHQUFHO0FBQ3ZDLFNBQU8sT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDO0NBQ3RDOztBQUVNLFNBQVMsS0FBSyxHQUFHO0FBQ3RCLFNBQU8sTUFBTyxDQUFDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0SHVtYW5pemVkVGltZUR1cmF0aW9uKHRpbWVEdXJhdGlvbkluTWlsbGlzZWNvbmRzKSB7XG4gIGZ1bmN0aW9uIGFkZFBsdXJhbFN1ZmZpeChudW1iZXIpIHtcbiAgICByZXR1cm4gKG51bWJlciA+IDEpID8gJ3MnIDogJyc7XG4gIH1cbiAgdmFyIGR1cmF0aW9uID0gTWF0aC5mbG9vcih0aW1lRHVyYXRpb25Jbk1pbGxpc2Vjb25kcyAvIDEwMDApO1xuXG4gIHZhciB5ZWFycyA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyAzMTUzNjAwMCk7XG4gIGlmICh5ZWFycylcbiAgICByZXR1cm4geWVhcnMgKyAnIHllYXInICsgYWRkUGx1cmFsU3VmZml4KHllYXJzKTtcblxuICB2YXIgZGF5cyA9IE1hdGguZmxvb3IoKGR1cmF0aW9uICU9IDMxNTM2MDAwKSAvIDg2NDAwKTtcbiAgaWYgKGRheXMpXG4gICAgcmV0dXJuIGRheXMgKyAnIGRheScgKyBhZGRQbHVyYWxTdWZmaXgoZGF5cyk7XG5cbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcigoZHVyYXRpb24gJT0gODY0MDApIC8gMzYwMCk7XG4gIGlmIChob3VycylcbiAgICByZXR1cm4gaG91cnMgKyAnIGhvdXInICsgYWRkUGx1cmFsU3VmZml4KGhvdXJzKTtcblxuICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IoKGR1cmF0aW9uICU9IDM2MDApIC8gNjApO1xuICBpZiAobWludXRlcylcbiAgICByZXR1cm4gbWludXRlcyArICcgbWludXRlJyArIGFkZFBsdXJhbFN1ZmZpeChtaW51dGVzKTtcblxuICB2YXIgc2Vjb25kcyA9IGR1cmF0aW9uICUgNjA7XG4gIGlmIChzZWNvbmRzKVxuICAgIHJldHVybiBzZWNvbmRzICsgJyBzZWNvbmQnICsgYWRkUGx1cmFsU3VmZml4KHNlY29uZHMpO1xuXG4gIHJldHVybiAnanVzdCBub3cnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTZXJ2aWNlV29ya2VyQ29udGV4dCgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RldigpIHtcbiAgcmV0dXJuIF9fREVWX187XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },

/***/ 5:
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\n(function (root, definition) {\r\n    \"use strict\";\r\n    if (typeof module === 'object' && module.exports && \"function\" === 'function') {\r\n        module.exports = definition();\r\n    } else if (true) {\r\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    \"use strict\";\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n\r\n    function realMethod(methodName) {\r\n        if (typeof console === undefinedType) {\r\n            return false; // We can't build a real method without a console to log to\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // these private functions always need `this` to be set properly\r\n\r\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods.call(this, level, loggerName);\r\n                this[methodName].apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    function replaceLoggingMethods(level, loggerName) {\r\n        /*jshint validthis:true */\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            this[methodName] = (i < level) ?\r\n                noop :\r\n                this.methodFactory(methodName, level, loggerName);\r\n        }\r\n    }\r\n\r\n    function defaultMethodFactory(methodName, level, loggerName) {\r\n        /*jshint validthis:true */\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\r\n    }\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    function Logger(name, defaultLevel, factory) {\r\n      var self = this;\r\n      var currentLevel;\r\n      var storageKey = \"loglevel\";\r\n      if (name) {\r\n        storageKey += \":\" + name;\r\n      }\r\n\r\n      function persistLevelIfPossible(levelNum) {\r\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n          // Use localStorage if available\r\n          try {\r\n              window.localStorage[storageKey] = levelName;\r\n              return;\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n              window.document.cookie =\r\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\r\n          } catch (ignore) {}\r\n      }\r\n\r\n      function getPersistedLevel() {\r\n          var storedLevel;\r\n\r\n          try {\r\n              storedLevel = window.localStorage[storageKey];\r\n          } catch (ignore) {}\r\n\r\n          if (typeof storedLevel === undefinedType) {\r\n              try {\r\n                  var cookie = window.document.cookie;\r\n                  var location = cookie.indexOf(\r\n                      encodeURIComponent(storageKey) + \"=\");\r\n                  if (location) {\r\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\r\n                  }\r\n              } catch (ignore) {}\r\n          }\r\n\r\n          // If the stored level is not valid, treat it as if nothing was stored.\r\n          if (self.levels[storedLevel] === undefined) {\r\n              storedLevel = undefined;\r\n          }\r\n\r\n          return storedLevel;\r\n      }\r\n\r\n      /*\r\n       *\r\n       * Public API\r\n       *\r\n       */\r\n\r\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n          \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n      self.methodFactory = factory || defaultMethodFactory;\r\n\r\n      self.getLevel = function () {\r\n          return currentLevel;\r\n      };\r\n\r\n      self.setLevel = function (level, persist) {\r\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n              level = self.levels[level.toUpperCase()];\r\n          }\r\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n              currentLevel = level;\r\n              if (persist !== false) {  // defaults to true\r\n                  persistLevelIfPossible(level);\r\n              }\r\n              replaceLoggingMethods.call(self, level, name);\r\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n                  return \"No console available for logging\";\r\n              }\r\n          } else {\r\n              throw \"log.setLevel() called with invalid level: \" + level;\r\n          }\r\n      };\r\n\r\n      self.setDefaultLevel = function (level) {\r\n          if (!getPersistedLevel()) {\r\n              self.setLevel(level, false);\r\n          }\r\n      };\r\n\r\n      self.enableAll = function(persist) {\r\n          self.setLevel(self.levels.TRACE, persist);\r\n      };\r\n\r\n      self.disableAll = function(persist) {\r\n          self.setLevel(self.levels.SILENT, persist);\r\n      };\r\n\r\n      // Initialize with the right level\r\n      var initialLevel = getPersistedLevel();\r\n      if (initialLevel == null) {\r\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\r\n      }\r\n      self.setLevel(initialLevel, false);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Package-level API\r\n     *\r\n     */\r\n\r\n    var defaultLogger = new Logger();\r\n\r\n    var _loggersByName = {};\r\n    defaultLogger.getLogger = function getLogger(name) {\r\n        if (typeof name !== \"string\" || name === \"\") {\r\n          throw new TypeError(\"You must supply a name when creating a logger.\");\r\n        }\r\n\r\n        var logger = _loggersByName[name];\r\n        if (!logger) {\r\n          logger = _loggersByName[name] = new Logger(\r\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\r\n        }\r\n        return logger;\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    defaultLogger.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === defaultLogger) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return defaultLogger;\r\n    };\r\n\r\n    return defaultLogger;\r\n}));\r\n//@ sourceMappingURL=data:application/json;base64,");

/***/ },

/***/ 6:
/***/ function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n LimitStore.put('colorado', 'rocky');\n [\"rocky\"]\n LimitStore.put('colorado', 'mountain');\n [\"rocky\", \"mountain\"]\n LimitStore.put('colorado', 'national');\n [\"mountain\", \"national\"]\n LimitStore.put('colorado', 'park');\n [\"national\", \"park\"]\n */\nfunction LimitStore() {}\n\nLimitStore.store = {};\nLimitStore.LIMIT = 2;\n\nLimitStore.put = function (key, value) {\n  if (LimitStore.store[key] === undefined) {\n    LimitStore.store[key] = [null, null];\n  }\n  LimitStore.store[key].push(value);\n  if (LimitStore.store[key].length == LimitStore.LIMIT + 1) {\n    LimitStore.store[key].shift();\n  }\n  return LimitStore.store[key];\n};\n\nLimitStore.get = function (key) {\n  return LimitStore.store[key];\n};\n\nexports.default = LimitStore;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGltaXRTdG9yZS5qcz8yZDQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQVVBLFNBQVMsVUFBVSxHQUFHLEVBQ3JCOztBQUVELFVBQVUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLFVBQVUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDOztBQUVyQixVQUFVLENBQUMsR0FBRyxHQUFHLFVBQVUsR0FBRyxFQUFFLEtBQUssRUFBRTtBQUNyQyxNQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3ZDLGNBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDdEM7QUFDRCxZQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxNQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0FBQ3hELGNBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDL0I7QUFDRCxTQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDOUIsQ0FBQzs7QUFFRixVQUFVLENBQUMsR0FBRyxHQUFHLFVBQVUsR0FBRyxFQUFFO0FBQzlCLFNBQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM5QixDQUFDOztrQkFFYSxVQUFVIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIExpbWl0U3RvcmUucHV0KCdjb2xvcmFkbycsICdyb2NreScpO1xuIFtcInJvY2t5XCJdXG4gTGltaXRTdG9yZS5wdXQoJ2NvbG9yYWRvJywgJ21vdW50YWluJyk7XG4gW1wicm9ja3lcIiwgXCJtb3VudGFpblwiXVxuIExpbWl0U3RvcmUucHV0KCdjb2xvcmFkbycsICduYXRpb25hbCcpO1xuIFtcIm1vdW50YWluXCIsIFwibmF0aW9uYWxcIl1cbiBMaW1pdFN0b3JlLnB1dCgnY29sb3JhZG8nLCAncGFyaycpO1xuIFtcIm5hdGlvbmFsXCIsIFwicGFya1wiXVxuICovXG5mdW5jdGlvbiBMaW1pdFN0b3JlKCkge1xufVxuXG5MaW1pdFN0b3JlLnN0b3JlID0ge307XG5MaW1pdFN0b3JlLkxJTUlUID0gMjtcblxuTGltaXRTdG9yZS5wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICBpZiAoTGltaXRTdG9yZS5zdG9yZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICBMaW1pdFN0b3JlLnN0b3JlW2tleV0gPSBbbnVsbCwgbnVsbF07XG4gIH1cbiAgTGltaXRTdG9yZS5zdG9yZVtrZXldLnB1c2godmFsdWUpO1xuICBpZiAoTGltaXRTdG9yZS5zdG9yZVtrZXldLmxlbmd0aCA9PSBMaW1pdFN0b3JlLkxJTUlUICsgMSkge1xuICAgIExpbWl0U3RvcmUuc3RvcmVba2V5XS5zaGlmdCgpO1xuICB9XG4gIHJldHVybiBMaW1pdFN0b3JlLnN0b3JlW2tleV07XG59O1xuXG5MaW1pdFN0b3JlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIExpbWl0U3RvcmUuc3RvcmVba2V5XTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpbWl0U3RvcmU7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvbGltaXRTdG9yZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },

/***/ 7:
/***/ function(module, exports) {

	eval("\"use strict\";\n\nif (typeof window !== \"undefined\") {\n  (function () {\n    function CustomEvent(event, params) {\n      params = params || { bubbles: false, cancelable: false, details: undefined };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.details);\n      return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n  })();\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRzLmpzPzlmZjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtBQUNqQyxHQUFDLFlBQVk7QUFDWCxhQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0FBQ2xDLFlBQU0sR0FBRyxNQUFNLElBQUksRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBQyxDQUFDO0FBQzNFLFVBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDOUMsU0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM5RSxhQUFPLEdBQUcsQ0FBQztLQUNaOztBQUVELGVBQVcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7O0FBRS9DLFVBQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0dBQ2xDLEdBQUcsQ0FBQyIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge2J1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsczogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbHMpO1xuICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG5cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XG4gIH0pKCk7XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZXZlbnRzLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 8:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {module.exports = global[\"OneSignal\"] = __webpack_require__(1);\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2RrLmpzP2RmYjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEdBQStLLEUiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiT25lU2lnbmFsXCJdID0gcmVxdWlyZShcIi0hL1VzZXJzL2pwYW5nL2NvZGUvT25lU2lnbmFsLVdlYnNpdGUtU0RLL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvaW5kZXguanM/e1xcXCJwcmVzZXRzXFxcIjpbXFxcImVzMjAxNVxcXCJdLFxcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZX0hL1VzZXJzL2pwYW5nL2NvZGUvT25lU2lnbmFsLVdlYnNpdGUtU0RLL3NyYy9zZGsuanNcIik7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vZXhwb3NlLWxvYWRlcj9PbmVTaWduYWwhLi9zcmMvc2RrLmpzXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },

/***/ 50:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(fetch) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.apiCall = apiCall;\nexports.sendNotification = sendNotification;\n\nvar _vars = __webpack_require__(3);\n\nvar _loglevel = __webpack_require__(5);\n\nvar _loglevel2 = _interopRequireDefault(_loglevel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction apiCall(action, method, data) {\n  var headers = new Headers();\n  headers.append('Content-Type', 'application/json;charset=UTF-8');\n\n  var contents = {\n    method: method || 'NO_METHOD_SPECIFIED',\n    headers: headers,\n    cache: 'no-cache',\n    body: JSON.stringify(data)\n  };\n\n  return new Promise(function (resolve, reject) {\n    fetch(_vars.HOST_URL + action, contents).then(function status(response) {\n      if (response.status >= 200 && response.status < 300) resolve(response.json());else reject(new Error(response.statusText));\n    }).catch(function (e) {\n      reject(e);\n    });\n  });\n}\n\nfunction sendNotification(appId, playerIds, titles, contents) {\n  var params = {\n    'app_id': appId,\n    'headings': titles,\n    'contents': contents,\n    'include_player_ids': playerIds,\n    'isAnyWeb': true,\n    'url': 'javascript:void(0);'\n  };\n  return apiCall('notifications', 'POST', params);\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBpLmpzPzlmOTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFHZ0IsT0FBTyxHQUFQLE9BQU87UUF5QlAsZ0JBQWdCLEdBQWhCLGdCQUFnQjs7Ozs7Ozs7OztBQXpCekIsU0FBUyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDNUMsTUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUM1QixTQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDOztBQUVqRSxNQUFJLFFBQVEsR0FBRztBQUNiLFVBQU0sRUFBRSxNQUFNLElBQUkscUJBQXFCO0FBQ3ZDLFdBQU8sRUFBRSxPQUFPO0FBQ2hCLFNBQUssRUFBRSxVQUFVO0FBQ2pCLFFBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztHQUMzQixDQUFDOztBQUVGLFNBQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFLO0FBQ3RDLFNBQUssQ0FBQyxNQWZELFFBQVEsR0FlSSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQy9CLElBQUksQ0FBQyxTQUFTLE1BQU0sQ0FBQyxRQUFRLEVBQUU7QUFDOUIsVUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFDakQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBRXpCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztLQUMxQyxDQUFDLENBQ0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ2xCLFlBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNYLENBQUMsQ0FBQztHQUNOLENBQUMsQ0FBQztDQUNKOztBQUVNLFNBQVMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO0FBQ25FLE1BQUksTUFBTSxHQUFHO0FBQ1gsWUFBUSxFQUFFLEtBQUs7QUFDZixjQUFVLEVBQUUsTUFBTTtBQUNsQixjQUFVLEVBQUUsUUFBUTtBQUNwQix3QkFBb0IsRUFBRSxTQUFTO0FBQy9CLGNBQVUsRUFBRSxJQUFJO0FBQ2hCLFNBQUssRUFBRSxxQkFBcUI7R0FDN0IsQ0FBQztBQUNGLFNBQU8sT0FBTyxDQUFDLGVBQWUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMiLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIT1NUX1VSTCB9IGZyb20gJy4vdmFycy5qcydcbmltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBpQ2FsbChhY3Rpb24sIG1ldGhvZCwgZGF0YSkge1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gIGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG5cbiAgbGV0IGNvbnRlbnRzID0ge1xuICAgIG1ldGhvZDogbWV0aG9kIHx8ICdOT19NRVRIT0RfU1BFQ0lGSUVEJyxcbiAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmZXRjaChIT1NUX1VSTCArIGFjdGlvbiwgY29udGVudHMpXG4gICAgICAudGhlbihmdW5jdGlvbiBzdGF0dXMocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKVxuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kTm90aWZpY2F0aW9uKGFwcElkLCBwbGF5ZXJJZHMsIHRpdGxlcywgY29udGVudHMpIHtcbiAgdmFyIHBhcmFtcyA9IHtcbiAgICAnYXBwX2lkJzogYXBwSWQsXG4gICAgJ2hlYWRpbmdzJzogdGl0bGVzLFxuICAgICdjb250ZW50cyc6IGNvbnRlbnRzLFxuICAgICdpbmNsdWRlX3BsYXllcl9pZHMnOiBwbGF5ZXJJZHMsXG4gICAgJ2lzQW55V2ViJzogdHJ1ZSxcbiAgICAndXJsJzogJ2phdmFzY3JpcHQ6dm9pZCgwKTsnXG4gIH07XG4gIHJldHVybiBhcGlDYWxsKCdub3RpZmljYXRpb25zJywgJ1BPU1QnLCBwYXJhbXMpO1xufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwaS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }

/******/ });