!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}var installedModules={};__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)}(function(modules){for(var i in modules)if(Object.prototype.hasOwnProperty.call(modules,i))switch(typeof modules[i]){case"function":break;case"object":modules[i]=function(_m){var args=_m.slice(1),fn=modules[_m[0]];return function(a,b,c){fn.apply(this,[a,b,c].concat(args))}}(modules[i]);break;default:modules[i]=modules[modules[i]]}return modules}([function(module,exports,__webpack_require__){"use strict";__webpack_require__(9)},,,function(module,exports){(function(global){(function(){!function(){"use strict";function normalizeName(name){if("string"!=typeof name)name=String(name);if(/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name))throw new TypeError("Invalid character in header field name");return name.toLowerCase()}function normalizeValue(value){if("string"!=typeof value)value=String(value);return value}function Headers(headers){this.map={};if(headers instanceof Headers)headers.forEach(function(value,name){this.append(name,value)},this);else if(headers)Object.getOwnPropertyNames(headers).forEach(function(name){this.append(name,headers[name])},this)}function consumed(body){if(body.bodyUsed)return Promise.reject(new TypeError("Already read"));body.bodyUsed=true}function fileReaderReady(reader){return new Promise(function(resolve,reject){reader.onload=function(){resolve(reader.result)};reader.onerror=function(){reject(reader.error)}})}function readBlobAsArrayBuffer(blob){var reader=new FileReader;reader.readAsArrayBuffer(blob);return fileReaderReady(reader)}function readBlobAsText(blob){var reader=new FileReader;reader.readAsText(blob);return fileReaderReady(reader)}function Body(){this.bodyUsed=false;this._initBody=function(body){this._bodyInit=body;if("string"==typeof body)this._bodyText=body;else if(support.blob&&Blob.prototype.isPrototypeOf(body))this._bodyBlob=body;else if(support.formData&&FormData.prototype.isPrototypeOf(body))this._bodyFormData=body;else if(!body)this._bodyText="";else if(support.arrayBuffer&&ArrayBuffer.prototype.isPrototypeOf(body));else throw new Error("unsupported BodyInit type")};if(support.blob){this.blob=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);else if(this._bodyFormData)throw new Error("could not read FormData body as blob");else return Promise.resolve(new Blob([this._bodyText]))};this.arrayBuffer=function(){return this.blob().then(readBlobAsArrayBuffer)};this.text=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);else if(this._bodyFormData)throw new Error("could not read FormData body as text");else return Promise.resolve(this._bodyText)}}else this.text=function(){var rejected=consumed(this);return rejected?rejected:Promise.resolve(this._bodyText)};if(support.formData)this.formData=function(){return this.text().then(decode)};this.json=function(){return this.text().then(JSON.parse)};return this}function normalizeMethod(method){var upcased=method.toUpperCase();return methods.indexOf(upcased)>-1?upcased:method}function Request(input,options){options=options||{};var body=options.body;if(Request.prototype.isPrototypeOf(input)){if(input.bodyUsed)throw new TypeError("Already read");this.url=input.url;this.credentials=input.credentials;if(!options.headers)this.headers=new Headers(input.headers);this.method=input.method;this.mode=input.mode;if(!body){body=input._bodyInit;input.bodyUsed=true}}else this.url=input;this.credentials=options.credentials||this.credentials||"omit";if(options.headers||!this.headers)this.headers=new Headers(options.headers);this.method=normalizeMethod(options.method||this.method||"GET");this.mode=options.mode||this.mode||null;this.referrer=null;if(("GET"===this.method||"HEAD"===this.method)&&body)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(body)}function decode(body){var form=new FormData;body.trim().split("&").forEach(function(bytes){if(bytes){var split=bytes.split("=");var name=split.shift().replace(/\+/g," ");var value=split.join("=").replace(/\+/g," ");form.append(decodeURIComponent(name),decodeURIComponent(value))}});return form}function headers(xhr){var head=new Headers;var pairs=xhr.getAllResponseHeaders().trim().split("\n");pairs.forEach(function(header){var split=header.trim().split(":");var key=split.shift().trim();var value=split.join(":").trim();head.append(key,value)});return head}function Response(bodyInit,options){if(!options)options={};this._initBody(bodyInit);this.type="default";this.status=options.status;this.ok=this.status>=200&&this.status<300;this.statusText=options.statusText;this.headers=options.headers instanceof Headers?options.headers:new Headers(options.headers);this.url=options.url||""}if(self.fetch)return;Headers.prototype.append=function(name,value){name=normalizeName(name);value=normalizeValue(value);var list=this.map[name];if(!list){list=[];this.map[name]=list}list.push(value)};Headers.prototype["delete"]=function(name){delete this.map[normalizeName(name)]};Headers.prototype.get=function(name){var values=this.map[normalizeName(name)];return values?values[0]:null};Headers.prototype.getAll=function(name){return this.map[normalizeName(name)]||[]};Headers.prototype.has=function(name){return this.map.hasOwnProperty(normalizeName(name))};Headers.prototype.set=function(name,value){this.map[normalizeName(name)]=[normalizeValue(value)]};Headers.prototype.forEach=function(callback,thisArg){Object.getOwnPropertyNames(this.map).forEach(function(name){this.map[name].forEach(function(value){callback.call(thisArg,value,name,this)},this)},this)};var support={blob:"FileReader"in self&&"Blob"in self&&function(){try{new Blob;return true}catch(e){return false}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};var methods=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];Request.prototype.clone=function(){return new Request(this)};Body.call(Request.prototype);Body.call(Response.prototype);Response.prototype.clone=function(){return new Response(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})};Response.error=function(){var response=new Response(null,{status:0,statusText:""});response.type="error";return response};var redirectStatuses=[301,302,303,307,308];Response.redirect=function(url,status){if(-1===redirectStatuses.indexOf(status))throw new RangeError("Invalid status code");return new Response(null,{status:status,headers:{location:url}})};self.Headers=Headers;self.Request=Request;self.Response=Response;self.fetch=function(input,init){return new Promise(function(resolve,reject){function responseURL(){if("responseURL"in xhr)return xhr.responseURL;if(/^X-Request-URL:/m.test(xhr.getAllResponseHeaders()))return xhr.getResponseHeader("X-Request-URL");return}var request;if(Request.prototype.isPrototypeOf(input)&&!init)request=input;else request=new Request(input,init);var xhr=new XMLHttpRequest;xhr.onload=function(){var status=1223===xhr.status?204:xhr.status;if(100>status||status>599){reject(new TypeError("Network request failed"));return}var options={status:status,statusText:xhr.statusText,headers:headers(xhr),url:responseURL()};var body="response"in xhr?xhr.response:xhr.responseText;resolve(new Response(body,options))};xhr.onerror=function(){reject(new TypeError("Network request failed"))};xhr.open(request.method,request.url,true);if("include"===request.credentials)xhr.withCredentials=true;if("responseType"in xhr&&support.blob)xhr.responseType="blob";request.headers.forEach(function(value,name){xhr.setRequestHeader(name,value)});xhr.send("undefined"==typeof request._bodyInit?null:request._bodyInit)})};self.fetch.polyfill=true}();module.exports=global.fetch}).call(global)}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.API_URL=exports.HOST_URL=exports.PROD_HOST=exports.DEV_HOST=void 0;var _utils=__webpack_require__(5);var DEV_HOST=exports.DEV_HOST="https://192.168.1.206:3000";var PROD_HOST=exports.PROD_HOST="https://onesignal.com";var HOST_URL=exports.HOST_URL=(0,_utils.isDev)()?DEV_HOST:PROD_HOST;var API_URL=exports.API_URL=((0,_utils.isDev)()?DEV_HOST:PROD_HOST)+"/api/v1/"},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _typeof(obj){return obj&&"undefined"!=typeof Symbol&&obj.constructor===Symbol?"symbol":typeof obj}function isArray(variable){return"[object Array]"===Object.prototype.toString.call(variable)}function getHumanizedTimeDuration(timeDurationInMilliseconds){function addPluralSuffix(number){return number>1?"s":""}var duration=Math.floor(timeDurationInMilliseconds/1e3);var years=Math.floor(duration/31536e3);if(years)return years+" year"+addPluralSuffix(years);var days=Math.floor((duration%=31536e3)/86400);if(days)return days+" day"+addPluralSuffix(days);var hours=Math.floor((duration%=86400)/3600);if(hours)return hours+" hour"+addPluralSuffix(hours);var minutes=Math.floor((duration%=3600)/60);if(minutes)return minutes+" minute"+addPluralSuffix(minutes);var seconds=duration%60;if(seconds)return seconds+" second"+addPluralSuffix(seconds);return"just now"}function isDev(){return true}function isPushNotificationsSupported(){var chromeVersion=navigator.appVersion.match(/Chrome\/(.*?) /);if(isSupportedFireFox())return true;if(isSupportedSafari())return true;if(!chromeVersion)return false;if(navigator.appVersion.match(/Edge/))return false;if(navigator.appVersion.match(/ wv/))return false;if(navigator.appVersion.match(/OPR\//))return false;if(/iPad|iPhone|iPod/.test(navigator.platform))return false;return parseInt(chromeVersion[1].substring(0,2))>41}function isBrowserSafari(){var safariVersion=navigator.appVersion.match("Version/([0-9]?).* Safari");return null!=safariVersion}function isSupportedFireFox(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);if(fireFoxVersion)return parseInt(fireFoxVersion[2].substring(0,2))>43;return false}function isBrowserFirefox(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);return null!=fireFoxVersion}function getFirefoxVersion(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);if(fireFoxVersion)return parseInt(fireFoxVersion[2].substring(0,2));else return-1}function isSupportedSafari(){var safariVersion=navigator.appVersion.match("Version/([0-9]?).* Safari");if(null==safariVersion)return false;if(/iPhone|iPad|iPod/i.test(navigator.userAgent))return false;return parseInt(safariVersion[1])>6}function removeDomElement(selector){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)els[i].parentNode.removeChild(els[i])}function addDomElement(targetSelectorOrElement,addOrder,elementHtml){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).insertAdjacentHTML(addOrder,elementHtml);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.insertAdjacentHTML(addOrder,elementHtml);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function clearDomElementChildren(targetSelectorOrElement){if("string"==typeof targetSelectorOrElement){var element=document.querySelector(targetSelectorOrElement);for(;element.firstChild;)element.removeChild(element.firstChild)}else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))for(;targetSelectorOrElement.firstChild;)targetSelectorOrElement.removeChild(targetSelectorOrElement.firstChild);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function addCssClass(targetSelectorOrElement,cssClass){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).classList.add(cssClass);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.classList.add(cssClass);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function removeCssClass(targetSelectorOrElement,cssClass){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).classList.remove(cssClass);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.classList.remove(cssClass);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function hasCssClass(targetSelectorOrElement,cssClass){if("string"==typeof targetSelectorOrElement)return document.querySelector(targetSelectorOrElement).classList.contains(cssClass);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))return targetSelectorOrElement.classList.contains(cssClass);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function on(targetSelectorOrElement,event,task){if(!event)_loglevel2["default"].error("Cannot call on() with no event: ",event);if(!task)_loglevel2["default"].error("Cannot call on() with no task: ",task);_loglevel2["default"].debug("Debug me here.");if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)on(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)on(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.addEventListener(event,task);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function once(targetSelectorOrElement,event,task){var manualDestroy=arguments.length<=3||void 0===arguments[3]?false:arguments[3];if(!event)_loglevel2["default"].error("Cannot call on() with no event: ",event);if(!task)_loglevel2["default"].error("Cannot call on() with no task: ",task);if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)once(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)once(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement))){var taskWrapper=function(){var internalTaskFunction=function internalTaskFunction(e){var destroyEventListener=function destroyEventListener(){targetSelectorOrElement.removeEventListener(e.type,taskWrapper)};if(!manualDestroy)destroyEventListener();task(e,destroyEventListener)};return internalTaskFunction}();targetSelectorOrElement.addEventListener(event,taskWrapper)}else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function off(targetSelectorOrElement,event,task){if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)off(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)off(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))if(task)targetSelectorOrElement.removeEventListener(event,task);else targetSelectorOrElement.removeEventListener(event);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function getConsoleStyle(style){if("code"==style)return'\n    padding: 0 5px 2px;\n    border: 1px solid #ddd;\n    -webkit-border-radius: 3px;\n    -moz-border-radius: 3px;\n    border-radius: 3px;\n    background-clip: padding-box;\n    font-family: Monaco,"DejaVu Sans Mono","Courier New",monospace;\n    color: #666;\n    ';else if("bold"==style)return"\n      font-weight: 600;\n    color: rgb(51, 51, 51);\n    ";else if("alert"==style)return"\n      font-weight: 600;\n    color: red;\n    ";else if("event"==style)return"\n    color: green;\n    ";else if("postmessage"==style)return"\n    color: orange;\n    "}function delay(durationMs){return new Promise(function(resolve){setTimeout(resolve,durationMs)})}function nothing(){return Promise.resolve()}function when(condition,promiseIfTrue,promiseIfFalse){if(void 0===promiseIfTrue)promiseIfTrue=nothing();if(void 0===promiseIfFalse)promiseIfFalse=nothing();return condition?promiseIfTrue:promiseIfFalse}Object.defineProperty(exports,"__esModule",{value:true});exports.isArray=isArray;exports.getHumanizedTimeDuration=getHumanizedTimeDuration;exports.isDev=isDev;exports.isPushNotificationsSupported=isPushNotificationsSupported;exports.isBrowserSafari=isBrowserSafari;exports.isSupportedFireFox=isSupportedFireFox;exports.isBrowserFirefox=isBrowserFirefox;exports.getFirefoxVersion=getFirefoxVersion;exports.isSupportedSafari=isSupportedSafari;exports.removeDomElement=removeDomElement;exports.addDomElement=addDomElement;exports.clearDomElementChildren=clearDomElementChildren;exports.addCssClass=addCssClass;exports.removeCssClass=removeCssClass;exports.hasCssClass=hasCssClass;exports.on=on;exports.once=once;exports.off=off;exports.getConsoleStyle=getConsoleStyle;exports.delay=delay;exports.nothing=nothing;exports.when=when;var _loglevel=__webpack_require__(7);var _loglevel2=_interopRequireDefault(_loglevel)},function(module,exports,__webpack_require__){(function(fetch){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function apiCall(action,method,data){var headers=new Headers;headers.append("Content-Type","application/json;charset=UTF-8");var contents={method:method||"NO_METHOD_SPECIFIED",headers:headers,cache:"no-cache"};if(data)contents.body=JSON.stringify(data);return new Promise(function(resolve,reject){fetch(_vars.API_URL+action,contents).then(function status(response){if(response.status>=200&&response.status<300)return response.json();else reject(new Error(response.statusText))}).then(function(jsonResponse){resolve(jsonResponse)})["catch"](function(e){reject(e)})})}function sendNotification(appId,playerIds,titles,contents){var params={app_id:appId,headings:titles,contents:contents,include_player_ids:playerIds,isAnyWeb:true,url:"javascript:void(0);"};return apiCall("notifications","POST",params)}Object.defineProperty(exports,"__esModule",{value:true});exports.apiCall=apiCall;exports.sendNotification=sendNotification;var _vars=__webpack_require__(4);var _loglevel=__webpack_require__(7);var _loglevel2=_interopRequireDefault(_loglevel)}).call(exports,__webpack_require__(3))},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__;!function(root,definition){"use strict";if("object"==typeof module&&module.exports&&true)module.exports=definition();else if(true)!(__WEBPACK_AMD_DEFINE_FACTORY__=definition,__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.call(exports,__webpack_require__,exports,module):__WEBPACK_AMD_DEFINE_FACTORY__,void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));else root.log=definition()}(this,function(){"use strict";function realMethod(methodName){if(typeof console===undefinedType)return false;else if(void 0!==console[methodName])return bindMethod(console,methodName);else if(void 0!==console.log)return bindMethod(console,"log");else return noop}function bindMethod(obj,methodName){var method=obj[methodName];if("function"==typeof method.bind)return method.bind(obj);else try{return Function.prototype.bind.call(method,obj)}catch(e){return function(){return Function.prototype.apply.apply(method,[obj,arguments])}}}function enableLoggingWhenConsoleArrives(methodName,level,loggerName){return function(){if(typeof console!==undefinedType){replaceLoggingMethods.call(this,level,loggerName);this[methodName].apply(this,arguments)}}}function replaceLoggingMethods(level,loggerName){for(var i=0;i<logMethods.length;i++){var methodName=logMethods[i];this[methodName]=level>i?noop:this.methodFactory(methodName,level,loggerName)}}function defaultMethodFactory(methodName,level,loggerName){return realMethod(methodName)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(name,defaultLevel,factory){function persistLevelIfPossible(levelNum){var levelName=(logMethods[levelNum]||"silent").toUpperCase();try{window.localStorage[storageKey]=levelName;return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"="+levelName+";"}catch(ignore){}}function getPersistedLevel(){var storedLevel;try{storedLevel=window.localStorage[storageKey]}catch(ignore){}if(typeof storedLevel===undefinedType)try{var cookie=window.document.cookie;var location=cookie.indexOf(encodeURIComponent(storageKey)+"=");if(location)storedLevel=/^([^;]+)/.exec(cookie.slice(location))[1]}catch(ignore){}if(void 0===self.levels[storedLevel])storedLevel=void 0;return storedLevel}var self=this;var currentLevel;var storageKey="loglevel";if(name)storageKey+=":"+name;self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5};self.methodFactory=factory||defaultMethodFactory;self.getLevel=function(){return currentLevel};self.setLevel=function(level,persist){if("string"==typeof level&&void 0!==self.levels[level.toUpperCase()])level=self.levels[level.toUpperCase()];if("number"==typeof level&&level>=0&&level<=self.levels.SILENT){currentLevel=level;if(false!==persist)persistLevelIfPossible(level);replaceLoggingMethods.call(self,level,name);if(typeof console===undefinedType&&level<self.levels.SILENT)return"No console available for logging"}else throw"log.setLevel() called with invalid level: "+level};self.setDefaultLevel=function(level){if(!getPersistedLevel())self.setLevel(level,false)};self.enableAll=function(persist){self.setLevel(self.levels.TRACE,persist)};self.disableAll=function(persist){self.setLevel(self.levels.SILENT,persist)};var initialLevel=getPersistedLevel();if(null==initialLevel)initialLevel=null==defaultLevel?"WARN":defaultLevel;self.setLevel(initialLevel,false)}var noop=function(){};var undefinedType="undefined";var logMethods=["trace","debug","info","warn","error"];var defaultLogger=new Logger;var _loggersByName={};defaultLogger.getLogger=function getLogger(name){if("string"!=typeof name||""===name)throw new TypeError("You must supply a name when creating a logger.");var logger=_loggersByName[name];if(!logger)logger=_loggersByName[name]=new Logger(name,defaultLogger.getLevel(),defaultLogger.methodFactory);return logger};var _log=typeof window!==undefinedType?window.log:void 0;defaultLogger.noConflict=function(){if(typeof window!==undefinedType&&window.log===defaultLogger)window.log=_log;return defaultLogger};return defaultLogger})},,function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var _chai=__webpack_require__(10);var _chai2=_interopRequireDefault(_chai);var _api=__webpack_require__(6);var _vars=__webpack_require__(50);describe("api.js",function(){it("should fail an invalid create notification",function(){return(0,_api.apiCall)("notifications","POST",null).should.eventually.be.rejectedWith("Error: Bad Request")});it("should send a valid create notification",function(){var params={app_id:_vars.APP_ID,contents:{en:"Web SDK unit test."},include_player_ids:[_vars.PLAYER_ID]};return(0,_api.apiCall)("notifications","POST",params).should.eventually.be.fulfilled})})},function(module,exports,__webpack_require__){module.exports=__webpack_require__(11)},function(module,exports,__webpack_require__){var used=[],exports=module.exports={};exports.version="3.4.1";exports.AssertionError=__webpack_require__(12);var util=__webpack_require__(13);exports.use=function(fn){if(!~used.indexOf(fn)){fn(this,util);used.push(fn)}return this};exports.util=util;var config=__webpack_require__(26);exports.config=config;var assertion=__webpack_require__(45);exports.use(assertion);var core=__webpack_require__(46);exports.use(core);var expect=__webpack_require__(47);exports.use(expect);var should=__webpack_require__(48);exports.use(should);var assert=__webpack_require__(49);exports.use(assert)},function(module,exports){function exclude(){function excludeProps(res,obj){Object.keys(obj).forEach(function(key){if(!~excludes.indexOf(key))res[key]=obj[key]})}var excludes=[].slice.call(arguments);return function extendExclude(){var args=[].slice.call(arguments),i=0,res={};for(;i<args.length;i++)excludeProps(res,args[i]);return res}}function AssertionError(message,_props,ssf){var extend=exclude("name","message","stack","constructor","toJSON"),props=extend(_props||{});this.message=message||"Unspecified AssertionError";this.showDiff=false;for(var key in props)this[key]=props[key];ssf=ssf||arguments.callee;if(ssf&&Error.captureStackTrace)Error.captureStackTrace(this,ssf);else this.stack=(new Error).stack}module.exports=AssertionError;AssertionError.prototype=Object.create(Error.prototype);AssertionError.prototype.name="AssertionError";AssertionError.prototype.constructor=AssertionError;AssertionError.prototype.toJSON=function(stack){var extend=exclude("constructor","toJSON","stack"),props=extend({name:this.name},this);if(false!==stack&&this.stack)props.stack=this.stack;return props}},function(module,exports,__webpack_require__){var exports=module.exports={};exports.test=__webpack_require__(14);exports.type=__webpack_require__(16);exports.expectTypes=__webpack_require__(18);exports.getMessage=__webpack_require__(19);exports.getActual=__webpack_require__(20);exports.inspect=__webpack_require__(21);exports.objDisplay=__webpack_require__(25);exports.flag=__webpack_require__(15);exports.transferFlags=__webpack_require__(27);exports.eql=__webpack_require__(28);exports.getPathValue=__webpack_require__(36);exports.getPathInfo=__webpack_require__(37);exports.hasProperty=__webpack_require__(38);exports.getName=__webpack_require__(22);exports.addProperty=__webpack_require__(39);exports.addMethod=__webpack_require__(40);exports.overwriteProperty=__webpack_require__(41);exports.overwriteMethod=__webpack_require__(42);exports.addChainableMethod=__webpack_require__(43);exports.overwriteChainableMethod=__webpack_require__(44)},function(module,exports,__webpack_require__){var flag=__webpack_require__(15);module.exports=function(obj,args){var negate=flag(obj,"negate"),expr=args[0];return negate?!expr:expr}},function(module,exports){module.exports=function(obj,key,value){var flags=obj.__flags||(obj.__flags=Object.create(null));if(3===arguments.length)flags[key]=value;else return flags[key]}},[51,17],function(module,exports){function getType(obj){var type=Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();if("function"==typeof Promise&&obj instanceof Promise)return"promise";if(null===obj)return"null";if(void 0===obj)return"undefined";return type}function Library(){if(!(this instanceof Library))return new Library;this.tests={}}var exports=module.exports=getType;var objectTypeRegexp=/^\[object (.*)\]$/;exports.Library=Library;Library.prototype.of=getType;Library.prototype.define=function(type,test){if(1===arguments.length)return this.tests[type];this.tests[type]=test;return this};Library.prototype.test=function(obj,type){if(type===getType(obj))return true;var test=this.tests[type];if(test&&"regexp"===getType(test))return test.test(obj);else if(test&&"function"===getType(test))return test(obj);else throw new ReferenceError('Type test "'+type+'" not defined or invalid.')}},function(module,exports,__webpack_require__){var AssertionError=__webpack_require__(12);var flag=__webpack_require__(15);var type=__webpack_require__(16);module.exports=function(obj,types){var obj=flag(obj,"object");types=types.map(function(t){return t.toLowerCase()});types.sort();var str=types.map(function(t,index){var art=~["a","e","i","o","u"].indexOf(t.charAt(0))?"an":"a";var or=types.length>1&&index===types.length-1?"or ":"";return or+art+" "+t}).join(", ");if(!types.some(function(expected){return type(obj)===expected}))throw new AssertionError("object tested must be "+str+", but "+type(obj)+" given")}},function(module,exports,__webpack_require__){var flag=__webpack_require__(15),getActual=__webpack_require__(20),inspect=__webpack_require__(21),objDisplay=__webpack_require__(25);module.exports=function(obj,args){var negate=flag(obj,"negate"),val=flag(obj,"object"),expected=args[3],actual=getActual(obj,args),msg=negate?args[2]:args[1],flagMsg=flag(obj,"message");if("function"==typeof msg)msg=msg();msg=msg||"";msg=msg.replace(/#{this}/g,objDisplay(val)).replace(/#{act}/g,objDisplay(actual)).replace(/#{exp}/g,objDisplay(expected));return flagMsg?flagMsg+": "+msg:msg}},function(module,exports){module.exports=function(obj,args){return args.length>4?args[4]:obj._obj}},function(module,exports,__webpack_require__){function inspect(obj,showHidden,depth,colors){var ctx={showHidden:showHidden,seen:[],stylize:function(str){return str}};return formatValue(ctx,obj,"undefined"==typeof depth?2:depth)}function formatValue(ctx,value,recurseTimes){if(value&&"function"==typeof value.inspect&&value.inspect!==exports.inspect&&!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes);if("string"!=typeof ret)ret=formatValue(ctx,ret,recurseTimes);return ret}var primitive=formatPrimitive(ctx,value);if(primitive)return primitive;if(isDOMElement(value))if("outerHTML"in value)return value.outerHTML;else try{if(document.xmlVersion){var xmlSerializer=new XMLSerializer;return xmlSerializer.serializeToString(value)}else{var ns="http://www.w3.org/1999/xhtml";var container=document.createElementNS(ns,"_");container.appendChild(value.cloneNode(false));html=container.innerHTML.replace("><",">"+value.innerHTML+"<");container.innerHTML="";return html}}catch(err){}var visibleKeys=getEnumerableProperties(value);var keys=ctx.showHidden?getProperties(value):visibleKeys;if(0===keys.length||isError(value)&&(1===keys.length&&"stack"===keys[0]||2===keys.length&&"description"===keys[0]&&"stack"===keys[1])){if("function"==typeof value){var name=getName(value);var nameSuffix=name?": "+name:"";return ctx.stylize("[Function"+nameSuffix+"]","special")}if(isRegExp(value))return ctx.stylize(RegExp.prototype.toString.call(value),"regexp");if(isDate(value))return ctx.stylize(Date.prototype.toUTCString.call(value),"date");if(isError(value))return formatError(value)}var base="",array=false,braces=["{","}"];if(isArray(value)){array=true;braces=["[","]"]}if("function"==typeof value){var name=getName(value);var nameSuffix=name?": "+name:"";base=" [Function"+nameSuffix+"]"}if(isRegExp(value))base=" "+RegExp.prototype.toString.call(value);if(isDate(value))base=" "+Date.prototype.toUTCString.call(value);if(isError(value))return formatError(value);if(0===keys.length&&(!array||0==value.length))return braces[0]+base+braces[1];if(0>recurseTimes)if(isRegExp(value))return ctx.stylize(RegExp.prototype.toString.call(value),"regexp");else return ctx.stylize("[Object]","special");ctx.seen.push(value);var output;if(array)output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);else output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);
});ctx.seen.pop();return reduceToSingleString(output,base,braces)}function formatPrimitive(ctx,value){switch(typeof value){case"undefined":return ctx.stylize("undefined","undefined");case"string":var simple="'"+JSON.stringify(value).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return ctx.stylize(simple,"string");case"number":if(0===value&&1/value===-(1/0))return ctx.stylize("-0","number");return ctx.stylize(""+value,"number");case"boolean":return ctx.stylize(""+value,"boolean")}if(null===value)return ctx.stylize("null","null")}function formatError(value){return"["+Error.prototype.toString.call(value)+"]"}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;l>i;++i)if(Object.prototype.hasOwnProperty.call(value,String(i)))output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));else output.push("");keys.forEach(function(key){if(!key.match(/^\d+$/))output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true))});return output}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str;if(value.__lookupGetter__)if(value.__lookupGetter__(key))if(value.__lookupSetter__(key))str=ctx.stylize("[Getter/Setter]","special");else str=ctx.stylize("[Getter]","special");else if(value.__lookupSetter__(key))str=ctx.stylize("[Setter]","special");if(visibleKeys.indexOf(key)<0)name="["+key+"]";if(!str)if(ctx.seen.indexOf(value[key])<0){if(null===recurseTimes)str=formatValue(ctx,value[key],null);else str=formatValue(ctx,value[key],recurseTimes-1);if(str.indexOf("\n")>-1)if(array)str=str.split("\n").map(function(line){return"  "+line}).join("\n").substr(2);else str="\n"+str.split("\n").map(function(line){return"   "+line}).join("\n")}else str=ctx.stylize("[Circular]","special");if("undefined"==typeof name){if(array&&key.match(/^\d+$/))return str;name=JSON.stringify(""+key);if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,"name")}else{name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'");name=ctx.stylize(name,"string")}}return name+": "+str}function reduceToSingleString(output,base,braces){var numLinesEst=0;var length=output.reduce(function(prev,cur){numLinesEst++;if(cur.indexOf("\n")>=0)numLinesEst++;return prev+cur.length+1},0);if(length>60)return braces[0]+(""===base?"":base+"\n ")+" "+output.join(",\n  ")+" "+braces[1];return braces[0]+base+" "+output.join(", ")+" "+braces[1]}function isArray(ar){return Array.isArray(ar)||"object"==typeof ar&&"[object Array]"===objectToString(ar)}function isRegExp(re){return"object"==typeof re&&"[object RegExp]"===objectToString(re)}function isDate(d){return"object"==typeof d&&"[object Date]"===objectToString(d)}function isError(e){return"object"==typeof e&&"[object Error]"===objectToString(e)}function objectToString(o){return Object.prototype.toString.call(o)}var getName=__webpack_require__(22);var getProperties=__webpack_require__(23);var getEnumerableProperties=__webpack_require__(24);module.exports=inspect;var isDOMElement=function(object){if("object"==typeof HTMLElement)return object instanceof HTMLElement;else return object&&"object"==typeof object&&1===object.nodeType&&"string"==typeof object.nodeName}},function(module,exports){module.exports=function(func){if(func.name)return func.name;var match=/^\s?function ([^(]*)\(/.exec(func);return match&&match[1]?match[1]:""}},function(module,exports){module.exports=function getProperties(object){function addProperty(property){if(-1===result.indexOf(property))result.push(property)}var result=Object.getOwnPropertyNames(object);var proto=Object.getPrototypeOf(object);for(;null!==proto;){Object.getOwnPropertyNames(proto).forEach(addProperty);proto=Object.getPrototypeOf(proto)}return result}},function(module,exports){module.exports=function getEnumerableProperties(object){var result=[];for(var name in object)result.push(name);return result}},function(module,exports,__webpack_require__){var inspect=__webpack_require__(21);var config=__webpack_require__(26);module.exports=function(obj){var str=inspect(obj),type=Object.prototype.toString.call(obj);if(config.truncateThreshold&&str.length>=config.truncateThreshold)if("[object Function]"===type)return!obj.name||""===obj.name?"[Function]":"[Function: "+obj.name+"]";else if("[object Array]"===type)return"[ Array("+obj.length+") ]";else if("[object Object]"===type){var keys=Object.keys(obj),kstr=keys.length>2?keys.splice(0,2).join(", ")+", ...":keys.join(", ");return"{ Object ("+kstr+") }"}else return str;else return str}},function(module,exports){module.exports={includeStack:false,showDiff:true,truncateThreshold:40}},function(module,exports){module.exports=function(assertion,object,includeAll){var flags=assertion.__flags||(assertion.__flags=Object.create(null));if(!object.__flags)object.__flags=Object.create(null);includeAll=3===arguments.length?includeAll:true;for(var flag in flags)if(includeAll||"object"!==flag&&"ssfi"!==flag&&"message"!=flag)object.__flags[flag]=flags[flag]}},function(module,exports,__webpack_require__){module.exports=__webpack_require__(29)},function(module,exports,__webpack_require__){function deepEqual(a,b,m){if(sameValue(a,b))return true;else if("date"===type(a))return dateEqual(a,b);else if("regexp"===type(a))return regexpEqual(a,b);else if(Buffer.isBuffer(a))return bufferEqual(a,b);else if("arguments"===type(a))return argumentsEqual(a,b,m);else if(!typeEqual(a,b))return false;else if("object"!==type(a)&&"object"!==type(b)&&"array"!==type(a)&&"array"!==type(b))return sameValue(a,b);else return objectEqual(a,b,m)}function sameValue(a,b){if(a===b)return 0!==a||1/a===1/b;return a!==a&&b!==b}function typeEqual(a,b){return type(a)===type(b)}function dateEqual(a,b){if("date"!==type(b))return false;return sameValue(a.getTime(),b.getTime())}function regexpEqual(a,b){if("regexp"!==type(b))return false;return sameValue(a.toString(),b.toString())}function argumentsEqual(a,b,m){if("arguments"!==type(b))return false;a=[].slice.call(a);b=[].slice.call(b);return deepEqual(a,b,m)}function enumerable(a){var res=[];for(var key in a)res.push(key);return res}function iterableEqual(a,b){if(a.length!==b.length)return false;var i=0;var match=true;for(;i<a.length;i++)if(a[i]!==b[i]){match=false;break}return match}function bufferEqual(a,b){if(!Buffer.isBuffer(b))return false;return iterableEqual(a,b)}function isValue(a){return null!==a&&void 0!==a}function objectEqual(a,b,m){if(!isValue(a)||!isValue(b))return false;if(a.prototype!==b.prototype)return false;var i;if(m){for(i=0;i<m.length;i++)if(m[i][0]===a&&m[i][1]===b||m[i][0]===b&&m[i][1]===a)return true}else m=[];try{var ka=enumerable(a);var kb=enumerable(b)}catch(ex){return false}ka.sort();kb.sort();if(!iterableEqual(ka,kb))return false;m.push([a,b]);var key;for(i=ka.length-1;i>=0;i--){key=ka[i];if(!deepEqual(a[key],b[key],m))return false}return true}var type=__webpack_require__(30);var Buffer;try{Buffer=__webpack_require__(32).Buffer}catch(ex){Buffer={};Buffer.isBuffer=function(){return false}}module.exports=deepEqual},[51,31],function(module,exports){function getType(obj){var str=Object.prototype.toString.call(obj);if(natives[str])return natives[str];if(null===obj)return"null";if(void 0===obj)return"undefined";if(obj===Object(obj))return"object";return typeof obj}function Library(){this.tests={}}var exports=module.exports=getType;var natives={"[object Array]":"array","[object RegExp]":"regexp","[object Function]":"function","[object Arguments]":"arguments","[object Date]":"date"};exports.Library=Library;Library.prototype.of=getType;Library.prototype.define=function(type,test){if(1===arguments.length)return this.tests[type];this.tests[type]=test;return this};Library.prototype.test=function(obj,type){if(type===getType(obj))return true;var test=this.tests[type];if(test&&"regexp"===getType(test))return test.test(obj);else if(test&&"function"===getType(test))return test(obj);else throw new ReferenceError('Type test "'+type+'" not defined or invalid.')}},function(module,exports,__webpack_require__){(function(Buffer,global){function typedArraySupport(){function Bar(){}try{var arr=new Uint8Array(1);arr.foo=function(){return 42};arr.constructor=Bar;return 42===arr.foo()&&arr.constructor===Bar&&"function"==typeof arr.subarray&&0===arr.subarray(1,1).byteLength}catch(e){return false}}function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Buffer(arg){if(!(this instanceof Buffer)){if(arguments.length>1)return new Buffer(arg,arguments[1]);return new Buffer(arg)}this.length=0;this.parent=void 0;if("number"==typeof arg)return fromNumber(this,arg);if("string"==typeof arg)return fromString(this,arg,arguments.length>1?arguments[1]:"utf8");return fromObject(this,arg)}function fromNumber(that,length){that=allocate(that,0>length?0:0|checked(length));if(!Buffer.TYPED_ARRAY_SUPPORT)for(var i=0;length>i;i++)that[i]=0;return that}function fromString(that,string,encoding){if("string"!=typeof encoding||""===encoding)encoding="utf8";var length=0|byteLength(string,encoding);that=allocate(that,length);that.write(string,encoding);return that}function fromObject(that,object){if(Buffer.isBuffer(object))return fromBuffer(that,object);if(isArray(object))return fromArray(that,object);if(null==object)throw new TypeError("must start with number, buffer, array or string");if("undefined"!=typeof ArrayBuffer){if(object.buffer instanceof ArrayBuffer)return fromTypedArray(that,object);if(object instanceof ArrayBuffer)return fromArrayBuffer(that,object)}if(object.length)return fromArrayLike(that,object);return fromJsonObject(that,object)}function fromBuffer(that,buffer){var length=0|checked(buffer.length);that=allocate(that,length);buffer.copy(that,0,0,length);return that}function fromArray(that,array){var length=0|checked(array.length);that=allocate(that,length);for(var i=0;length>i;i+=1)that[i]=255&array[i];return that}function fromTypedArray(that,array){var length=0|checked(array.length);that=allocate(that,length);for(var i=0;length>i;i+=1)that[i]=255&array[i];return that}function fromArrayBuffer(that,array){if(Buffer.TYPED_ARRAY_SUPPORT){array.byteLength;that=Buffer._augment(new Uint8Array(array))}else that=fromTypedArray(that,new Uint8Array(array));return that}function fromArrayLike(that,array){var length=0|checked(array.length);that=allocate(that,length);for(var i=0;length>i;i+=1)that[i]=255&array[i];return that}function fromJsonObject(that,object){var array;var length=0;if("Buffer"===object.type&&isArray(object.data)){array=object.data;length=0|checked(array.length)}that=allocate(that,length);for(var i=0;length>i;i+=1)that[i]=255&array[i];return that}function allocate(that,length){if(Buffer.TYPED_ARRAY_SUPPORT){that=Buffer._augment(new Uint8Array(length));that.__proto__=Buffer.prototype}else{that.length=length;that._isBuffer=true}var fromPool=0!==length&&length<=Buffer.poolSize>>>1;if(fromPool)that.parent=rootParent;return that}function checked(length){if(length>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|length}function SlowBuffer(subject,encoding){if(!(this instanceof SlowBuffer))return new SlowBuffer(subject,encoding);var buf=new Buffer(subject,encoding);delete buf.parent;return buf}function byteLength(string,encoding){if("string"!=typeof string)string=""+string;var len=string.length;if(0===len)return 0;var loweredCase=false;for(;;)switch(encoding){case"ascii":case"binary":case"raw":case"raws":return len;case"utf8":case"utf-8":return utf8ToBytes(string).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*len;case"hex":return len>>>1;case"base64":return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;encoding=(""+encoding).toLowerCase();loweredCase=true}}function slowToString(encoding,start,end){var loweredCase=false;start=0|start;end=void 0===end||end===1/0?this.length:0|end;if(!encoding)encoding="utf8";if(0>start)start=0;if(end>this.length)end=this.length;if(start>=end)return"";for(;;)switch(encoding){case"hex":return hexSlice(this,start,end);case"utf8":case"utf-8":return utf8Slice(this,start,end);case"ascii":return asciiSlice(this,start,end);case"binary":return binarySlice(this,start,end);case"base64":return base64Slice(this,start,end);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase();loweredCase=true}}function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length)length=remaining;else{length=Number(length);if(length>remaining)length=remaining}var strLen=string.length;if(strLen%2!==0)throw new Error("Invalid hex string");if(length>strLen/2)length=strLen/2;for(var i=0;length>i;i++){var parsed=parseInt(string.substr(2*i,2),16);if(isNaN(parsed))throw new Error("Invalid hex string");buf[offset+i]=parsed}return i}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length)}function binaryWrite(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length)}function base64Slice(buf,start,end){if(0===start&&end===buf.length)return base64.fromByteArray(buf);else return base64.fromByteArray(buf.slice(start,end))}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;for(;end>i;){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(end>=i+bytesPerSequence){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(128>firstByte)codePoint=firstByte;break;case 2:secondByte=buf[i+1];if(128===(192&secondByte)){tempCodePoint=(31&firstByte)<<6|63&secondByte;if(tempCodePoint>127)codePoint=tempCodePoint}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if(128===(192&secondByte)&&128===(192&thirdByte)){tempCodePoint=(15&firstByte)<<12|(63&secondByte)<<6|63&thirdByte;if(tempCodePoint>2047&&(55296>tempCodePoint||tempCodePoint>57343))codePoint=tempCodePoint}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if(128===(192&secondByte)&&128===(192&thirdByte)&&128===(192&fourthByte)){tempCodePoint=(15&firstByte)<<18|(63&secondByte)<<12|(63&thirdByte)<<6|63&fourthByte;if(tempCodePoint>65535&&1114112>tempCodePoint)codePoint=tempCodePoint}}}if(null===codePoint){codePoint=65533;bytesPerSequence=1}else if(codePoint>65535){codePoint-=65536;res.push(codePoint>>>10&1023|55296);codePoint=56320|1023&codePoint}res.push(codePoint);i+=bytesPerSequence}return decodeCodePointsArray(res)}function decodeCodePointsArray(codePoints){var len=codePoints.length;if(MAX_ARGUMENTS_LENGTH>=len)return String.fromCharCode.apply(String,codePoints);var res="";var i=0;for(;len>i;)res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));return res}function asciiSlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;end>i;i++)ret+=String.fromCharCode(127&buf[i]);return ret}function binarySlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i=start;end>i;i++)ret+=String.fromCharCode(buf[i]);return ret}function hexSlice(buf,start,end){var len=buf.length;if(!start||0>start)start=0;if(!end||0>end||end>len)end=len;var out="";for(var i=start;end>i;i++)out+=toHex(buf[i]);return out}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res="";for(var i=0;i<bytes.length;i+=2)res+=String.fromCharCode(bytes[i]+256*bytes[i+1]);return res}function checkOffset(offset,ext,length){if(offset%1!==0||0>offset)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError("buffer must be a Buffer instance");if(value>max||min>value)throw new RangeError("value is out of bounds");if(offset+ext>buf.length)throw new RangeError("index out of range")}function objectWriteUInt16(buf,value,offset,littleEndian){if(0>value)value=65535+value+1;for(var i=0,j=Math.min(buf.length-offset,2);j>i;i++)buf[offset+i]=(value&255<<8*(littleEndian?i:1-i))>>>8*(littleEndian?i:1-i)}function objectWriteUInt32(buf,value,offset,littleEndian){if(0>value)value=4294967295+value+1;for(var i=0,j=Math.min(buf.length-offset,4);j>i;i++)buf[offset+i]=value>>>8*(littleEndian?i:3-i)&255}function checkIEEE754(buf,value,offset,ext,max,min){if(value>max||min>value)throw new RangeError("value is out of bounds");if(offset+ext>buf.length)throw new RangeError("index out of range");if(0>offset)throw new RangeError("index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert)checkIEEE754(buf,value,offset,4,3.4028234663852886e38,-3.4028234663852886e38);ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4}function writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert)checkIEEE754(buf,value,offset,8,1.7976931348623157e308,-1.7976931348623157e308);ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8}function base64clean(str){str=stringtrim(str).replace(INVALID_BASE64_RE,"");if(str.length<2)return"";for(;str.length%4!==0;)str+="=";return str}function stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\s+|\s+$/g,"")}function toHex(n){if(16>n)return"0"+n.toString(16);return n.toString(16)}function utf8ToBytes(string,units){units=units||1/0;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;length>i;i++){codePoint=string.charCodeAt(i);if(codePoint>55295&&57344>codePoint){if(!leadSurrogate){if(codePoint>56319){if((units-=3)>-1)bytes.push(239,191,189);continue}else if(i+1===length){if((units-=3)>-1)bytes.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(56320>codePoint){if((units-=3)>-1)bytes.push(239,191,189);leadSurrogate=codePoint;continue}codePoint=(leadSurrogate-55296<<10|codePoint-56320)+65536}else if(leadSurrogate)if((units-=3)>-1)bytes.push(239,191,189);leadSurrogate=null;if(128>codePoint){if((units-=1)<0)break;bytes.push(codePoint)}else if(2048>codePoint){if((units-=2)<0)break;bytes.push(codePoint>>6|192,63&codePoint|128)}else if(65536>codePoint){if((units-=3)<0)break;bytes.push(codePoint>>12|224,codePoint>>6&63|128,63&codePoint|128)}else if(1114112>codePoint){if((units-=4)<0)break;bytes.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,63&codePoint|128)}else throw new Error("Invalid code point")}return bytes}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;i++)byteArray.push(255&str.charCodeAt(i));return byteArray}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length&&!((units-=2)<0);i++){c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi)}return byteArray}function base64ToBytes(str){return base64.toByteArray(base64clean(str))}function blitBuffer(src,dst,offset,length){for(var i=0;length>i&&!(i+offset>=dst.length||i>=src.length);i++)dst[i+offset]=src[i];return i}var base64=__webpack_require__(33);var ieee754=__webpack_require__(34);var isArray=__webpack_require__(35);exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=50;Buffer.poolSize=8192;var rootParent={};Buffer.TYPED_ARRAY_SUPPORT=void 0!==global.TYPED_ARRAY_SUPPORT?global.TYPED_ARRAY_SUPPORT:typedArraySupport();if(Buffer.TYPED_ARRAY_SUPPORT){Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array}Buffer.isBuffer=function isBuffer(b){return!!(null!=b&&b._isBuffer)};Buffer.compare=function compare(a,b){if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b))throw new TypeError("Arguments must be Buffers");if(a===b)return 0;var x=a.length;var y=b.length;var i=0;var len=Math.min(x,y);for(;len>i&&a[i]===b[i];)++i;if(i!==len){x=a[i];y=b[i]}if(y>x)return-1;if(x>y)return 1;return 0};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return true;default:return false}};Buffer.concat=function concat(list,length){if(!isArray(list))throw new TypeError("list argument must be an Array of Buffers.");if(0===list.length)return new Buffer(0);var i;if(void 0===length){length=0;for(i=0;i<list.length;i++)length+=list[i].length}var buf=new Buffer(length);var pos=0;for(i=0;i<list.length;i++){var item=list[i];item.copy(buf,pos);pos+=item.length}return buf};Buffer.byteLength=byteLength;Buffer.prototype.length=void 0;Buffer.prototype.parent=void 0;Buffer.prototype.toString=function toString(){var length=0|this.length;if(0===length)return"";if(0===arguments.length)return utf8Slice(this,0,length);return slowToString.apply(this,arguments)};Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError("Argument must be a Buffer");if(this===b)return true;return 0===Buffer.compare(this,b)};Buffer.prototype.inspect=function inspect(){var str="";var max=exports.INSPECT_MAX_BYTES;if(this.length>0){str=this.toString("hex",0,max).match(/.{2}/g).join(" ");if(this.length>max)str+=" ... "}return"<Buffer "+str+">"};Buffer.prototype.compare=function compare(b){if(!Buffer.isBuffer(b))throw new TypeError("Argument must be a Buffer");if(this===b)return 0;return Buffer.compare(this,b)};Buffer.prototype.indexOf=function indexOf(val,byteOffset){function arrayIndexOf(arr,val,byteOffset){var foundIndex=-1;for(var i=0;byteOffset+i<arr.length;i++)if(arr[byteOffset+i]===val[-1===foundIndex?0:i-foundIndex]){if(-1===foundIndex)foundIndex=i;if(i-foundIndex+1===val.length)return byteOffset+foundIndex}else foundIndex=-1;return-1}if(byteOffset>2147483647)byteOffset=2147483647;else if(-2147483648>byteOffset)byteOffset=-2147483648;byteOffset>>=0;if(0===this.length)return-1;if(byteOffset>=this.length)return-1;if(0>byteOffset)byteOffset=Math.max(this.length+byteOffset,0);if("string"==typeof val){if(0===val.length)return-1;return String.prototype.indexOf.call(this,val,byteOffset)}if(Buffer.isBuffer(val))return arrayIndexOf(this,val,byteOffset);if("number"==typeof val){if(Buffer.TYPED_ARRAY_SUPPORT&&"function"===Uint8Array.prototype.indexOf)return Uint8Array.prototype.indexOf.call(this,val,byteOffset);return arrayIndexOf(this,[val],byteOffset)}throw new TypeError("val must be string, number or Buffer")};Buffer.prototype.get=function get(offset){console.log(".get() is deprecated. Access using array indexes instead.");return this.readUInt8(offset)};Buffer.prototype.set=function set(v,offset){console.log(".set() is deprecated. Access using array indexes instead.");return this.writeUInt8(v,offset)};Buffer.prototype.write=function write(string,offset,length,encoding){if(void 0===offset){encoding="utf8";length=this.length;offset=0}else if(void 0===length&&"string"==typeof offset){encoding=offset;length=this.length;offset=0}else if(isFinite(offset)){offset=0|offset;if(isFinite(length)){length=0|length;if(void 0===encoding)encoding="utf8"}else{encoding=length;length=void 0}}else{var swap=encoding;encoding=offset;offset=0|length;length=swap}var remaining=this.length-offset;if(void 0===length||length>remaining)length=remaining;if(string.length>0&&(0>length||0>offset)||offset>this.length)throw new RangeError("attempt to write outside buffer bounds");if(!encoding)encoding="utf8";var loweredCase=false;for(;;)switch(encoding){case"hex":return hexWrite(this,string,offset,length);case"utf8":case"utf-8":return utf8Write(this,string,offset,length);case"ascii":return asciiWrite(this,string,offset,length);case"binary":return binaryWrite(this,string,offset,length);case"base64":return base64Write(this,string,offset,length);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase();loweredCase=true}};Buffer.prototype.toJSON=function toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=void 0===end?len:~~end;if(0>start){start+=len;if(0>start)start=0}else if(start>len)start=len;if(0>end){end+=len;if(0>end)end=0}else if(end>len)end=len;if(start>end)end=start;var newBuf;if(Buffer.TYPED_ARRAY_SUPPORT)newBuf=Buffer._augment(this.subarray(start,end));else{var sliceLen=end-start;newBuf=new Buffer(sliceLen,void 0);for(var i=0;sliceLen>i;i++)newBuf[i]=this[i+start]}if(newBuf.length)newBuf.parent=this.parent||this;return newBuf};Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=0|offset;byteLength=0|byteLength;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;for(;++i<byteLength&&(mul*=256);)val+=this[offset+i]*mul;return val};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=0|offset;byteLength=0|byteLength;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset+--byteLength];var mul=1;for(;byteLength>0&&(mul*=256);)val+=this[offset+--byteLength]*mul;return val};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);return this[offset]};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+16777216*this[offset+3]};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return 16777216*this[offset]+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=0|offset;byteLength=0|byteLength;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;for(;++i<byteLength&&(mul*=256);)val+=this[offset+i]*mul;mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=0|offset;byteLength=0|byteLength;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];for(;i>0&&(mul*=256);)val+=this[offset+--i]*mul;mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength);return val};Buffer.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);if(!(128&this[offset]))return this[offset];return-1*(255-this[offset]+1)};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return 32768&val?4294901760|val:val};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return 32768&val?4294901760|val:val};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8)};Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=0|offset;byteLength=0|byteLength;if(!noAssert)checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength),0);var mul=1;var i=0;this[offset]=255&value;for(;++i<byteLength&&(mul*=256);)this[offset+i]=value/mul&255;return offset+byteLength};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=0|offset;byteLength=0|byteLength;if(!noAssert)checkInt(this,value,offset,byteLength,Math.pow(2,8*byteLength),0);var i=byteLength-1;var mul=1;this[offset+i]=255&value;for(;--i>=0&&(mul*=256);)this[offset+i]=value/mul&255;return offset+byteLength};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,1,255,0);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=255&value;return offset+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,2,65535,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=255&value;this[offset+1]=value>>>8}else objectWriteUInt16(this,value,offset,true);return offset+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,2,65535,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=255&value}else objectWriteUInt16(this,value,offset,false);return offset+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=255&value}else objectWriteUInt32(this,value,offset,true);return offset+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=255&value}else objectWriteUInt32(this,value,offset,false);return offset+4};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=0|offset;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=0;var mul=1;var sub=0>value?1:0;this[offset]=255&value;for(;++i<byteLength&&(mul*=256);)this[offset+i]=(value/mul>>0)-sub&255;return offset+byteLength};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=0|offset;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit)}var i=byteLength-1;var mul=1;var sub=0>value?1:0;this[offset+i]=255&value;for(;--i>=0&&(mul*=256);)this[offset+i]=(value/mul>>0)-sub&255;return offset+byteLength};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,1,127,-128);if(!Buffer.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(0>value)value=255+value+1;this[offset]=255&value;return offset+1};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){
value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=255&value;this[offset+1]=value>>>8}else objectWriteUInt16(this,value,offset,true);return offset+2};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=255&value}else objectWriteUInt16(this,value,offset,false);return offset+2};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=255&value;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24}else objectWriteUInt32(this,value,offset,true);return offset+4};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=0|offset;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);if(0>value)value=4294967295+value+1;if(Buffer.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=255&value}else objectWriteUInt32(this,value,offset,false);return offset+4};Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert)};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert)};Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert)};Buffer.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&0!==end)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&start>end)end=start;if(end===start)return 0;if(0===target.length||0===this.length)return 0;if(0>targetStart)throw new RangeError("targetStart out of bounds");if(0>start||start>=this.length)throw new RangeError("sourceStart out of bounds");if(0>end)throw new RangeError("sourceEnd out of bounds");if(end>this.length)end=this.length;if(target.length-targetStart<end-start)end=target.length-targetStart+start;var len=end-start;var i;if(this===target&&targetStart>start&&end>targetStart)for(i=len-1;i>=0;i--)target[i+targetStart]=this[i+start];else if(1e3>len||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;len>i;i++)target[i+targetStart]=this[i+start];else target._set(this.subarray(start,start+len),targetStart);return len};Buffer.prototype.fill=function fill(value,start,end){if(!value)value=0;if(!start)start=0;if(!end)end=this.length;if(start>end)throw new RangeError("end < start");if(end===start)return;if(0===this.length)return;if(0>start||start>=this.length)throw new RangeError("start out of bounds");if(0>end||end>this.length)throw new RangeError("end out of bounds");var i;if("number"==typeof value)for(i=start;end>i;i++)this[i]=value;else{var bytes=utf8ToBytes(value.toString());var len=bytes.length;for(i=start;end>i;i++)this[i]=bytes[i%len]}return this};Buffer.prototype.toArrayBuffer=function toArrayBuffer(){if("undefined"!=typeof Uint8Array)if(Buffer.TYPED_ARRAY_SUPPORT)return new Buffer(this).buffer;else{var buf=new Uint8Array(this.length);for(var i=0,len=buf.length;len>i;i+=1)buf[i]=this[i];return buf.buffer}else throw new TypeError("Buffer.toArrayBuffer not supported in this browser")};var BP=Buffer.prototype;Buffer._augment=function _augment(arr){arr.constructor=Buffer;arr._isBuffer=true;arr._set=arr.set;arr.get=BP.get;arr.set=BP.set;arr.write=BP.write;arr.toString=BP.toString;arr.toLocaleString=BP.toString;arr.toJSON=BP.toJSON;arr.equals=BP.equals;arr.compare=BP.compare;arr.indexOf=BP.indexOf;arr.copy=BP.copy;arr.slice=BP.slice;arr.readUIntLE=BP.readUIntLE;arr.readUIntBE=BP.readUIntBE;arr.readUInt8=BP.readUInt8;arr.readUInt16LE=BP.readUInt16LE;arr.readUInt16BE=BP.readUInt16BE;arr.readUInt32LE=BP.readUInt32LE;arr.readUInt32BE=BP.readUInt32BE;arr.readIntLE=BP.readIntLE;arr.readIntBE=BP.readIntBE;arr.readInt8=BP.readInt8;arr.readInt16LE=BP.readInt16LE;arr.readInt16BE=BP.readInt16BE;arr.readInt32LE=BP.readInt32LE;arr.readInt32BE=BP.readInt32BE;arr.readFloatLE=BP.readFloatLE;arr.readFloatBE=BP.readFloatBE;arr.readDoubleLE=BP.readDoubleLE;arr.readDoubleBE=BP.readDoubleBE;arr.writeUInt8=BP.writeUInt8;arr.writeUIntLE=BP.writeUIntLE;arr.writeUIntBE=BP.writeUIntBE;arr.writeUInt16LE=BP.writeUInt16LE;arr.writeUInt16BE=BP.writeUInt16BE;arr.writeUInt32LE=BP.writeUInt32LE;arr.writeUInt32BE=BP.writeUInt32BE;arr.writeIntLE=BP.writeIntLE;arr.writeIntBE=BP.writeIntBE;arr.writeInt8=BP.writeInt8;arr.writeInt16LE=BP.writeInt16LE;arr.writeInt16BE=BP.writeInt16BE;arr.writeInt32LE=BP.writeInt32LE;arr.writeInt32BE=BP.writeInt32BE;arr.writeFloatLE=BP.writeFloatLE;arr.writeFloatBE=BP.writeFloatBE;arr.writeDoubleLE=BP.writeDoubleLE;arr.writeDoubleBE=BP.writeDoubleBE;arr.fill=BP.fill;arr.inspect=BP.inspect;arr.toArrayBuffer=BP.toArrayBuffer;return arr};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g}).call(exports,__webpack_require__(32).Buffer,function(){return this}())},function(module,exports,__webpack_require__){var lookup="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";!function(exports){"use strict";function decode(elt){var code=elt.charCodeAt(0);if(code===PLUS||code===PLUS_URL_SAFE)return 62;if(code===SLASH||code===SLASH_URL_SAFE)return 63;if(NUMBER>code)return-1;if(NUMBER+10>code)return code-NUMBER+26+26;if(UPPER+26>code)return code-UPPER;if(LOWER+26>code)return code-LOWER+26}function b64ToByteArray(b64){function push(v){arr[L++]=v}var i,j,l,tmp,placeHolders,arr;if(b64.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var len=b64.length;placeHolders="="===b64.charAt(len-2)?2:"="===b64.charAt(len-1)?1:0;arr=new Arr(3*b64.length/4-placeHolders);l=placeHolders>0?b64.length-4:b64.length;var L=0;for(i=0,j=0;l>i;i+=4,j+=3){tmp=decode(b64.charAt(i))<<18|decode(b64.charAt(i+1))<<12|decode(b64.charAt(i+2))<<6|decode(b64.charAt(i+3));push((16711680&tmp)>>16);push((65280&tmp)>>8);push(255&tmp)}if(2===placeHolders){tmp=decode(b64.charAt(i))<<2|decode(b64.charAt(i+1))>>4;push(255&tmp)}else if(1===placeHolders){tmp=decode(b64.charAt(i))<<10|decode(b64.charAt(i+1))<<4|decode(b64.charAt(i+2))>>2;push(tmp>>8&255);push(255&tmp)}return arr}function uint8ToBase64(uint8){function encode(num){return lookup.charAt(num)}function tripletToBase64(num){return encode(num>>18&63)+encode(num>>12&63)+encode(num>>6&63)+encode(63&num)}var i,extraBytes=uint8.length%3,output="",temp,length;for(i=0,length=uint8.length-extraBytes;length>i;i+=3){temp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2];output+=tripletToBase64(temp)}switch(extraBytes){case 1:temp=uint8[uint8.length-1];output+=encode(temp>>2);output+=encode(temp<<4&63);output+="==";break;case 2:temp=(uint8[uint8.length-2]<<8)+uint8[uint8.length-1];output+=encode(temp>>10);output+=encode(temp>>4&63);output+=encode(temp<<2&63);output+="="}return output}var Arr="undefined"!=typeof Uint8Array?Uint8Array:Array;var PLUS="+".charCodeAt(0);var SLASH="/".charCodeAt(0);var NUMBER="0".charCodeAt(0);var LOWER="a".charCodeAt(0);var UPPER="A".charCodeAt(0);var PLUS_URL_SAFE="-".charCodeAt(0);var SLASH_URL_SAFE="_".charCodeAt(0);exports.toByteArray=b64ToByteArray;exports.fromByteArray=uint8ToBase64}(false?this.base64js={}:exports)},function(module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=8*nBytes-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=256*e+buffer[offset+i],i+=d,nBits-=8);m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=256*m+buffer[offset+i],i+=d,nBits-=8);if(0===e)e=1-eBias;else if(e===eMax)return m?NaN:(s?-1:1)*(1/0);else{m+=Math.pow(2,mLen);e-=eBias}return(s?-1:1)*m*Math.pow(2,e-mLen)};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=8*nBytes-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=23===mLen?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=0>value||0===value&&0>1/value?1:0;value=Math.abs(value);if(isNaN(value)||value===1/0){m=isNaN(value)?1:0;e=eMax}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2}if(e+eBias>=1)value+=rt/c;else value+=rt*Math.pow(2,1-eBias);if(value*c>=2){e++;c/=2}if(e+eBias>=eMax){m=0;e=eMax}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e+=eBias}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0}}for(;mLen>=8;buffer[offset+i]=255&m,i+=d,m/=256,mLen-=8);e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=255&e,i+=d,e/=256,eLen-=8);buffer[offset+i-d]|=128*s}},function(module,exports){var isArray=Array.isArray;var str=Object.prototype.toString;module.exports=isArray||function(val){return!!val&&"[object Array]"==str.call(val)}},function(module,exports,__webpack_require__){var getPathInfo=__webpack_require__(37);module.exports=function(path,obj){var info=getPathInfo(path,obj);return info.value}},function(module,exports,__webpack_require__){function parsePath(path){var str=path.replace(/([^\\])\[/g,"$1.["),parts=str.match(/(\\\.|[^.]+?)+/g);return parts.map(function(value){var re=/^\[(\d+)\]$/,mArr=re.exec(value);if(mArr)return{i:parseFloat(mArr[1])};else return{p:value.replace(/\\([.\[\]])/g,"$1")}})}function _getPathValue(parsed,obj,index){var tmp=obj,res;index=void 0===index?parsed.length:index;for(var i=0,l=index;l>i;i++){var part=parsed[i];if(tmp){if("undefined"!=typeof part.p)tmp=tmp[part.p];else if("undefined"!=typeof part.i)tmp=tmp[part.i];if(i==l-1)res=tmp}else res=void 0}return res}var hasProperty=__webpack_require__(38);module.exports=function getPathInfo(path,obj){var parsed=parsePath(path),last=parsed[parsed.length-1];var info={parent:parsed.length>1?_getPathValue(parsed,obj,parsed.length-1):obj,name:last.p||last.i,value:_getPathValue(parsed,obj)};info.exists=hasProperty(info.name,info.parent);return info}},function(module,exports,__webpack_require__){var type=__webpack_require__(16);var literals={number:Number,string:String};module.exports=function hasProperty(name,obj){var ot=type(obj);if("null"===ot||"undefined"===ot)return false;if(literals[ot]&&"object"!=typeof obj)obj=new literals[ot](obj);return name in obj}},function(module,exports,__webpack_require__){var config=__webpack_require__(26);var flag=__webpack_require__(15);module.exports=function(ctx,name,getter){Object.defineProperty(ctx,name,{get:function addProperty(){var old_ssfi=flag(this,"ssfi");if(old_ssfi&&false===config.includeStack)flag(this,"ssfi",addProperty);var result=getter.call(this);return void 0===result?this:result},configurable:true})}},function(module,exports,__webpack_require__){var config=__webpack_require__(26);var flag=__webpack_require__(15);module.exports=function(ctx,name,method){ctx[name]=function(){var old_ssfi=flag(this,"ssfi");if(old_ssfi&&false===config.includeStack)flag(this,"ssfi",ctx[name]);var result=method.apply(this,arguments);return void 0===result?this:result}}},function(module,exports){module.exports=function(ctx,name,getter){var _get=Object.getOwnPropertyDescriptor(ctx,name),_super=function(){};if(_get&&"function"==typeof _get.get)_super=_get.get;Object.defineProperty(ctx,name,{get:function(){var result=getter(_super).call(this);return void 0===result?this:result},configurable:true})}},function(module,exports){module.exports=function(ctx,name,method){var _method=ctx[name],_super=function(){return this};if(_method&&"function"==typeof _method)_super=_method;ctx[name]=function(){var result=method(_super).apply(this,arguments);return void 0===result?this:result}}},function(module,exports,__webpack_require__){var transferFlags=__webpack_require__(27);var flag=__webpack_require__(15);var config=__webpack_require__(26);var hasProtoSupport="__proto__"in Object;var excludeNames=/^(?:length|name|arguments|caller)$/;var call=Function.prototype.call,apply=Function.prototype.apply;module.exports=function(ctx,name,method,chainingBehavior){if("function"!=typeof chainingBehavior)chainingBehavior=function(){};var chainableBehavior={method:method,chainingBehavior:chainingBehavior};if(!ctx.__methods)ctx.__methods={};ctx.__methods[name]=chainableBehavior;Object.defineProperty(ctx,name,{get:function(){chainableBehavior.chainingBehavior.call(this);var assert=function assert(){var old_ssfi=flag(this,"ssfi");if(old_ssfi&&false===config.includeStack)flag(this,"ssfi",assert);var result=chainableBehavior.method.apply(this,arguments);return void 0===result?this:result};if(hasProtoSupport){var prototype=assert.__proto__=Object.create(this);prototype.call=call;prototype.apply=apply}else{var asserterNames=Object.getOwnPropertyNames(ctx);asserterNames.forEach(function(asserterName){if(!excludeNames.test(asserterName)){var pd=Object.getOwnPropertyDescriptor(ctx,asserterName);Object.defineProperty(assert,asserterName,pd)}})}transferFlags(this,assert);return assert},configurable:true})}},function(module,exports){module.exports=function(ctx,name,method,chainingBehavior){var chainableBehavior=ctx.__methods[name];var _chainingBehavior=chainableBehavior.chainingBehavior;chainableBehavior.chainingBehavior=function(){var result=chainingBehavior(_chainingBehavior).call(this);return void 0===result?this:result};var _method=chainableBehavior.method;chainableBehavior.method=function(){var result=method(_method).apply(this,arguments);return void 0===result?this:result}}},function(module,exports,__webpack_require__){var config=__webpack_require__(26);module.exports=function(_chai,util){function Assertion(obj,msg,stack){flag(this,"ssfi",stack||arguments.callee);flag(this,"object",obj);flag(this,"message",msg)}var AssertionError=_chai.AssertionError,flag=util.flag;_chai.Assertion=Assertion;Object.defineProperty(Assertion,"includeStack",{get:function(){console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead.");return config.includeStack},set:function(value){console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead.");config.includeStack=value}});Object.defineProperty(Assertion,"showDiff",{get:function(){console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead.");return config.showDiff},set:function(value){console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead.");config.showDiff=value}});Assertion.addProperty=function(name,fn){util.addProperty(this.prototype,name,fn)};Assertion.addMethod=function(name,fn){util.addMethod(this.prototype,name,fn)};Assertion.addChainableMethod=function(name,fn,chainingBehavior){util.addChainableMethod(this.prototype,name,fn,chainingBehavior)};Assertion.overwriteProperty=function(name,fn){util.overwriteProperty(this.prototype,name,fn)};Assertion.overwriteMethod=function(name,fn){util.overwriteMethod(this.prototype,name,fn)};Assertion.overwriteChainableMethod=function(name,fn,chainingBehavior){util.overwriteChainableMethod(this.prototype,name,fn,chainingBehavior)};Assertion.prototype.assert=function(expr,msg,negateMsg,expected,_actual,showDiff){var ok=util.test(this,arguments);if(true!==showDiff)showDiff=false;if(true!==config.showDiff)showDiff=false;if(!ok){var msg=util.getMessage(this,arguments),actual=util.getActual(this,arguments);throw new AssertionError(msg,{actual:actual,expected:expected,showDiff:showDiff},config.includeStack?this.assert:flag(this,"ssfi"))}};Object.defineProperty(Assertion.prototype,"_obj",{get:function(){return flag(this,"object")},set:function(val){flag(this,"object",val)}})}},function(module,exports){module.exports=function(chai,_){function an(type,msg){if(msg)flag(this,"message",msg);type=type.toLowerCase();var obj=flag(this,"object"),article=~["a","e","i","o","u"].indexOf(type.charAt(0))?"an ":"a ";this.assert(type===_.type(obj),"expected #{this} to be "+article+type,"expected #{this} not to be "+article+type)}function includeChainingBehavior(){flag(this,"contains",true)}function include(val,msg){_.expectTypes(this,["array","object","string"]);if(msg)flag(this,"message",msg);var obj=flag(this,"object");var expected=false;if("array"===_.type(obj)&&"object"===_.type(val)){for(var i in obj)if(_.eql(obj[i],val)){expected=true;break}}else if("object"===_.type(val)){if(!flag(this,"negate")){for(var k in val)new Assertion(obj).property(k,val[k]);return}var subset={};for(var k in val)subset[k]=obj[k];expected=_.eql(subset,val)}else expected=void 0!=obj&&~obj.indexOf(val);this.assert(expected,"expected #{this} to include "+_.inspect(val),"expected #{this} to not include "+_.inspect(val))}function checkArguments(){var obj=flag(this,"object"),type=Object.prototype.toString.call(obj);this.assert("[object Arguments]"===type,"expected #{this} to be arguments but got "+type,"expected #{this} to not be arguments")}function assertEqual(val,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");if(flag(this,"deep"))return this.eql(val);else this.assert(val===obj,"expected #{this} to equal #{exp}","expected #{this} to not equal #{exp}",val,this._obj,true)}function assertEql(obj,msg){if(msg)flag(this,"message",msg);this.assert(_.eql(obj,flag(this,"object")),"expected #{this} to deeply equal #{exp}","expected #{this} to not deeply equal #{exp}",obj,this._obj,true)}function assertAbove(n,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");if(flag(this,"doLength")){new Assertion(obj,msg).to.have.property("length");var len=obj.length;this.assert(len>n,"expected #{this} to have a length above #{exp} but got #{act}","expected #{this} to not have a length above #{exp}",n,len)}else this.assert(obj>n,"expected #{this} to be above "+n,"expected #{this} to be at most "+n)}function assertLeast(n,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");if(flag(this,"doLength")){new Assertion(obj,msg).to.have.property("length");var len=obj.length;this.assert(len>=n,"expected #{this} to have a length at least #{exp} but got #{act}","expected #{this} to have a length below #{exp}",n,len)}else this.assert(obj>=n,"expected #{this} to be at least "+n,"expected #{this} to be below "+n)}function assertBelow(n,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");if(flag(this,"doLength")){new Assertion(obj,msg).to.have.property("length");var len=obj.length;this.assert(n>len,"expected #{this} to have a length below #{exp} but got #{act}","expected #{this} to not have a length below #{exp}",n,len)}else this.assert(n>obj,"expected #{this} to be below "+n,"expected #{this} to be at least "+n)}function assertMost(n,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");if(flag(this,"doLength")){new Assertion(obj,msg).to.have.property("length");var len=obj.length;this.assert(n>=len,"expected #{this} to have a length at most #{exp} but got #{act}","expected #{this} to have a length above #{exp}",n,len)}else this.assert(n>=obj,"expected #{this} to be at most "+n,"expected #{this} to be above "+n)}function assertInstanceOf(constructor,msg){if(msg)flag(this,"message",msg);var name=_.getName(constructor);this.assert(flag(this,"object")instanceof constructor,"expected #{this} to be an instance of "+name,"expected #{this} to not be an instance of "+name)}function assertOwnProperty(name,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");this.assert(obj.hasOwnProperty(name),"expected #{this} to have own property "+_.inspect(name),"expected #{this} to not have own property "+_.inspect(name))}function assertOwnPropertyDescriptor(name,descriptor,msg){if("string"==typeof descriptor){msg=descriptor;descriptor=null}if(msg)flag(this,"message",msg);var obj=flag(this,"object");var actualDescriptor=Object.getOwnPropertyDescriptor(Object(obj),name);if(actualDescriptor&&descriptor)this.assert(_.eql(descriptor,actualDescriptor),"expected the own property descriptor for "+_.inspect(name)+" on #{this} to match "+_.inspect(descriptor)+", got "+_.inspect(actualDescriptor),"expected the own property descriptor for "+_.inspect(name)+" on #{this} to not match "+_.inspect(descriptor),descriptor,actualDescriptor,true);else this.assert(actualDescriptor,"expected #{this} to have an own property descriptor for "+_.inspect(name),"expected #{this} to not have an own property descriptor for "+_.inspect(name));flag(this,"object",actualDescriptor)}function assertLengthChain(){flag(this,"doLength",true)}function assertLength(n,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");new Assertion(obj,msg).to.have.property("length");var len=obj.length;this.assert(len==n,"expected #{this} to have a length of #{exp} but got #{act}","expected #{this} to not have a length of #{act}",n,len)}function assertMatch(re,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");this.assert(re.exec(obj),"expected #{this} to match "+re,"expected #{this} not to match "+re)}function assertKeys(keys){var obj=flag(this,"object"),str,ok=true,mixedArgsMsg="keys must be given single argument of Array|Object|String, or multiple String arguments";switch(_.type(keys)){case"array":if(arguments.length>1)throw new Error(mixedArgsMsg);break;case"object":if(arguments.length>1)throw new Error(mixedArgsMsg);keys=Object.keys(keys);break;default:keys=Array.prototype.slice.call(arguments)}if(!keys.length)throw new Error("keys required");var actual=Object.keys(obj),expected=keys,len=keys.length,any=flag(this,"any"),all=flag(this,"all");if(!any&&!all)all=true;if(any){var intersection=expected.filter(function(key){return~actual.indexOf(key)});ok=intersection.length>0}if(all){ok=keys.every(function(key){return~actual.indexOf(key)});if(!flag(this,"negate")&&!flag(this,"contains"))ok=ok&&keys.length==actual.length}if(len>1){keys=keys.map(function(key){return _.inspect(key)});var last=keys.pop();if(all)str=keys.join(", ")+", and "+last;if(any)str=keys.join(", ")+", or "+last}else str=_.inspect(keys[0]);str=(len>1?"keys ":"key ")+str;str=(flag(this,"contains")?"contain ":"have ")+str;this.assert(ok,"expected #{this} to "+str,"expected #{this} to not "+str,expected.slice(0).sort(),actual.sort(),true)}function assertThrows(constructor,errMsg,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");new Assertion(obj,msg).is.a("function");var thrown=false,desiredError=null,name=null,thrownError=null;if(0===arguments.length){errMsg=null;constructor=null}else if(constructor&&(constructor instanceof RegExp||"string"==typeof constructor)){errMsg=constructor;constructor=null}else if(constructor&&constructor instanceof Error){desiredError=constructor;constructor=null;errMsg=null}else if("function"==typeof constructor){name=constructor.prototype.name;if(!name||"Error"===name&&constructor!==Error)name=constructor.name||(new constructor).name}else constructor=null;try{obj()}catch(err){if(desiredError){this.assert(err===desiredError,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp}",desiredError instanceof Error?desiredError.toString():desiredError,err instanceof Error?err.toString():err);flag(this,"object",err);return this}if(constructor){this.assert(err instanceof constructor,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp} but #{act} was thrown",name,err instanceof Error?err.toString():err);if(!errMsg){flag(this,"object",err);return this}}var message="error"===_.type(err)&&"message"in err?err.message:""+err;if(null!=message&&errMsg&&errMsg instanceof RegExp){this.assert(errMsg.exec(message),"expected #{this} to throw error matching #{exp} but got #{act}","expected #{this} to throw error not matching #{exp}",errMsg,message);flag(this,"object",err);return this}else if(null!=message&&errMsg&&"string"==typeof errMsg){this.assert(~message.indexOf(errMsg),"expected #{this} to throw error including #{exp} but got #{act}","expected #{this} to throw error not including #{act}",errMsg,message);flag(this,"object",err);return this}else{thrown=true;thrownError=err}}var actuallyGot="",expectedThrown=null!==name?name:desiredError?"#{exp}":"an error";if(thrown)actuallyGot=" but #{act} was thrown";this.assert(true===thrown,"expected #{this} to throw "+expectedThrown+actuallyGot,"expected #{this} to not throw "+expectedThrown+actuallyGot,desiredError instanceof Error?desiredError.toString():desiredError,thrownError instanceof Error?thrownError.toString():thrownError);flag(this,"object",thrownError)}function respondTo(method,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object"),itself=flag(this,"itself"),context="function"===_.type(obj)&&!itself?obj.prototype[method]:obj[method];this.assert("function"==typeof context,"expected #{this} to respond to "+_.inspect(method),"expected #{this} to not respond to "+_.inspect(method))}function satisfy(matcher,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");var result=matcher(obj);this.assert(result,"expected #{this} to satisfy "+_.objDisplay(matcher),"expected #{this} to not satisfy"+_.objDisplay(matcher),this.negate?false:true,result)}function closeTo(expected,delta,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");new Assertion(obj,msg).is.a("number");if("number"!==_.type(expected)||"number"!==_.type(delta))throw new Error("the arguments to closeTo or approximately must be numbers");this.assert(Math.abs(obj-expected)<=delta,"expected #{this} to be close to "+expected+" +/- "+delta,"expected #{this} not to be close to "+expected+" +/- "+delta)}function isSubsetOf(subset,superset,cmp){return subset.every(function(elem){if(!cmp)return-1!==superset.indexOf(elem);return superset.some(function(elem2){return cmp(elem,elem2)})})}function oneOf(list,msg){if(msg)flag(this,"message",msg);var expected=flag(this,"object");new Assertion(list).to.be.an("array");this.assert(list.indexOf(expected)>-1,"expected #{this} to be one of #{exp}","expected #{this} to not be one of #{exp}",list,expected)}function assertChanges(object,prop,msg){if(msg)flag(this,"message",msg);var fn=flag(this,"object");new Assertion(object,msg).to.have.property(prop);new Assertion(fn).is.a("function");var initial=object[prop];fn();this.assert(initial!==object[prop],"expected ."+prop+" to change","expected ."+prop+" to not change")}function assertIncreases(object,prop,msg){if(msg)flag(this,"message",msg);var fn=flag(this,"object");new Assertion(object,msg).to.have.property(prop);new Assertion(fn).is.a("function");var initial=object[prop];fn();this.assert(object[prop]-initial>0,"expected ."+prop+" to increase","expected ."+prop+" to not increase")}function assertDecreases(object,prop,msg){if(msg)flag(this,"message",msg);var fn=flag(this,"object");new Assertion(object,msg).to.have.property(prop);new Assertion(fn).is.a("function");var initial=object[prop];fn();this.assert(object[prop]-initial<0,"expected ."+prop+" to decrease","expected ."+prop+" to not decrease")}var Assertion=chai.Assertion,toString=Object.prototype.toString,flag=_.flag;["to","be","been","is","and","has","have","with","that","which","at","of","same"].forEach(function(chain){Assertion.addProperty(chain,function(){return this})});Assertion.addProperty("not",function(){flag(this,"negate",true)});Assertion.addProperty("deep",function(){flag(this,"deep",true)});Assertion.addProperty("any",function(){flag(this,"any",true);flag(this,"all",false)});Assertion.addProperty("all",function(){flag(this,"all",true);flag(this,"any",false)});Assertion.addChainableMethod("an",an);Assertion.addChainableMethod("a",an);Assertion.addChainableMethod("include",include,includeChainingBehavior);Assertion.addChainableMethod("contain",include,includeChainingBehavior);Assertion.addChainableMethod("contains",include,includeChainingBehavior);Assertion.addChainableMethod("includes",include,includeChainingBehavior);Assertion.addProperty("ok",function(){this.assert(flag(this,"object"),"expected #{this} to be truthy","expected #{this} to be falsy")});Assertion.addProperty("true",function(){this.assert(true===flag(this,"object"),"expected #{this} to be true","expected #{this} to be false",this.negate?false:true)});Assertion.addProperty("false",function(){this.assert(false===flag(this,"object"),"expected #{this} to be false","expected #{this} to be true",this.negate?true:false)});Assertion.addProperty("null",function(){this.assert(null===flag(this,"object"),"expected #{this} to be null","expected #{this} not to be null")});Assertion.addProperty("undefined",function(){this.assert(void 0===flag(this,"object"),"expected #{this} to be undefined","expected #{this} not to be undefined")});Assertion.addProperty("NaN",function(){this.assert(isNaN(flag(this,"object")),"expected #{this} to be NaN","expected #{this} not to be NaN")});Assertion.addProperty("exist",function(){this.assert(null!=flag(this,"object"),"expected #{this} to exist","expected #{this} to not exist")});Assertion.addProperty("empty",function(){var obj=flag(this,"object"),expected=obj;if(Array.isArray(obj)||"string"==typeof object)expected=obj.length;else if("object"==typeof obj)expected=Object.keys(obj).length;this.assert(!expected,"expected #{this} to be empty","expected #{this} not to be empty")});Assertion.addProperty("arguments",checkArguments);Assertion.addProperty("Arguments",checkArguments);Assertion.addMethod("equal",assertEqual);Assertion.addMethod("equals",assertEqual);Assertion.addMethod("eq",assertEqual);Assertion.addMethod("eql",assertEql);Assertion.addMethod("eqls",assertEql);Assertion.addMethod("above",assertAbove);Assertion.addMethod("gt",assertAbove);Assertion.addMethod("greaterThan",assertAbove);Assertion.addMethod("least",assertLeast);Assertion.addMethod("gte",assertLeast);Assertion.addMethod("below",assertBelow);Assertion.addMethod("lt",assertBelow);Assertion.addMethod("lessThan",assertBelow);Assertion.addMethod("most",assertMost);Assertion.addMethod("lte",assertMost);Assertion.addMethod("within",function(start,finish,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object"),range=start+".."+finish;if(flag(this,"doLength")){new Assertion(obj,msg).to.have.property("length");var len=obj.length;this.assert(len>=start&&finish>=len,"expected #{this} to have a length within "+range,"expected #{this} to not have a length within "+range)}else this.assert(obj>=start&&finish>=obj,"expected #{this} to be within "+range,"expected #{this} to not be within "+range)});Assertion.addMethod("instanceof",assertInstanceOf);Assertion.addMethod("instanceOf",assertInstanceOf);Assertion.addMethod("property",function(name,val,msg){if(msg)flag(this,"message",msg);var isDeep=!!flag(this,"deep"),descriptor=isDeep?"deep property ":"property ",negate=flag(this,"negate"),obj=flag(this,"object"),pathInfo=isDeep?_.getPathInfo(name,obj):null,hasProperty=isDeep?pathInfo.exists:_.hasProperty(name,obj),value=isDeep?pathInfo.value:obj[name];if(negate&&arguments.length>1){if(void 0===value){msg=null!=msg?msg+": ":"";throw new Error(msg+_.inspect(obj)+" has no "+descriptor+_.inspect(name))}}else this.assert(hasProperty,"expected #{this} to have a "+descriptor+_.inspect(name),"expected #{this} to not have "+descriptor+_.inspect(name));if(arguments.length>1)this.assert(val===value,"expected #{this} to have a "+descriptor+_.inspect(name)+" of #{exp}, but got #{act}","expected #{this} to not have a "+descriptor+_.inspect(name)+" of #{act}",val,value);flag(this,"object",value)});Assertion.addMethod("ownProperty",assertOwnProperty);Assertion.addMethod("haveOwnProperty",assertOwnProperty);Assertion.addMethod("ownPropertyDescriptor",assertOwnPropertyDescriptor);Assertion.addMethod("haveOwnPropertyDescriptor",assertOwnPropertyDescriptor);Assertion.addChainableMethod("length",assertLength,assertLengthChain);Assertion.addMethod("lengthOf",assertLength);Assertion.addMethod("match",assertMatch);Assertion.addMethod("matches",assertMatch);
Assertion.addMethod("string",function(str,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");new Assertion(obj,msg).is.a("string");this.assert(~obj.indexOf(str),"expected #{this} to contain "+_.inspect(str),"expected #{this} to not contain "+_.inspect(str))});Assertion.addMethod("keys",assertKeys);Assertion.addMethod("key",assertKeys);Assertion.addMethod("throw",assertThrows);Assertion.addMethod("throws",assertThrows);Assertion.addMethod("Throw",assertThrows);Assertion.addMethod("respondTo",respondTo);Assertion.addMethod("respondsTo",respondTo);Assertion.addProperty("itself",function(){flag(this,"itself",true)});Assertion.addMethod("satisfy",satisfy);Assertion.addMethod("satisfies",satisfy);Assertion.addMethod("closeTo",closeTo);Assertion.addMethod("approximately",closeTo);Assertion.addMethod("members",function(subset,msg){if(msg)flag(this,"message",msg);var obj=flag(this,"object");new Assertion(obj).to.be.an("array");new Assertion(subset).to.be.an("array");var cmp=flag(this,"deep")?_.eql:void 0;if(flag(this,"contains"))return this.assert(isSubsetOf(subset,obj,cmp),"expected #{this} to be a superset of #{act}","expected #{this} to not be a superset of #{act}",obj,subset);this.assert(isSubsetOf(obj,subset,cmp)&&isSubsetOf(subset,obj,cmp),"expected #{this} to have the same members as #{act}","expected #{this} to not have the same members as #{act}",obj,subset)});Assertion.addMethod("oneOf",oneOf);Assertion.addChainableMethod("change",assertChanges);Assertion.addChainableMethod("changes",assertChanges);Assertion.addChainableMethod("increase",assertIncreases);Assertion.addChainableMethod("increases",assertIncreases);Assertion.addChainableMethod("decrease",assertDecreases);Assertion.addChainableMethod("decreases",assertDecreases);Assertion.addProperty("extensible",function(){var obj=flag(this,"object");var isExtensible;try{isExtensible=Object.isExtensible(obj)}catch(err){if(err instanceof TypeError)isExtensible=false;else throw err}this.assert(isExtensible,"expected #{this} to be extensible","expected #{this} to not be extensible")});Assertion.addProperty("sealed",function(){var obj=flag(this,"object");var isSealed;try{isSealed=Object.isSealed(obj)}catch(err){if(err instanceof TypeError)isSealed=true;else throw err}this.assert(isSealed,"expected #{this} to be sealed","expected #{this} to not be sealed")});Assertion.addProperty("frozen",function(){var obj=flag(this,"object");var isFrozen;try{isFrozen=Object.isFrozen(obj)}catch(err){if(err instanceof TypeError)isFrozen=true;else throw err}this.assert(isFrozen,"expected #{this} to be frozen","expected #{this} to not be frozen")})}},function(module,exports){module.exports=function(chai,util){chai.expect=function(val,message){return new chai.Assertion(val,message)};chai.expect.fail=function(actual,expected,message,operator){message=message||"expect.fail()";throw new chai.AssertionError(message,{actual:actual,expected:expected,operator:operator},chai.expect.fail)}}},function(module,exports){module.exports=function(chai,util){function loadShould(){function shouldGetter(){if(this instanceof String||this instanceof Number||this instanceof Boolean)return new Assertion(this.valueOf(),null,shouldGetter);return new Assertion(this,null,shouldGetter)}function shouldSetter(value){Object.defineProperty(this,"should",{value:value,enumerable:true,configurable:true,writable:true})}Object.defineProperty(Object.prototype,"should",{set:shouldSetter,get:shouldGetter,configurable:true});var should={};should.fail=function(actual,expected,message,operator){message=message||"should.fail()";throw new chai.AssertionError(message,{actual:actual,expected:expected,operator:operator},should.fail)};should.equal=function(val1,val2,msg){new Assertion(val1,msg).to.equal(val2)};should.Throw=function(fn,errt,errs,msg){new Assertion(fn,msg).to.Throw(errt,errs)};should.exist=function(val,msg){new Assertion(val,msg).to.exist};should.not={};should.not.equal=function(val1,val2,msg){new Assertion(val1,msg).to.not.equal(val2)};should.not.Throw=function(fn,errt,errs,msg){new Assertion(fn,msg).to.not.Throw(errt,errs)};should.not.exist=function(val,msg){new Assertion(val,msg).to.not.exist};should["throw"]=should.Throw;should.not["throw"]=should.not.Throw;return should}var Assertion=chai.Assertion;chai.should=loadShould;chai.Should=loadShould}},function(module,exports){module.exports=function(chai,util){var Assertion=chai.Assertion,flag=util.flag;var assert=chai.assert=function(express,errmsg){var test=new Assertion(null,null,chai.assert);test.assert(express,errmsg,"[ negation message unavailable ]")};assert.fail=function(actual,expected,message,operator){message=message||"assert.fail()";throw new chai.AssertionError(message,{actual:actual,expected:expected,operator:operator},assert.fail)};assert.isOk=function(val,msg){new Assertion(val,msg).is.ok};assert.isNotOk=function(val,msg){new Assertion(val,msg).is.not.ok};assert.equal=function(act,exp,msg){var test=new Assertion(act,msg,assert.equal);test.assert(exp==flag(test,"object"),"expected #{this} to equal #{exp}","expected #{this} to not equal #{act}",exp,act)};assert.notEqual=function(act,exp,msg){var test=new Assertion(act,msg,assert.notEqual);test.assert(exp!=flag(test,"object"),"expected #{this} to not equal #{exp}","expected #{this} to equal #{act}",exp,act)};assert.strictEqual=function(act,exp,msg){new Assertion(act,msg).to.equal(exp)};assert.notStrictEqual=function(act,exp,msg){new Assertion(act,msg).to.not.equal(exp)};assert.deepEqual=function(act,exp,msg){new Assertion(act,msg).to.eql(exp)};assert.notDeepEqual=function(act,exp,msg){new Assertion(act,msg).to.not.eql(exp)};assert.isAbove=function(val,abv,msg){new Assertion(val,msg).to.be.above(abv)};assert.isAtLeast=function(val,atlst,msg){new Assertion(val,msg).to.be.least(atlst)};assert.isBelow=function(val,blw,msg){new Assertion(val,msg).to.be.below(blw)};assert.isAtMost=function(val,atmst,msg){new Assertion(val,msg).to.be.most(atmst)};assert.isTrue=function(val,msg){new Assertion(val,msg).is["true"]};assert.isNotTrue=function(val,msg){new Assertion(val,msg).to.not.equal(true)};assert.isFalse=function(val,msg){new Assertion(val,msg).is["false"]};assert.isNotFalse=function(val,msg){new Assertion(val,msg).to.not.equal(false)};assert.isNull=function(val,msg){new Assertion(val,msg).to.equal(null)};assert.isNotNull=function(val,msg){new Assertion(val,msg).to.not.equal(null)};assert.isNaN=function(val,msg){new Assertion(val,msg).to.be.NaN};assert.isNotNaN=function(val,msg){new Assertion(val,msg).not.to.be.NaN};assert.isUndefined=function(val,msg){new Assertion(val,msg).to.equal(void 0)};assert.isDefined=function(val,msg){new Assertion(val,msg).to.not.equal(void 0)};assert.isFunction=function(val,msg){new Assertion(val,msg).to.be.a("function")};assert.isNotFunction=function(val,msg){new Assertion(val,msg).to.not.be.a("function")};assert.isObject=function(val,msg){new Assertion(val,msg).to.be.a("object")};assert.isNotObject=function(val,msg){new Assertion(val,msg).to.not.be.a("object")};assert.isArray=function(val,msg){new Assertion(val,msg).to.be.an("array")};assert.isNotArray=function(val,msg){new Assertion(val,msg).to.not.be.an("array")};assert.isString=function(val,msg){new Assertion(val,msg).to.be.a("string")};assert.isNotString=function(val,msg){new Assertion(val,msg).to.not.be.a("string")};assert.isNumber=function(val,msg){new Assertion(val,msg).to.be.a("number")};assert.isNotNumber=function(val,msg){new Assertion(val,msg).to.not.be.a("number")};assert.isBoolean=function(val,msg){new Assertion(val,msg).to.be.a("boolean")};assert.isNotBoolean=function(val,msg){new Assertion(val,msg).to.not.be.a("boolean")};assert.typeOf=function(val,type,msg){new Assertion(val,msg).to.be.a(type)};assert.notTypeOf=function(val,type,msg){new Assertion(val,msg).to.not.be.a(type)};assert.instanceOf=function(val,type,msg){new Assertion(val,msg).to.be.instanceOf(type)};assert.notInstanceOf=function(val,type,msg){new Assertion(val,msg).to.not.be.instanceOf(type)};assert.include=function(exp,inc,msg){new Assertion(exp,msg,assert.include).include(inc)};assert.notInclude=function(exp,inc,msg){new Assertion(exp,msg,assert.notInclude).not.include(inc)};assert.match=function(exp,re,msg){new Assertion(exp,msg).to.match(re)};assert.notMatch=function(exp,re,msg){new Assertion(exp,msg).to.not.match(re)};assert.property=function(obj,prop,msg){new Assertion(obj,msg).to.have.property(prop)};assert.notProperty=function(obj,prop,msg){new Assertion(obj,msg).to.not.have.property(prop)};assert.deepProperty=function(obj,prop,msg){new Assertion(obj,msg).to.have.deep.property(prop)};assert.notDeepProperty=function(obj,prop,msg){new Assertion(obj,msg).to.not.have.deep.property(prop)};assert.propertyVal=function(obj,prop,val,msg){new Assertion(obj,msg).to.have.property(prop,val)};assert.propertyNotVal=function(obj,prop,val,msg){new Assertion(obj,msg).to.not.have.property(prop,val)};assert.deepPropertyVal=function(obj,prop,val,msg){new Assertion(obj,msg).to.have.deep.property(prop,val)};assert.deepPropertyNotVal=function(obj,prop,val,msg){new Assertion(obj,msg).to.not.have.deep.property(prop,val)};assert.lengthOf=function(exp,len,msg){new Assertion(exp,msg).to.have.length(len)};assert["throws"]=function(fn,errt,errs,msg){if("string"==typeof errt||errt instanceof RegExp){errs=errt;errt=null}var assertErr=new Assertion(fn,msg).to["throw"](errt,errs);return flag(assertErr,"object")};assert.doesNotThrow=function(fn,type,msg){if("string"==typeof type){msg=type;type=null}new Assertion(fn,msg).to.not.Throw(type)};assert.operator=function(val,operator,val2,msg){var ok;switch(operator){case"==":ok=val==val2;break;case"===":ok=val===val2;break;case">":ok=val>val2;break;case">=":ok=val>=val2;break;case"<":ok=val2>val;break;case"<=":ok=val2>=val;break;case"!=":ok=val!=val2;break;case"!==":ok=val!==val2;break;default:throw new Error('Invalid operator "'+operator+'"')}var test=new Assertion(ok,msg);test.assert(true===flag(test,"object"),"expected "+util.inspect(val)+" to be "+operator+" "+util.inspect(val2),"expected "+util.inspect(val)+" to not be "+operator+" "+util.inspect(val2))};assert.closeTo=function(act,exp,delta,msg){new Assertion(act,msg).to.be.closeTo(exp,delta)};assert.approximately=function(act,exp,delta,msg){new Assertion(act,msg).to.be.approximately(exp,delta)};assert.sameMembers=function(set1,set2,msg){new Assertion(set1,msg).to.have.same.members(set2)};assert.sameDeepMembers=function(set1,set2,msg){new Assertion(set1,msg).to.have.same.deep.members(set2)};assert.includeMembers=function(superset,subset,msg){new Assertion(superset,msg).to.include.members(subset)};assert.oneOf=function(inList,list,msg){new Assertion(inList,msg).to.be.oneOf(list)};assert.changes=function(fn,obj,prop){new Assertion(fn).to.change(obj,prop)};assert.doesNotChange=function(fn,obj,prop){new Assertion(fn).to.not.change(obj,prop)};assert.increases=function(fn,obj,prop){new Assertion(fn).to.increase(obj,prop)};assert.doesNotIncrease=function(fn,obj,prop){new Assertion(fn).to.not.increase(obj,prop)};assert.decreases=function(fn,obj,prop){new Assertion(fn).to.decrease(obj,prop)};assert.doesNotDecrease=function(fn,obj,prop){new Assertion(fn).to.not.decrease(obj,prop)};assert.ifError=function(val){if(val)throw val};assert.isExtensible=function(obj,msg){new Assertion(obj,msg).to.be.extensible};assert.isNotExtensible=function(obj,msg){new Assertion(obj,msg).to.not.be.extensible};assert.isSealed=function(obj,msg){new Assertion(obj,msg).to.be.sealed};assert.isNotSealed=function(obj,msg){new Assertion(obj,msg).to.not.be.sealed};assert.isFrozen=function(obj,msg){new Assertion(obj,msg).to.be.frozen};assert.isNotFrozen=function(obj,msg){new Assertion(obj,msg).to.not.be.frozen};!function alias(name,as){assert[as]=assert[name];return alias}("isOk","ok")("isNotOk","notOk")("throws","throw")("throws","Throw")("isExtensible","extensible")("isNotExtensible","notExtensible")("isSealed","sealed")("isNotSealed","notSealed")("isFrozen","frozen")("isNotFrozen","notFrozen")}},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.PLAYER_ID=exports.APP_ID=void 0;var _vars=__webpack_require__(4);var _utils=__webpack_require__(5);var APP_ID=exports.APP_ID=(0,_utils.isDev)()?"33b3562a-d33b-42ee-88bc-1436e780311f":"7b6053e0-9911-4003-a0a4-a33e417ad663";var PLAYER_ID=exports.PLAYER_ID=(0,_utils.isDev)()?"b3481557-521d-4d01-be72-acf2c3f46eff":"15b23511-e0cf-489a-8682-7cf129cb4585"},function(module,exports,__webpack_require__,__webpack_module_template_argument_0__){module.exports=__webpack_require__(__webpack_module_template_argument_0__)}]));
//# sourceMappingURL=data:application/json;base64,