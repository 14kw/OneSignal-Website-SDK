!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}var installedModules={};__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";if("undefined"!=typeof OneSignal)var predefinedOneSignalPushes=OneSignal;__webpack_require__(1);if(predefinedOneSignalPushes)OneSignal._process_pushes(predefinedOneSignalPushes)},function(module,exports,__webpack_require__){(function(global){module.exports=global.OneSignal=__webpack_require__(2)}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){(function(fetch){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}var _vars=__webpack_require__(4);var _api=__webpack_require__(7);var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel);var _limitStore=__webpack_require__(8);var _limitStore2=_interopRequireDefault(_limitStore);__webpack_require__(9);var _events=__webpack_require__(10);var _bell=__webpack_require__(11);var _bell2=_interopRequireDefault(_bell);var _utils=__webpack_require__(5);var OneSignal={_VERSION:109013,_HOST_URL:_vars.HOST_URL,_app_id:null,_tagsToSendOnRegister:null,_notificationOpened_callback:null,_idsAvailable_callback:[],_defaultLaunchURL:null,_initOptions:null,_httpRegistration:false,_main_page_port:null,_isNotificationEnabledCallback:null,_subscriptionSet:true,_initOneSignalHttp:null,_sessionIframeAdded:false,_useHttpMode:null,_windowWidth:550,_windowHeight:480,_isNewVisitor:false,_isInitialized:false,bell:null,LOGGING:true,SERVICE_WORKER_UPDATER_PATH:"OneSignalSDKUpdaterWorker.js",SERVICE_WORKER_PATH:"OneSignalSDKWorker.js",SERVICE_WORKER_PARAM:{},_ensureDbInstance:function _ensureDbInstance(){return new Promise(function(resolve,reject){if(OneSignal._oneSignal_db)resolve(OneSignal._oneSignal_db);else{var request=indexedDB.open("ONE_SIGNAL_SDK_DB",1);request.onsuccess=function(event){var database=event.target.result;OneSignal._oneSignal_db=database;resolve(database)};request.onerror=function(event){_loglevel2["default"].error("Unable to open IndexedDB.",event);reject(event)};request.onupgradeneeded=function(event){_loglevel2["default"].debug("Rebuilding schema in IndexedDB...");var db=event.target.result;db.createObjectStore("Ids",{keyPath:"type"});db.createObjectStore("NotificationOpened",{keyPath:"url"});db.createObjectStore("Options",{keyPath:"key"})}}})},_getDbValue:function _getDbValue(table,key){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){var request=database.transaction(table).objectStore(table).get(key);request.onsuccess=function(event){if(request.result)OneSignal._triggerEvent_dbValueRetrieved(request.result);resolve(request.result)};request.onerror=function(event){reject(request.errorCode)}})["catch"](function(e){_loglevel2["default"].error(e)})})},_getDbValues:function _getDbValues(table){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){var jsonResult={};var cursor=database.transaction(table).objectStore(table).openCursor();cursor.onsuccess=function(event){var cursor=event.target.result;if(cursor){OneSignal._triggerEvent_dbValueRetrieved(cursor);jsonResult[cursor.key]=cursor.value.value;cursor["continue"]()}else resolve(jsonResult)};cursor.onerror=function(event){reject(cursor.errorCode)}})["catch"](function(e){_loglevel2["default"].error(e)})})},_putDbValue:function _putDbValue(table,value){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){database.transaction([table],"readwrite").objectStore(table).put(value);OneSignal._triggerEvent_dbValueSet(value);resolve(value)})["catch"](function(e){_loglevel2["default"].error(e)})})},_deleteDbValue:function _deleteDbValue(table,key){return new Promise(function(resolve,reject){OneSignal._ensureDbInstance().then(function(database){database.transaction([table],"readwrite").objectStore(table)["delete"](key);resolve(key)})["catch"](function(e){_loglevel2["default"].error(e)})})},_sendToOneSignalApi:function _sendToOneSignalApi(url,action,inData,callback,failedCallback){_loglevel2["default"].debug("Calling "+action+" "+(OneSignal._HOST_URL+url)+" with data:",inData);var contents={method:action};if(inData){contents.headers={"Content-type":"application/json;charset=UTF-8"};contents.body=JSON.stringify(inData)}fetch(OneSignal._HOST_URL+url,contents).then(function status(response){if(response.status>=200&&response.status<300)return Promise.resolve(response);else return Promise.reject(new Error(response.statusText))}).then(function status(response){return response.json()}).then(function(jsonData){if(null!=callback)callback(jsonData)})["catch"](function(e){_loglevel2["default"].error("OneSignal._sendToOneSignalApi() failed:",e);if(null!=failedCallback)failedCallback()})},_getLanguage:function _getLanguage(){return navigator.language?navigator.language.length>3?navigator.language.substring(0,2):navigator.language:"en"},_getPlayerId:function _getPlayerId(value,callback){if(value)callback(value);else OneSignal._getDbValue("Ids","userId").then(function _getPlayerId_gotUserId(result){if(result)callback(result.id);else callback(null)})["catch"](function(e){_loglevel2["default"].error(e)})},_getBrowserName:function _getBrowserName(){if(navigator.appVersion.match(/Chrome\/(.*?) /))return"Chrome";if(navigator.appVersion.match("Version/(.*) (Safari)"))return"Safari";if(navigator.userAgent.match(/Firefox\/([0-9]{2,}\.[0-9]{1,})/))return"Firefox";return""},_registerWithOneSignal:function _registerWithOneSignal(appId,registrationId,deviceType){OneSignal._getDbValue("Ids","userId").then(function _registerWithOneSignal_GotUserId(userIdResult){OneSignal._getNotificationTypes(function(notif_types){var requestUrl="players";var jsonData={app_id:appId,device_type:deviceType,language:OneSignal._getLanguage(),timezone:-60*(new Date).getTimezoneOffset(),device_model:navigator.platform+" "+OneSignal._getBrowserName(),device_os:(navigator.appVersion.match(/Chrome\/(.*?) /)||navigator.appVersion.match("Version/(.*) Safari")||navigator.userAgent.match(/Firefox\/([0-9]{2,}\.[0-9]{1,})/))[1],sdk:OneSignal._VERSION};if(userIdResult){requestUrl="players/"+userIdResult.id+"/on_session";jsonData.notification_types=notif_types}else if(1!=notif_types)jsonData.notification_types=notif_types;if(registrationId){jsonData.identifier=registrationId;OneSignal._putDbValue("Ids",{type:"registrationId",id:registrationId})}OneSignal._sendToOneSignalApi(requestUrl,"POST",jsonData,function registeredCallback(responseJSON){sessionStorage.setItem("ONE_SIGNAL_SESSION",true);if(responseJSON.id){OneSignal._putDbValue("Ids",{type:"userId",id:responseJSON.id});OneSignal._sendUnsentTags()}OneSignal._getPlayerId(responseJSON.id,function(userId){if(OneSignal._idsAvailable_callback.length>0)for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:userId,registrationId:registrationId})}if(OneSignal._httpRegistration){_loglevel2["default"].debug("Sending player Id and registrationId back to host page");_loglevel2["default"].debug(OneSignal._initOptions);var creator=opener||parent;OneSignal._safePostMessage(creator,{idsAvailable:{userId:userId,registrationId:registrationId}},OneSignal._initOptions.origin,null);if(opener)window.close()}})})})})["catch"](function(e){_loglevel2["default"].error(e)})},_sendUnsentTags:function _sendUnsentTags(){if(OneSignal._tagsToSendOnRegister){OneSignal.sendTags(OneSignal._tagsToSendOnRegister);OneSignal._tagsToSendOnRegister=null}},setDefaultNotificationUrl:function setDefaultNotificationUrl(url){OneSignal._putDbValue("Options",{key:"defaultUrl",value:url})},setDefaultIcon:function setDefaultIcon(icon){OneSignal._putDbValue("Options",{key:"defaultIcon",value:icon})},setDefaultTitle:function setDefaultTitle(title){OneSignal._putDbValue("Options",{key:"defaultTitle",value:title})},_visibilitychange:function _visibilitychange(){if("visible"==document.visibilityState){document.removeEventListener("visibilitychange",OneSignal._visibilitychange);OneSignal._sessionInit({})}},onCustomPromptClicked:function onCustomPromptClicked(event){_loglevel2["default"].debug("Event onesignal.prompt.custom.clicked:",event.detail);OneSignal._checkTrigger_eventSubscriptionChanged()},onNativePromptChanged:function onNativePromptChanged(event){_loglevel2["default"].debug("Event onesignal.prompt.native.permissionchanged:",event.detail);OneSignal._checkTrigger_eventSubscriptionChanged()},_onSubscriptionChanged:function _onSubscriptionChanged(event){_loglevel2["default"].debug("Event onesignal.subscription.changed:",event.detail);if(OneSignal._isNewVisitor&&true===event.detail)OneSignal._getDbValue("Ids","userId").then(function(result){var welcome_notification_opts=OneSignal._initOptions.welcomeNotification;var welcome_notification_disabled=void 0!==welcome_notification_opts&&true===welcome_notification_opts.disable;var title=void 0!==welcome_notification_opts&&void 0!==welcome_notification_opts.title&&null!==welcome_notification_opts.title?welcome_notification_opts.title:"";var message=void 0!==welcome_notification_opts&&void 0!==welcome_notification_opts.message&&null!==welcome_notification_opts.message&&welcome_notification_opts.message.length>0?welcome_notification_opts.message:"Thanks for subscribing!";if(!welcome_notification_disabled){_loglevel2["default"].debug("Because this user is a new site visitor, a welcome notification will be sent.");(0,_api.sendNotification)(OneSignal._app_id,[result.id],{en:title},{en:message});(0,_events.triggerEvent)("onesignal.actions.welcomenotificationsent",{title:title,message:message});OneSignal._isNewVisitor=false}})["catch"](function(e){_loglevel2["default"].error(e)});_limitStore2["default"].put("subscription.value",event.detail)},_onDbValueRetrieved:function _onDbValueRetrieved(event){_loglevel2["default"].debug("Event onesignal.db.retrieved:",event.detail)},_onDbValueSet:function _onDbValueSet(event){_loglevel2["default"].debug("Event onesignal.db.valueset:",event.detail);var info=event.detail;if("userId"===info.type){_limitStore2["default"].put("db.ids.userId",info.id);OneSignal._checkTrigger_eventSubscriptionChanged()}},_onInternalSubscriptionSet:function _onInternalSubscriptionSet(event){_loglevel2["default"].debug("Event onesignal.internal.subscriptionset:",event.detail);var newSubscriptionValue=event.detail;_limitStore2["default"].put("subscription.internal.value",newSubscriptionValue);OneSignal._checkTrigger_eventSubscriptionChanged()},_checkTrigger_eventSubscriptionChanged:function _checkTrigger_eventSubscriptionChanged(){_loglevel2["default"].debug("Called _checkTrigger_eventSubscriptionChanged().");var permissions=_limitStore2["default"].get("notification.permission");var lastPermission=permissions[permissions.length-2];var currentPermission=permissions[permissions.length-1];var ids=_limitStore2["default"].get("db.ids.userId");var lastId=ids[ids.length-2];var currentId=ids[ids.length-1];var subscriptionStates=_limitStore2["default"].get("subscription.internal.value");var lastSubscriptionState=subscriptionStates[subscriptionStates.length-2];var currentSubscriptionState=subscriptionStates[subscriptionStates.length-1];var newSubscriptionState="unchanged";if(("default"===lastPermission||"denied"===lastPermission||null===lastPermission)&&"granted"===currentPermission&&null!==currentId&&true===currentSubscriptionState||false===lastSubscriptionState&&true===currentSubscriptionState&&null!=currentId&&"granted"===currentPermission)newSubscriptionState=true;if("denied"!==lastPermission&&"denied"===currentPermission||"granted"===lastPermission&&"granted"!==currentPermission||null!==lastId&&null===currentId||false!==lastSubscriptionState&&false===currentSubscriptionState)newSubscriptionState=false;if("unchanged"!==newSubscriptionState){var lastTriggerTimes=_limitStore2["default"].put("event.subscriptionchanged.lastriggered",Date.now());var currentTime=lastTriggerTimes[lastTriggerTimes.length-1];var lastTriggerTime=lastTriggerTimes[lastTriggerTimes.length-2];var elapsedTimeSeconds=(currentTime-lastTriggerTime)/1e3;var lastEventStates=_limitStore2["default"].put("event.subscriptionchanged.laststates",newSubscriptionState);var currentState=lastEventStates[lastEventStates.length-1];var lastState=lastEventStates[lastEventStates.length-2];var shouldNotTriggerEvent=null!=lastTriggerTime&&1>=elapsedTimeSeconds||currentState===lastState;if(false===shouldNotTriggerEvent)OneSignal._triggerEvent_subscriptionChanged(newSubscriptionState)}},init:function init(options){if(OneSignal._isInitialized){_loglevel2["default"].warn("OneSignal.init() was called again, but the SDK is already initialized. Skipping initialization.");return}OneSignal._initOptions=options;if(OneSignal.LOGGING)_loglevel2["default"].enableAll();else _loglevel2["default"].setLevel("error");_loglevel2["default"].info("OneSignal Web SDK loaded (version "+OneSignal._VERSION+").");if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("Your browser does not support push notifications.");return}if(navigator.permissions&&!((0,_utils.isBrowserFirefox)()&&(0,_utils.getFirefoxVersion)()<=45)){OneSignal._usingNativePermissionHook=true;var currentNotificationPermission=OneSignal._getNotificationPermission();_limitStore2["default"].put("notification.permission",currentNotificationPermission);navigator.permissions.query({name:"notifications"}).then(function(permissionStatus){permissionStatus.onchange=function(){var recentPermissions=_limitStore2["default"].get("notification.permission");var permissionBeforePrompt=recentPermissions[0];OneSignal._triggerEvent_nativePromptPermissionChanged(permissionBeforePrompt)}})["catch"](function(e){_loglevel2["default"].error(e)})}else{var currentNotificationPermission=OneSignal._getNotificationPermission();_limitStore2["default"].put("notification.permission",currentNotificationPermission)}OneSignal._getDbValue("Ids","userId").then(function(result){if(void 0===result)OneSignal._isNewVisitor=true;var storeValue=result?result.id:null;_limitStore2["default"].put("db.ids.userId",storeValue)});OneSignal._getSubscription(function(currentSubscription){_limitStore2["default"].put("subscription.internal.value",currentSubscription)});window.addEventListener("onesignal.prompt.custom.clicked",OneSignal.onCustomPromptClicked);window.addEventListener("onesignal.prompt.native.permissionchanged",OneSignal.onNativePromptChanged);window.addEventListener("onesignal.subscription.changed",OneSignal._onSubscriptionChanged);window.addEventListener("onesignal.db.valueretrieved",OneSignal._onDbValueRetrieved);window.addEventListener("onesignal.db.valueset",OneSignal._onDbValueSet);window.addEventListener("onesignal.db.valueset",OneSignal._onDbValueSet);window.addEventListener("onesignal.internal.subscriptionset",OneSignal._onInternalSubscriptionSet);OneSignal._useHttpMode=!(0,_utils.isSupportedSafari)()&&(!OneSignal._supportsDirectPermission()||OneSignal._initOptions.subdomainName);if(OneSignal._useHttpMode)OneSignal._initOneSignalHttp="https://"+OneSignal._initOptions.subdomainName+".onesignal.com/sdks/initOneSignalHttp";else OneSignal._initOneSignalHttp="https://onesignal.com/sdks/initOneSignalHttps";if(true)OneSignal._initOneSignalHttp=_vars.DEV_HOST+"/dev_sdks/initOneSignalHttp";if((0,_utils.isSupportedSafari)()&&"undefined"==typeof window.fetch){var s=document.createElement("script");s.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/fetch/0.9.0/fetch.js");document.head.appendChild(s)}if("complete"===document.readyState)OneSignal._internalInit();else window.addEventListener("load",OneSignal._internalInit);if(true&&(0,_utils.isBrowserEnv)()){_loglevel2["default"].info("Showing bell.");OneSignal.bell=new _bell2["default"]({size:"large",position:"bottom-right",theme:"default"});OneSignal.bell.create()}OneSignal._isInitialized=true},_internalInit:function _internalInit(){Promise.all([OneSignal._getDbValue("Ids","appId"),OneSignal._getDbValue("Ids","registrationId"),OneSignal._getDbValue("Options","subscription")]).then(function _internalInit_GotAppRegistrationSubscriptionIds(result){var appIdResult=result[0];var registrationIdResult=result[1];var subscriptionResult=result[2];if(appIdResult&&appIdResult.id!=OneSignal._initOptions.appId){OneSignal._deleteDbValue("Ids","userId");sessionStorage.removeItem("ONE_SIGNAL_SESSION")}if(sessionStorage.getItem("ONE_SIGNAL_SESSION")&&!OneSignal._initOptions.subdomainName&&("denied"==Notification.permission||sessionStorage.getItem("ONE_SIGNAL_NOTIFICATION_PERMISSION")==Notification.permission))return;sessionStorage.setItem("ONE_SIGNAL_NOTIFICATION_PERMISSION",Notification.permission);if(false==OneSignal._initOptions.autoRegister&&!registrationIdResult&&null==OneSignal._initOptions.subdomainName)return;if("visible"!=document.visibilityState){document.addEventListener("visibilitychange",OneSignal._visibilitychange);return}OneSignal._sessionInit({})})["catch"](function(e){_loglevel2["default"].error(e)})},registerForPushNotifications:function registerForPushNotifications(options){if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("Your browser does not support push notifications.");return}if(!options)options={};options.fromRegisterFor=true;OneSignal._sessionInit(options)},_initHttp:function _initHttp(options){OneSignal._initOptions=options;if(options.continuePressed)OneSignal.setSubscription(true);var isIframe=null!=parent&&parent!=window;var creator=opener||parent;if(!creator){_loglevel2["default"].debug("ERROR:_initHttp: No opener or parent found!");return}var messageChannel=new MessageChannel;messageChannel.port1.onmessage=function(event){_loglevel2["default"].debug("_initHttp.messageChannel.port1.onmessage",event);if(event.data.initOptions){OneSignal.setDefaultNotificationUrl(event.data.initOptions.defaultUrl);OneSignal.setDefaultTitle(event.data.initOptions.defaultTitle);if(event.data.initOptions.defaultIcon)OneSignal.setDefaultIcon(event.data.initOptions.defaultIcon);_loglevel2["default"].debug("document.URL",event.data.initOptions.parent_url);OneSignal._getDbValue("NotificationOpened",event.data.initOptions.parent_url).then(function registerForPushNotifications_GotNotificationOpened(notificationOpenedResult){_loglevel2["default"].debug("_initHttp NotificationOpened db",notificationOpenedResult);if(notificationOpenedResult){OneSignal._deleteDbValue("NotificationOpened",event.data.initOptions.parent_url);_loglevel2["default"].debug("OneSignal._safePostMessage:targetOrigin:",OneSignal._initOptions.origin);OneSignal._safePostMessage(creator,{openedNotification:notificationOpenedResult.data},OneSignal._initOptions.origin,null)}})["catch"](function(e){_loglevel2["default"].error(e)})}else if(event.data.getNotificationPermission)OneSignal._getSubdomainState(function(curState){OneSignal._safePostMessage(creator,{currentNotificationPermission:curState},OneSignal._initOptions.origin,null)});else if(event.data.setSubdomainState)OneSignal.setSubscription(event.data.setSubdomainState.setSubscription)};OneSignal._getSubdomainState(function(curState){curState.isIframe=isIframe;OneSignal._safePostMessage(creator,{oneSignalInitPageReady:curState},OneSignal._initOptions.origin,[messageChannel.port2])});OneSignal._initSaveState();OneSignal._httpRegistration=true;if(0==location.search.indexOf("?session=true"))return;OneSignal._getPlayerId(null,function(player_id){if(!isIframe||player_id){_loglevel2["default"].debug("Before navigator.serviceWorker.register");navigator.serviceWorker.register(OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);_loglevel2["default"].debug("After navigator.serviceWorker.register")}})},_getSubdomainState:function _getSubdomainState(callback){var state={};Promise.all([OneSignal._getDbValue("Ids","userId"),OneSignal._getDbValue("Ids","registrationId"),OneSignal._getDbValue("Options","subscription")]).then(function _internalInit_GotAppRegistrationSubscriptionIds(result){var userIdResult=result[0];var registrationIdResult=result[1];var subscriptionResult=result[2];callback({userId:userIdResult?userIdResult.id:null,registrationId:registrationIdResult?registrationIdResult.id:null,notifPermssion:Notification.permission,subscriptionSet:subscriptionResult?subscriptionResult.value:null,isPushEnabled:"granted"==Notification.permission&&userIdResult&&registrationIdResult&&(subscriptionResult&&subscriptionResult.value||null==subscriptionResult)})})["catch"](function(e){_loglevel2["default"].error(e)})},_initSaveState:function _initSaveState(){OneSignal._app_id=OneSignal._initOptions.appId;OneSignal._putDbValue("Ids",{type:"appId",id:OneSignal._app_id});OneSignal._putDbValue("Options",{key:"pageTitle",value:document.title})},_supportsDirectPermission:function _supportsDirectPermission(){return(0,_utils.isSupportedSafari)()||"https:"==location.protocol||0==location.host.indexOf("localhost")||0==location.host.indexOf("127.0.0.1")},_sessionInit:function _sessionInit(options){_loglevel2["default"].debug("Called OneSignal._sessionInit():",options);OneSignal._initSaveState();var hostPageProtocol=location.origin.match(/^http(s|):\/\/(www\.|)/)[0];if(OneSignal._useHttpMode){if(options.fromRegisterFor){var dualScreenLeft=void 0!=window.screenLeft?window.screenLeft:screen.left;var dualScreenTop=void 0!=window.screenTop?window.screenTop:screen.top;var thisWidth=window.innerWidth?window.innerWidth:document.documentElement.clientWidth?document.documentElement.clientWidth:screen.width;var thisHeight=window.innerHeight?window.innerHeight:document.documentElement.clientHeight?document.documentElement.clientHeight:screen.height;var childWidth=OneSignal._windowWidth;var childHeight=OneSignal._windowHeight;var left=thisWidth/2-childWidth/2+dualScreenLeft;var top=thisHeight/2-childHeight/2+dualScreenTop;_loglevel2["default"].debug("Opening popup window.");var message_localization_opts=OneSignal._initOptions.promptOptions;var message_localization_opts_str="";if(message_localization_opts){var message_localization_params=["actionMessage","exampleNotificationTitleDesktop","exampleNotificationMessageDesktop","exampleNotificationTitleMobile","exampleNotificationMessageMobile","exampleNotificationCaption","acceptButtonText","cancelButtonText"];for(var i=0;i<message_localization_params.length;i++){var key=message_localization_params[i];var value=message_localization_opts[key];var encoded_value=encodeURIComponent(value);if(value||""===value)message_localization_opts_str+="&"+key+"="+encoded_value}}var childWindow=window.open(OneSignal._initOneSignalHttp+"?"+message_localization_opts_str+"&hostPageProtocol="+hostPageProtocol,"_blank","scrollbars=yes, width="+childWidth+", height="+childHeight+", top="+top+", left="+left);if(childWindow)childWindow.focus()}else{_loglevel2["default"].debug("Opening iFrame.");OneSignal._addSessionIframe(hostPageProtocol)}return}if((0,_utils.isSupportedSafari)()){if(OneSignal._initOptions.safari_web_id){var notificationPermissionBeforeRequest=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);window.safari.pushNotification.requestPermission(OneSignal._HOST_URL+"safari",OneSignal._initOptions.safari_web_id,{app_id:OneSignal._app_id},function(data){_loglevel2["default"].debug(data);var notificationPermissionAfterRequest=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);if(data.deviceToken)OneSignal._registerWithOneSignal(OneSignal._app_id,data.deviceToken.toLowerCase(),7);else sessionStorage.setItem("ONE_SIGNAL_SESSION",true);OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest)})}}else if(options.modalPrompt&&options.fromRegisterFor){if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("An attempt was made to open the HTTPS modal permission prompt, but push notifications are not supported on this browser. Opening canceled.");return}OneSignal.isPushNotificationsEnabled(function(pushEnabled){var element=document.createElement("div");element.setAttribute("id","OneSignal-iframe-modal");element.innerHTML='<div id="notif-permission" style="background: rgba(0, 0, 0, 0.7); position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 9000; display: block"></div>';document.body.appendChild(element);var iframeStyle=document.createElement("style");iframeStyle.innerHTML="@media (max-width: 560px) { .OneSignal-permission-iframe { width: 100%; height: 100%;} }@media (min-width: 561px) { .OneSignal-permission-iframe { top: 50%; left: 50%; margin-left: -275px; margin-top: -248px;} }";document.getElementsByTagName("head")[0].appendChild(iframeStyle);var iframeNode=document.createElement("iframe");iframeNode.className="OneSignal-permission-iframe";iframeNode.style.cssText="background: rgba(255, 255, 255, 1); position: fixed;";iframeNode.src=OneSignal._initOneSignalHttp+"?id="+OneSignal._app_id+"&httpsPrompt=true&pushEnabled="+pushEnabled+"&permissionBlocked="+("undefined"==typeof Notification||"denied"==Notification.permission)+"&hostPageProtocol="+hostPageProtocol;iframeNode.setAttribute("frameborder","0");iframeNode.width=OneSignal._windowWidth.toString();iframeNode.height=OneSignal._windowHeight.toString();_loglevel2["default"].debug("Opening HTTPS modal prompt.");document.getElementById("notif-permission").appendChild(iframeNode)})}else if("serviceWorker"in navigator)OneSignal._registerForW3CPush(options);else _loglevel2["default"].debug("Service workers are not supported in this browser.");(0,_events.triggerEvent)("onesignal.sdk.initialized",null)},_registerForW3CPush:function _registerForW3CPush(options){OneSignal._getDbValue("Ids","registrationId").then(function _registerForW3CPush_GotRegistrationId(registrationIdResult){if(!registrationIdResult||!options.fromRegisterFor||"granted"!=Notification.permission)navigator.serviceWorker.getRegistration().then(function(event){var sw_path="";if(OneSignal._initOptions.path)sw_path=OneSignal._initOptions.path;if("undefined"==typeof event)navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);else if(event.active){if(event.active.scriptURL.indexOf(sw_path+OneSignal.SERVICE_WORKER_PATH)>-1)OneSignal._getDbValue("Ids","WORKER1_ONE_SIGNAL_SW_VERSION").then(function(versionResult){if(versionResult)if(versionResult.id!=OneSignal._VERSION)event.unregister().then(function(){navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)});else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)});else if(event.active.scriptURL.indexOf(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH)>-1)OneSignal._getDbValue("Ids","WORKER1_ONE_SIGNAL_SW_VERSION").then(function(versionResult){if(versionResult)if(versionResult.id!=OneSignal._VERSION)event.unregister().then(function(){navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)});else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError);else navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_UPDATER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)})}else if(null==event.installing)navigator.serviceWorker.register(sw_path+OneSignal.SERVICE_WORKER_PATH,OneSignal.SERVICE_WORKER_PARAM).then(OneSignal._enableNotifications,OneSignal._registerError)})["catch"](function(e){_loglevel2["default"].error(e)})})["catch"](function(e){_loglevel2["default"].error(e)})},_addSessionIframe:function _addSessionIframe(hostPageProtocol){var node=document.createElement("iframe");node.style.display="none";node.src=OneSignal._initOneSignalHttp+"Iframe";if(sessionStorage.getItem("ONE_SIGNAL_SESSION"))node.src+="?session=true&hostPageProtocol="+hostPageProtocol;else node.src+="?hostPageProtocol="+hostPageProtocol;document.body.appendChild(node);_loglevel2["default"].debug("Adding session iFrame.");OneSignal._sessionIframeAdded=true},_registerError:function _registerError(err){_loglevel2["default"].debug("navigator.serviceWorker.register:ERROR: "+err)},_enableNotifications:function _enableNotifications(existingServiceWorkerRegistration){if(existingServiceWorkerRegistration)_loglevel2["default"].debug("There is an older ServiceWorker:",existingServiceWorkerRegistration);if(!("PushManager"in window)){_loglevel2["default"].debug("Push messaging is not supported. No PushManager.");sessionStorage.setItem("ONE_SIGNAL_SESSION",true);return}if(!("showNotification"in ServiceWorkerRegistration.prototype)){_loglevel2["default"].debug("Notifications are not supported. showNotification not available in ServiceWorkerRegistration.");sessionStorage.setItem("ONE_SIGNAL_SESSION",true);return}if("denied"===Notification.permission){_loglevel2["default"].warn("The user has disabled notifications.");return}navigator.serviceWorker.ready.then(function(serviceWorkerRegistration){_loglevel2["default"].info("Service worker active:",serviceWorkerRegistration);OneSignal._subscribeForPush(serviceWorkerRegistration)})["catch"](function(e){_loglevel2["default"].error(e)})},_getNotificationPermission:function _getNotificationPermission(safariWebId){if(window.safari)if(safariWebId)return window.safari.pushNotification.permission(safariWebId).permission;else return"default";else return Notification.permission},_triggerEvent_customPromptClicked:function _triggerEvent_customPromptClicked(clickResult){var recentPermissions=_limitStore2["default"].put("notification.permission",clickResult);(0,_events.triggerEvent)("onesignal.prompt.custom.clicked",{result:clickResult})},_triggerEvent_nativePromptPermissionChanged:function _triggerEvent_nativePromptPermissionChanged(from,to){if(void 0===to)to=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);if(from!==to){var recentPermissions=_limitStore2["default"].put("notification.permission",to);(0,_events.triggerEvent)("onesignal.prompt.native.permissionchanged",{from:from,to:to})}},_triggerEvent_subscriptionChanged:function _triggerEvent_subscriptionChanged(to){(0,_events.triggerEvent)("onesignal.subscription.changed",to)},_triggerEvent_dbValueRetrieved:function _triggerEvent_dbValueRetrieved(value){(0,_events.triggerEvent)("onesignal.db.valueretrieved",value)},_triggerEvent_dbValueSet:function _triggerEvent_dbValueSet(value){(0,_events.triggerEvent)("onesignal.db.valueset",value)},_triggerEvent_internalSubscriptionSet:function _triggerEvent_internalSubscriptionSet(value){(0,_events.triggerEvent)("onesignal.internal.subscriptionset",value)},_subscribeForPush:function _subscribeForPush(serviceWorkerRegistration){var notificationPermissionBeforeRequest=OneSignal._getNotificationPermission(OneSignal._initOptions.safari_web_id);serviceWorkerRegistration.pushManager.subscribe({
userVisibleOnly:true}).then(function(subscription){sessionStorage.setItem("ONE_SIGNAL_NOTIFICATION_PERMISSION",Notification.permission);OneSignal._getDbValue("Ids","appId").then(function _subscribeForPush_GotAppId(appIdResult){var appId=appIdResult.id;_loglevel2["default"].debug("Called OneSignal._subscribeForPush() -> serviceWorkerRegistration.pushManager.subscribe().");var registrationId=null;if(subscription)if("undefined"!=typeof subscription.subscriptionId)registrationId=subscription.subscriptionId;else registrationId=subscription.endpoint.replace(new RegExp("^(https://android.googleapis.com/gcm/send/|https://updates.push.services.mozilla.com/push/)"),"");else _loglevel2["default"].warn("Could not subscribe your browser for push notifications.");OneSignal._registerWithOneSignal(appId,registrationId,(0,_utils.isSupportedFireFox)()?8:5);if(!OneSignal._usingNativePermissionHook)OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest)})["catch"](function(e){_loglevel2["default"].error(e)})})["catch"](function(e){_loglevel2["default"].error("Error while subscribing for push:",e);if(!OneSignal._usingNativePermissionHook)OneSignal._triggerEvent_nativePromptPermissionChanged(notificationPermissionBeforeRequest);if(20==e.code&&opener&&OneSignal._httpRegistration)window.close()})},sendTag:function sendTag(key,value){var jsonKeyValue={};jsonKeyValue[key]=value;OneSignal.sendTags(jsonKeyValue)},sendTags:function sendTags(jsonPair){OneSignal._getDbValue("Ids","userId").then(function sendTags_GotUserId(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id,"PUT",{app_id:OneSignal._app_id,tags:jsonPair});else if(null==OneSignal._tagsToSendOnRegister)OneSignal._tagsToSendOnRegister=jsonPair;else{var resultObj={};for(var _obj in OneSignal._tagsToSendOnRegister)resultObj[_obj]=OneSignal._tagsToSendOnRegister[_obj];for(var _obj in jsonPair)resultObj[_obj]=jsonPair[_obj];OneSignal._tagsToSendOnRegister=resultObj}})["catch"](function(e){_loglevel2["default"].error("sendTags:",e)})},deleteTag:function deleteTag(key){OneSignal.deleteTags([key])},deleteTags:function deleteTags(keyArray){var jsonPair={};var length=keyArray.length;for(var i=0;length>i;i++)jsonPair[keyArray[i]]="";OneSignal.sendTags(jsonPair)},_handleNotificationOpened:function _handleNotificationOpened(event){var notificationData=JSON.parse(event.notification.tag);event.notification.close();Promise.all([OneSignal._getDbValue("Ids","appId"),OneSignal._getDbValue("Ids","userId")]).then(function _handleNotificationOpened_GotAppUserIds(results){var appIdResult=results[0];var userIdResult=results[1];if(appIdResult&&userIdResult)OneSignal._sendToOneSignalApi("notifications/"+notificationData.id,"PUT",{app_id:appIdResult.id,player_id:userIdResult.id,opened:true})})["catch"](function(e){_loglevel2["default"].error(e)});event.waitUntil(clients.matchAll({type:"window"}).then(function(clientList){var launchURL=registration.scope;if(OneSignal._defaultLaunchURL)launchURL=OneSignal._defaultLaunchURL;if(notificationData.launchURL)launchURL=notificationData.launchURL;for(var i=0;i<clientList.length;i++){var client=clientList[i];if("focus"in client&&client.url==launchURL){client.focus();client.postMessage(notificationData);return}}if("javascript:void(0);"!==launchURL&&"do_not_open"!==launchURL){OneSignal._putDbValue("NotificationOpened",{url:launchURL,data:notificationData});clients.openWindow(launchURL)["catch"](function(error){clients.openWindow(registration.scope+"redirector.html?url="+launchURL)})}})["catch"](function(e){_loglevel2["default"].error(e)}))},_getTitle:function _getTitle(incomingTitle,callback){if(null!=incomingTitle){callback(incomingTitle);return}Promise.all([OneSignal._getDbValue("Options","defaultTitle"),OneSignal._getDbValue("Options","pageTitle")]).then(function _getTitle_GotDefaultPageTitles(results){var defaultTitleResult=results[0];var pageTitleResult=results[1];if(defaultTitleResult){callback(defaultTitleResult.value);return}else if(pageTitleResult&&null!=pageTitleResult.value){callback(pageTitleResult.value);return}else callback("")})["catch"](function(e){_loglevel2["default"].error(e)})},_handleGCMMessage:function _handleGCMMessage(serviceWorker,event){if(event.data&&"{"==event.data.text()[0]){_loglevel2["default"].debug("Received data.text: ",event.data.text());_loglevel2["default"].debug("Received data.json: ",event.data.json())}event.waitUntil(new Promise(function(resolve,reject){OneSignal._getTitle(null,function(title){OneSignal._getDbValue("Options","defaultIcon").then(function _handleGCMMessage_GotDefaultIcon(defaultIconResult){OneSignal._getLastNotifications(function(response,appId){var notificationData={id:response.custom.i,message:response.alert,additionalData:response.custom.a};if(response.title)notificationData.title=response.title;else notificationData.title=title;if(response.custom.u)notificationData.launchURL=response.custom.u;if(response.icon)notificationData.icon=response.icon;else if(defaultIconResult)notificationData.icon=defaultIconResult.value;serviceWorker.registration.showNotification(notificationData.title,{body:response.alert,icon:notificationData.icon,tag:JSON.stringify(notificationData)}).then(resolve)["catch"](function(e){_loglevel2["default"].error(e)});OneSignal._getDbValue("Options","defaultUrl").then(function(defaultUrlResult){if(defaultUrlResult)OneSignal._defaultLaunchURL=defaultUrlResult.value})["catch"](function(e){_loglevel2["default"].error(e)})},resolve)})["catch"](function(e){_loglevel2["default"].error(e)})})}))},_getLastNotifications:function _getLastNotifications(itemCallback,completeCallback){OneSignal._getDbValue("Ids","userId").then(function _getLastNotifications_GotUserId(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id+"/chromeweb_notification","GET",null,function(response){for(var i=0;i<response.length;i++)itemCallback(JSON.parse(response[i]))},function(){completeCallback()});else{_loglevel2["default"].debug("Error: could not get notificationId");completeCallback()}})["catch"](function(e){_loglevel2["default"].error(e)})},_listener_receiveMessage:function receiveMessage(event){_loglevel2["default"].debug("_listener_receiveMessage: ",event);if(void 0==OneSignal._initOptions)return;if(false)return;if(event.data.oneSignalInitPageReady){OneSignal._getDbValues("Options").then(function _listener_receiveMessage(options){_loglevel2["default"].debug("current options",options);if(!options.defaultUrl)options.defaultUrl=document.URL;if(!options.defaultTitle)options.defaultTitle=document.title;options.parent_url=document.URL;_loglevel2["default"].debug("Posting message to port[0]",event.ports[0]);event.ports[0].postMessage({initOptions:options})})["catch"](function(e){_loglevel2["default"].error("_listener_receiveMessage:",e)});var eventData=event.data.oneSignalInitPageReady;if(eventData.isIframe)OneSignal._iframePort=event.ports[0];if(eventData.userId)OneSignal._putDbValue("Ids",{type:"userId",id:eventData.userId});if(eventData.registrationId)OneSignal._putDbValue("Ids",{type:"registrationId",id:eventData.registrationId});OneSignal._fireNotificationEnabledCallback(eventData.isPushEnabled);OneSignal._sendUnsentTags()}else if(event.data.currentNotificationPermission)OneSignal._fireNotificationEnabledCallback(event.data.currentNotificationPermission.isPushEnabled);else if(event.data.idsAvailable){sessionStorage.setItem("ONE_SIGNAL_SESSION",true);OneSignal._putDbValue("Ids",{type:"userId",id:event.data.idsAvailable.userId});OneSignal._putDbValue("Ids",{type:"registrationId",id:event.data.idsAvailable.registrationId});if(OneSignal._idsAvailable_callback.length>0)for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:event.data.idsAvailable.userId,registrationId:event.data.idsAvailable.registrationId})}OneSignal._sendUnsentTags()}else if(event.data.httpsPromptAccepted){OneSignal.registerForPushNotifications();OneSignal.setSubscription(true);var elem=document.getElementById("OneSignal-iframe-modal");elem.parentNode.removeChild(elem);OneSignal._triggerEvent_customPromptClicked("granted")}else if(event.data.httpsPromptCanceled){var elem=document.getElementById("OneSignal-iframe-modal");elem.parentNode.removeChild(elem);OneSignal._triggerEvent_customPromptClicked("denied")}else if(event.data.httpPromptAccepted)OneSignal._triggerEvent_customPromptClicked("granted");else if(event.data.httpPromptCanceled)OneSignal._triggerEvent_customPromptClicked("denied");else if(OneSignal._notificationOpened_callback)OneSignal._notificationOpened_callback(event.data)},addListenerForNotificationOpened:function addListenerForNotificationOpened(callback){OneSignal._notificationOpened_callback=callback;if(window)OneSignal._getDbValue("NotificationOpened",document.URL).then(function(notificationOpenedResult){if(notificationOpenedResult){OneSignal._deleteDbValue("NotificationOpened",document.URL);OneSignal._notificationOpened_callback(notificationOpenedResult.data)}})["catch"](function(e){_loglevel2["default"].error(e)})},_fireNotificationEnabledCallback:function _fireNotificationEnabledCallback(notifPermssion){if(OneSignal._isNotificationEnabledCallback){OneSignal._isNotificationEnabledCallback(notifPermssion);OneSignal._isNotificationEnabledCallback=null}},getIdsAvailable:function getIdsAvailable(callback){if(void 0===callback)return;OneSignal._idsAvailable_callback.push(callback);Promise.all([OneSignal._getDbValue("Ids","userId"),OneSignal._getDbValue("Ids","registrationId")]).then(function getIdsAvailable_GotUserRegistrationIds(results){var userIdResult=results[0];var registrationIdResult=results[1];if(userIdResult)if(registrationIdResult)for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:userIdResult.id,registrationId:registrationIdResult.id})}else for(;OneSignal._idsAvailable_callback.length>0;){var curr_callback=OneSignal._idsAvailable_callback.pop();curr_callback({userId:userIdResult.id,registrationId:null})}})["catch"](function(e){_loglevel2["default"].error(e)})},getTags:function getTags(callback){OneSignal._getDbValue("Ids","userId").then(function(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id,"GET",null,function(response){callback(response.tags)})})["catch"](function(e){_loglevel2["default"].error(e)})},isPushNotificationsEnabled:function isPushNotificationsEnabled(callback){if(!(0,_utils.isPushNotificationsSupported)()){_loglevel2["default"].warn("Your browser does not support push notifications.");return}if(OneSignal._initOptions.subdomainName&&!(0,_utils.isBrowserSafari)()){OneSignal._isNotificationEnabledCallback=callback;if(OneSignal._iframePort)OneSignal._iframePort.postMessage({getNotificationPermission:true});return}Promise.all([OneSignal._getDbValue("Ids","registrationId"),OneSignal._getDbValue("Options","subscription")]).then(function(results){var registrationIdResult=results[0];var subscriptionResult=results[1];if(registrationIdResult){if(subscriptionResult&&!subscriptionResult.value)return callback(false);callback("granted"==Notification.permission)}else callback(false)})["catch"](function(e){_loglevel2["default"].error(e)})},_getNotificationTypes:function _getNotificationTypes(callback){OneSignal._getSubscription(function(db_subscriptionSet){callback(db_subscriptionSet?1:-2)})},setSubscription:function setSubscription(newSubscription){if(OneSignal._iframePort)OneSignal._iframePort.postMessage({setSubdomainState:{setSubscription:newSubscription}});else OneSignal._getSubscription(function(currentSubscription){if(currentSubscription!=newSubscription){OneSignal._putDbValue("Options",{key:"subscription",value:newSubscription});OneSignal._getDbValue("Ids","userId").then(function(userIdResult){if(userIdResult)OneSignal._sendToOneSignalApi("players/"+userIdResult.id,"PUT",{app_id:OneSignal._app_id,notification_types:newSubscription?1:-2},function setSubscriptionSetCallback(){OneSignal._triggerEvent_internalSubscriptionSet(newSubscription)})})["catch"](function(e){_loglevel2["default"].error(e)})}})},_getSubscription:function _getSubscription(callback){OneSignal._getDbValue("Options","subscription").then(function(subscriptionResult){callback(!(subscriptionResult&&false==subscriptionResult.value))})["catch"](function(e){_loglevel2["default"].error(e)})},_safePostMessage:function _safePostMessage(creator,data,targetOrigin,receiver){var tOrigin=targetOrigin.toLowerCase();if(tOrigin.startsWith("http://")){var queryDict={};location.search.substr(1).split("&").forEach(function(item){queryDict[item.split("=")[0]]=item.split("=")[1]});var validPreURLRegex=/^http(s|):\/\/(www\.|)/;tOrigin=tOrigin.replace(validPreURLRegex,queryDict.hostPageProtocol)}if(receiver)creator.postMessage(data,tOrigin,receiver);else creator.postMessage(data,tOrigin)},_process_pushes:function _process_pushes(array){for(var i=0;i<array.length;i++)OneSignal.push(array[i])},push:function push(item){if("function"==typeof item)item();else{var functionName=item.shift();OneSignal[functionName].apply(null,item)}}};if("undefined"!=typeof window)window.addEventListener("message",OneSignal._listener_receiveMessage,false);else{importScripts("https://cdn.onesignal.com/sdks/serviceworker-cache-polyfill.js");self.addEventListener("push",function(event){OneSignal._handleGCMMessage(self,event)});self.addEventListener("notificationclick",function(event){OneSignal._handleNotificationOpened(event)});var isSWonSubdomain=null!=location.href.match(/https\:\/\/.*\.onesignal.com\/sdks\//);if(true)isSWonSubdomain=true;self.addEventListener("install",function(event){_loglevel2["default"].debug("OneSignal Installed service worker: "+OneSignal._VERSION);if(self.location.pathname.indexOf("OneSignalSDKWorker.js")>-1)OneSignal._putDbValue("Ids",{type:"WORKER1_ONE_SIGNAL_SW_VERSION",id:OneSignal._VERSION});else OneSignal._putDbValue("Ids",{type:"WORKER2_ONE_SIGNAL_SW_VERSION",id:OneSignal._VERSION});if(isSWonSubdomain)event.waitUntil(caches.open("OneSignal_"+OneSignal._VERSION).then(function(cache){return cache.addAll(["/sdks/initOneSignalHttpIframe","/sdks/initOneSignalHttpIframe?session=*","/sdks/manifest_json"])})["catch"](function(e){_loglevel2["default"].error(e)}))});if(isSWonSubdomain)self.addEventListener("fetch",function(event){event.respondWith(caches.match(event.request).then(function(response){if(response)return response;return fetch(event.request)})["catch"](function(e){_loglevel2["default"].error(e)}))})}module.exports=OneSignal}).call(exports,__webpack_require__(3))},function(module,exports){(function(global){(function(){!function(){"use strict";function normalizeName(name){if("string"!=typeof name)name=String(name);if(/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name))throw new TypeError("Invalid character in header field name");return name.toLowerCase()}function normalizeValue(value){if("string"!=typeof value)value=String(value);return value}function Headers(headers){this.map={};if(headers instanceof Headers)headers.forEach(function(value,name){this.append(name,value)},this);else if(headers)Object.getOwnPropertyNames(headers).forEach(function(name){this.append(name,headers[name])},this)}function consumed(body){if(body.bodyUsed)return Promise.reject(new TypeError("Already read"));body.bodyUsed=true}function fileReaderReady(reader){return new Promise(function(resolve,reject){reader.onload=function(){resolve(reader.result)};reader.onerror=function(){reject(reader.error)}})}function readBlobAsArrayBuffer(blob){var reader=new FileReader;reader.readAsArrayBuffer(blob);return fileReaderReady(reader)}function readBlobAsText(blob){var reader=new FileReader;reader.readAsText(blob);return fileReaderReady(reader)}function Body(){this.bodyUsed=false;this._initBody=function(body){this._bodyInit=body;if("string"==typeof body)this._bodyText=body;else if(support.blob&&Blob.prototype.isPrototypeOf(body))this._bodyBlob=body;else if(support.formData&&FormData.prototype.isPrototypeOf(body))this._bodyFormData=body;else if(!body)this._bodyText="";else if(support.arrayBuffer&&ArrayBuffer.prototype.isPrototypeOf(body));else throw new Error("unsupported BodyInit type")};if(support.blob){this.blob=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);else if(this._bodyFormData)throw new Error("could not read FormData body as blob");else return Promise.resolve(new Blob([this._bodyText]))};this.arrayBuffer=function(){return this.blob().then(readBlobAsArrayBuffer)};this.text=function(){var rejected=consumed(this);if(rejected)return rejected;if(this._bodyBlob)return readBlobAsText(this._bodyBlob);else if(this._bodyFormData)throw new Error("could not read FormData body as text");else return Promise.resolve(this._bodyText)}}else this.text=function(){var rejected=consumed(this);return rejected?rejected:Promise.resolve(this._bodyText)};if(support.formData)this.formData=function(){return this.text().then(decode)};this.json=function(){return this.text().then(JSON.parse)};return this}function normalizeMethod(method){var upcased=method.toUpperCase();return methods.indexOf(upcased)>-1?upcased:method}function Request(input,options){options=options||{};var body=options.body;if(Request.prototype.isPrototypeOf(input)){if(input.bodyUsed)throw new TypeError("Already read");this.url=input.url;this.credentials=input.credentials;if(!options.headers)this.headers=new Headers(input.headers);this.method=input.method;this.mode=input.mode;if(!body){body=input._bodyInit;input.bodyUsed=true}}else this.url=input;this.credentials=options.credentials||this.credentials||"omit";if(options.headers||!this.headers)this.headers=new Headers(options.headers);this.method=normalizeMethod(options.method||this.method||"GET");this.mode=options.mode||this.mode||null;this.referrer=null;if(("GET"===this.method||"HEAD"===this.method)&&body)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(body)}function decode(body){var form=new FormData;body.trim().split("&").forEach(function(bytes){if(bytes){var split=bytes.split("=");var name=split.shift().replace(/\+/g," ");var value=split.join("=").replace(/\+/g," ");form.append(decodeURIComponent(name),decodeURIComponent(value))}});return form}function headers(xhr){var head=new Headers;var pairs=xhr.getAllResponseHeaders().trim().split("\n");pairs.forEach(function(header){var split=header.trim().split(":");var key=split.shift().trim();var value=split.join(":").trim();head.append(key,value)});return head}function Response(bodyInit,options){if(!options)options={};this._initBody(bodyInit);this.type="default";this.status=options.status;this.ok=this.status>=200&&this.status<300;this.statusText=options.statusText;this.headers=options.headers instanceof Headers?options.headers:new Headers(options.headers);this.url=options.url||""}if(self.fetch)return;Headers.prototype.append=function(name,value){name=normalizeName(name);value=normalizeValue(value);var list=this.map[name];if(!list){list=[];this.map[name]=list}list.push(value)};Headers.prototype["delete"]=function(name){delete this.map[normalizeName(name)]};Headers.prototype.get=function(name){var values=this.map[normalizeName(name)];return values?values[0]:null};Headers.prototype.getAll=function(name){return this.map[normalizeName(name)]||[]};Headers.prototype.has=function(name){return this.map.hasOwnProperty(normalizeName(name))};Headers.prototype.set=function(name,value){this.map[normalizeName(name)]=[normalizeValue(value)]};Headers.prototype.forEach=function(callback,thisArg){Object.getOwnPropertyNames(this.map).forEach(function(name){this.map[name].forEach(function(value){callback.call(thisArg,value,name,this)},this)},this)};var support={blob:"FileReader"in self&&"Blob"in self&&function(){try{new Blob;return true}catch(e){return false}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};var methods=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];Request.prototype.clone=function(){return new Request(this)};Body.call(Request.prototype);Body.call(Response.prototype);Response.prototype.clone=function(){return new Response(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new Headers(this.headers),url:this.url})};Response.error=function(){var response=new Response(null,{status:0,statusText:""});response.type="error";return response};var redirectStatuses=[301,302,303,307,308];Response.redirect=function(url,status){if(-1===redirectStatuses.indexOf(status))throw new RangeError("Invalid status code");return new Response(null,{status:status,headers:{location:url}})};self.Headers=Headers;self.Request=Request;self.Response=Response;self.fetch=function(input,init){return new Promise(function(resolve,reject){function responseURL(){if("responseURL"in xhr)return xhr.responseURL;if(/^X-Request-URL:/m.test(xhr.getAllResponseHeaders()))return xhr.getResponseHeader("X-Request-URL");return}var request;if(Request.prototype.isPrototypeOf(input)&&!init)request=input;else request=new Request(input,init);var xhr=new XMLHttpRequest;xhr.onload=function(){var status=1223===xhr.status?204:xhr.status;if(100>status||status>599){reject(new TypeError("Network request failed"));return}var options={status:status,statusText:xhr.statusText,headers:headers(xhr),url:responseURL()};var body="response"in xhr?xhr.response:xhr.responseText;resolve(new Response(body,options))};xhr.onerror=function(){reject(new TypeError("Network request failed"))};xhr.open(request.method,request.url,true);if("include"===request.credentials)xhr.withCredentials=true;if("responseType"in xhr&&support.blob)xhr.responseType="blob";request.headers.forEach(function(value,name){xhr.setRequestHeader(name,value)});xhr.send("undefined"==typeof request._bodyInit?null:request._bodyInit)})};self.fetch.polyfill=true}();module.exports=global.fetch}).call(global)}).call(exports,function(){return this}())},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.HOST_URL=exports.PROD_HOST=exports.DEV_HOST=void 0;var _utils=__webpack_require__(5);var DEV_HOST=exports.DEV_HOST="https://192.168.1.206:3000";var PROD_HOST=exports.PROD_HOST="https://onesignal.com";var HOST_URL=exports.HOST_URL=((0,_utils.isDev)()?DEV_HOST:PROD_HOST)+"/api/v1/"},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _typeof(obj){return obj&&"undefined"!=typeof Symbol&&obj.constructor===Symbol?"symbol":typeof obj}function isArray(variable){return"[object Array]"===Object.prototype.toString.call(variable)}function getHumanizedTimeDuration(timeDurationInMilliseconds){function addPluralSuffix(number){return number>1?"s":""}var duration=Math.floor(timeDurationInMilliseconds/1e3);var years=Math.floor(duration/31536e3);if(years)return years+" year"+addPluralSuffix(years);var days=Math.floor((duration%=31536e3)/86400);if(days)return days+" day"+addPluralSuffix(days);var hours=Math.floor((duration%=86400)/3600);if(hours)return hours+" hour"+addPluralSuffix(hours);var minutes=Math.floor((duration%=3600)/60);if(minutes)return minutes+" minute"+addPluralSuffix(minutes);var seconds=duration%60;if(seconds)return seconds+" second"+addPluralSuffix(seconds);return"just now"}function isBrowserEnv(){return"undefined"!=typeof window}function isDev(){return true}function isPushNotificationsSupported(){var chromeVersion=navigator.appVersion.match(/Chrome\/(.*?) /);if(isSupportedFireFox())return true;if(isSupportedSafari())return true;if(!chromeVersion)return false;if(navigator.appVersion.match(/Edge/))return false;if(navigator.appVersion.match(/ wv/))return false;if(navigator.appVersion.match(/OPR\//))return false;if(/iPad|iPhone|iPod/.test(navigator.platform))return false;return parseInt(chromeVersion[1].substring(0,2))>41}function isBrowserSafari(){var safariVersion=navigator.appVersion.match("Version/([0-9]?).* Safari");return null!=safariVersion}function isSupportedFireFox(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);if(fireFoxVersion)return parseInt(fireFoxVersion[2].substring(0,2))>43;return false}function isBrowserFirefox(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);return null!=fireFoxVersion}function getFirefoxVersion(){var fireFoxVersion=navigator.userAgent.match(/(Firefox\/)([0-9]{2,}\.[0-9]{1,})/);if(fireFoxVersion)return parseInt(fireFoxVersion[2].substring(0,2));else return-1}function isSupportedSafari(){var safariVersion=navigator.appVersion.match("Version/([0-9]?).* Safari");if(null==safariVersion)return false;if(/iPhone|iPad|iPod/i.test(navigator.userAgent))return false;return parseInt(safariVersion[1])>6}function removeDomElement(selector){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)els[i].parentNode.removeChild(els[i])}function addDomElement(targetSelectorOrElement,addOrder,elementHtml){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).insertAdjacentHTML(addOrder,elementHtml);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.insertAdjacentHTML(addOrder,elementHtml);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function addCssClass(targetSelectorOrElement,cssClass){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).classList.add(cssClass);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.classList.add(cssClass);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function removeCssClass(targetSelectorOrElement,cssClass){if("string"==typeof targetSelectorOrElement)document.querySelector(targetSelectorOrElement).classList.remove(cssClass);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.classList.remove(cssClass);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function on(targetSelectorOrElement,event,task){if(!event)_loglevel2["default"].error("Cannot call on() with no event: ",event);if(!task)_loglevel2["default"].error("Cannot call on() with no task: ",task);_loglevel2["default"].debug("Debug me here.");if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)on(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)on(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))targetSelectorOrElement.addEventListener(event,task);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function once(targetSelectorOrElement,event,task){var manualDestroy=arguments.length<=3||void 0===arguments[3]?false:arguments[3];if(!event)_loglevel2["default"].error("Cannot call on() with no event: ",event);if(!task)_loglevel2["default"].error("Cannot call on() with no task: ",task);if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)once(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)once(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement))){var taskWrapper=function(){var internalTaskFunction=function internalTaskFunction(e){var destroyEventListener=function destroyEventListener(){targetSelectorOrElement.removeEventListener(e.type,taskWrapper)};if(!manualDestroy)destroyEventListener();task(e,destroyEventListener)};return internalTaskFunction}();targetSelectorOrElement.addEventListener(event,taskWrapper)}else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}function off(targetSelectorOrElement,event,task){if("string"==typeof targetSelectorOrElement){var els=document.querySelectorAll(selector);if(els.length>0)for(var i=0;i<els.length;i++)off(els[i],task)}else if(isArray(targetSelectorOrElement))for(var i=0;i<targetSelectorOrElement.length;i++)off(targetSelectorOrElement[i],task);else if("object"===("undefined"==typeof targetSelectorOrElement?"undefined":_typeof(targetSelectorOrElement)))if(task)targetSelectorOrElement.removeEventListener(event,task);else targetSelectorOrElement.removeEventListener(event);else throw new Error(targetSelectorOrElement+" must be a CSS selector string or DOM Element object.")}Object.defineProperty(exports,"__esModule",{value:true});exports.isArray=isArray;exports.getHumanizedTimeDuration=getHumanizedTimeDuration;exports.isBrowserEnv=isBrowserEnv;exports.isDev=isDev;exports.isPushNotificationsSupported=isPushNotificationsSupported;exports.isBrowserSafari=isBrowserSafari;exports.isSupportedFireFox=isSupportedFireFox;exports.isBrowserFirefox=isBrowserFirefox;exports.getFirefoxVersion=getFirefoxVersion;exports.isSupportedSafari=isSupportedSafari;exports.removeDomElement=removeDomElement;exports.addDomElement=addDomElement;exports.addCssClass=addCssClass;exports.removeCssClass=removeCssClass;exports.on=on;exports.once=once;exports.off=off;var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel)},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__;!function(root,definition){"use strict";if("object"==typeof module&&module.exports&&true)module.exports=definition();else if(true)!(__WEBPACK_AMD_DEFINE_FACTORY__=definition,__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.call(exports,__webpack_require__,exports,module):__WEBPACK_AMD_DEFINE_FACTORY__,void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));else root.log=definition()}(this,function(){"use strict";function realMethod(methodName){if(typeof console===undefinedType)return false;else if(void 0!==console[methodName])return bindMethod(console,methodName);else if(void 0!==console.log)return bindMethod(console,"log");else return noop}function bindMethod(obj,methodName){var method=obj[methodName];if("function"==typeof method.bind)return method.bind(obj);else try{return Function.prototype.bind.call(method,obj)}catch(e){return function(){return Function.prototype.apply.apply(method,[obj,arguments])}}}function enableLoggingWhenConsoleArrives(methodName,level,loggerName){return function(){if(typeof console!==undefinedType){replaceLoggingMethods.call(this,level,loggerName);this[methodName].apply(this,arguments)}}}function replaceLoggingMethods(level,loggerName){for(var i=0;i<logMethods.length;i++){var methodName=logMethods[i];this[methodName]=level>i?noop:this.methodFactory(methodName,level,loggerName)}}function defaultMethodFactory(methodName,level,loggerName){return realMethod(methodName)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(name,defaultLevel,factory){function persistLevelIfPossible(levelNum){var levelName=(logMethods[levelNum]||"silent").toUpperCase();try{window.localStorage[storageKey]=levelName;return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"="+levelName+";"}catch(ignore){}}function getPersistedLevel(){var storedLevel;try{storedLevel=window.localStorage[storageKey]}catch(ignore){}if(typeof storedLevel===undefinedType)try{var cookie=window.document.cookie;var location=cookie.indexOf(encodeURIComponent(storageKey)+"=");if(location)storedLevel=/^([^;]+)/.exec(cookie.slice(location))[1];
}catch(ignore){}if(void 0===self.levels[storedLevel])storedLevel=void 0;return storedLevel}var self=this;var currentLevel;var storageKey="loglevel";if(name)storageKey+=":"+name;self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5};self.methodFactory=factory||defaultMethodFactory;self.getLevel=function(){return currentLevel};self.setLevel=function(level,persist){if("string"==typeof level&&void 0!==self.levels[level.toUpperCase()])level=self.levels[level.toUpperCase()];if("number"==typeof level&&level>=0&&level<=self.levels.SILENT){currentLevel=level;if(false!==persist)persistLevelIfPossible(level);replaceLoggingMethods.call(self,level,name);if(typeof console===undefinedType&&level<self.levels.SILENT)return"No console available for logging"}else throw"log.setLevel() called with invalid level: "+level};self.setDefaultLevel=function(level){if(!getPersistedLevel())self.setLevel(level,false)};self.enableAll=function(persist){self.setLevel(self.levels.TRACE,persist)};self.disableAll=function(persist){self.setLevel(self.levels.SILENT,persist)};var initialLevel=getPersistedLevel();if(null==initialLevel)initialLevel=null==defaultLevel?"WARN":defaultLevel;self.setLevel(initialLevel,false)}var noop=function(){};var undefinedType="undefined";var logMethods=["trace","debug","info","warn","error"];var defaultLogger=new Logger;var _loggersByName={};defaultLogger.getLogger=function getLogger(name){if("string"!=typeof name||""===name)throw new TypeError("You must supply a name when creating a logger.");var logger=_loggersByName[name];if(!logger)logger=_loggersByName[name]=new Logger(name,defaultLogger.getLevel(),defaultLogger.methodFactory);return logger};var _log=typeof window!==undefinedType?window.log:void 0;defaultLogger.noConflict=function(){if(typeof window!==undefinedType&&window.log===defaultLogger)window.log=_log;return defaultLogger};return defaultLogger})},function(module,exports,__webpack_require__){(function(fetch){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function apiCall(action,method,data){var headers=new Headers;headers.append("Content-Type","application/json;charset=UTF-8");var contents={method:method||"NO_METHOD_SPECIFIED",headers:headers,cache:"no-cache",body:JSON.stringify(data)};return new Promise(function(resolve,reject){fetch(_vars.HOST_URL+action,contents).then(function status(response){if(response.status>=200&&response.status<300)resolve(response.json());else reject(new Error(response.statusText))})["catch"](function(e){reject(e)})})}function sendNotification(appId,playerIds,titles,contents){var params={app_id:appId,headings:titles,contents:contents,include_player_ids:playerIds,isAnyWeb:true,url:"javascript:void(0);"};return apiCall("notifications","POST",params)}Object.defineProperty(exports,"__esModule",{value:true});exports.apiCall=apiCall;exports.sendNotification=sendNotification;var _vars=__webpack_require__(4);var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel)}).call(exports,__webpack_require__(3))},function(module,exports){"use strict";function LimitStore(){}Object.defineProperty(exports,"__esModule",{value:true});LimitStore.store={};LimitStore.LIMIT=2;LimitStore.put=function(key,value){if(void 0===LimitStore.store[key])LimitStore.store[key]=[null,null];LimitStore.store[key].push(value);if(LimitStore.store[key].length==LimitStore.LIMIT+1)LimitStore.store[key].shift();return LimitStore.store[key]};LimitStore.get=function(key){return LimitStore.store[key]};exports["default"]=LimitStore},function(module,exports){"use strict";if("undefined"!=typeof window)!function(){function CustomEvent(event,params){params=params||{bubbles:false,cancelable:false,details:void 0};var evt=document.createEvent("CustomEvent");evt.initCustomEvent(event,params.bubbles,params.cancelable,params.details);return evt}CustomEvent.prototype=window.Event.prototype;window.CustomEvent=CustomEvent}()},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function triggerEvent(eventName,data){if("undefined"==typeof window){_loglevel2["default"].debug("Skipping triggering of event:",eventName,"because we are running in a ServiceWorker context.");return}var event=new CustomEvent(eventName,{bubbles:true,cancelable:true,details:data});window.dispatchEvent(event)}Object.defineProperty(exports,"__esModule",{value:true});exports.triggerEvent=triggerEvent;var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel)},function(module,exports,__webpack_require__){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();var _utils=__webpack_require__(5);var _limitStore=__webpack_require__(8);var _limitStore2=_interopRequireDefault(_limitStore);var _loglevel=__webpack_require__(6);var _loglevel2=_interopRequireDefault(_loglevel);var _events=__webpack_require__(10);if((0,_utils.isBrowserEnv)()){__webpack_require__(12);var logoSvg=__webpack_require__(16);var Bell=function(){function Bell(){var _this=this;var _ref=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];var _ref$size=_ref.size;var size=void 0===_ref$size?"small":_ref$size;var _ref$position=_ref.position;var position=void 0===_ref$position?"bottom-left":_ref$position;var _ref$theme=_ref.theme;var theme=void 0===_ref$theme?"red-white":_ref$theme;var _ref$showLauncherAfte=_ref.showLauncherAfter;var showLauncherAfter=void 0===_ref$showLauncherAfte?10:_ref$showLauncherAfte;var _ref$showBadgeAfter=_ref.showBadgeAfter;var showBadgeAfter=void 0===_ref$showBadgeAfter?300:_ref$showBadgeAfter;var _ref$messages=_ref.messages;var messages=void 0===_ref$messages?{unsubscribed:"Subscribe to notifications",subscribed:"You're subscribed to notifications"}:_ref$messages;var _ref$prenotify=_ref.prenotify;var prenotify=void 0===_ref$prenotify?true:_ref$prenotify;_classCallCheck(this,Bell);this.options={size:size,position:position,theme:theme,showLauncherAfter:showLauncherAfter,showBadgeAfter:showBadgeAfter,messages:messages,prenotify:prenotify};this.size=this.options.size;this.position=this.options.position;this.messages=this.options.messages;this.messages.queued=[];if(!this.messages.unsubscribed)this.messages.unsubscribed="Subscribe to notifications";if(!this.messages.subscribed)this.messages.subscribed="You're subscribed to notifications";this.states={uninitialized:"The bell is loading.",subscribed:"The user is subscribed",unsubscribed:"The user is unsubscribed"};this.state="uninitialized";window.addEventListener("onesignal.bell.state.changed",function(state){console.info("onesignal.bell.state.changed",state.detail)});window.addEventListener("onesignal.bell.click",function(){var originalCall=function originalCall(){_this.hideMessage();if("unsubscribed"===_this.state)OneSignal.registerForPushNotifications();else if(!_this.isDialogOpened())_this.showDialog().then(function(e){var self=_this;(0,_utils.once)(document,"click",function(e,destroyEventListener){var wasDialogClicked=self.launcherDialog.contains(e.target);if(wasDialogClicked);else{destroyEventListener();self.hideDialog().then(function(e){if(_this.wasInactive){_this.setInactive(true);_this.wasInactive=void 0}})["catch"](function(e){_loglevel2["default"].error(e)})}},true)})["catch"](function(e){_loglevel2["default"].error(e)})};if(_this.isInactive()){_this.wasInactive=true;_this.setInactive(false).then(function(){originalCall()})["catch"](function(e){_loglevel2["default"].error(e)})}else originalCall()});window.addEventListener("onesignal.bell.hovering",function(){if(_this.isInactive()){_this.wasInactive=true;_this.setInactive(false)}if(_this.isMessageOpened()||_this.isDialogOpened()){console.debug("There is already a message being displayed; wait until it is hidden again.");return}if(messages.queued.length>0){var dequeuedMessage=_this.dequeueMessage();_this.setMessage(dequeuedMessage)}else _this.setMessage(_this.messages[_this.state]);_this.showMessage()});window.addEventListener("onesignal.bell.hovered",function(){if(_this.isMessageOpened())_this.hideMessage().then(function(){_this.setMessage(_this.messages[_this.state]);if(_this.wasInactive&&!_this.isDialogOpened()){_this.setInactive(true);_this.wasInactive=void 0}})});window.addEventListener("onesignal.subscription.changed",function(e){_this.setState(e.detail?"subscribed":"unsubscribed")});window.addEventListener("onesignal.actions.welcomenotificationsent",function(e){_this.displayMessage("Thanks for subscribing!",2500).then(function(){_this.setInactive(true)})["catch"](function(e){_loglevel2["default"].error(e)})});this.updateState()}_createClass(Bell,[{key:"create",value:function create(){var _this2=this;if(!(0,_utils.isPushNotificationsSupported)())return;if(this.container)(0,_utils.removeDomElement)("onesignal-bell-container");window.addDomElement=_utils.addDomElement;(0,_utils.addDomElement)("body","beforeend",'<div id="onesignal-bell-container" class="onesignal-bell-container onesignal-reset"></div>');(0,_utils.addDomElement)(this.container,"beforeend",'<div id="onesignal-bell-launcher" class="onesignal-bell-launcher"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-button"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-badge"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-message"></div>');(0,_utils.addDomElement)(this.launcherMessage,"beforeend",'<div class="onesignal-bell-launcher-message-body"></div>');(0,_utils.addDomElement)(this.launcher,"beforeend",'<div class="onesignal-bell-launcher-dialog"></div>');(0,_utils.addDomElement)(this.launcherDialog,"beforeend",'<div class="onesignal-bell-launcher-dialog-body"></div>');(0,_utils.addDomElement)(this.launcherDialogBody,"beforeend",'\n        <h1>Manage Site Notifications</h1>\n        <div class="push-notification">\n          <div class="push-notification-icon"></div>\n          <div class="push-notification-text-container">\n            <div class="push-notification-text-short"></div>\n            <div class="push-notification-text"></div>\n            <div class="push-notification-text"></div>\n          </div>\n        </div>\n        <div class="action-container">\n          <button type="button" id="action-button">Unsubscribe</button>\n        </div>\n        <div class="divider"></div>\n        <div class="kickback">Powered by OneSignal</div>\n        ');this.launcherButton.addEventListener("mouseover",function(){var isHoveringData=_limitStore2["default"].get("bell.launcherButton.mouse","over");if(void 0===isHoveringData||"out"===isHoveringData[isHoveringData.length-1])(0,_events.triggerEvent)("onesignal.bell.hovering");_limitStore2["default"].put("bell.launcherButton.mouse","over")});this.launcherButton.addEventListener("mouseleave",function(){_limitStore2["default"].put("bell.launcherButton.mouse","out");(0,_events.triggerEvent)("onesignal.bell.hovered")});this.launcherButton.addEventListener("mousedown",function(){(0,_utils.removeDomElement)(".pulse-ring");(0,_utils.addDomElement)(_this2.launcherButton,"beforeend",'<div class="pulse-ring"></div>');(0,_utils.addCssClass)(_this2.launcherButton,"onesignal-bell-launcher-button-active");(0,_utils.addCssClass)(_this2.launcherBadge,"onesignal-bell-launcher-badge-active")});this.launcherButton.addEventListener("mouseup",function(){(0,_utils.removeCssClass)(_this2.launcherButton,"onesignal-bell-launcher-button-active");(0,_utils.removeCssClass)(_this2.launcherBadge,"onesignal-bell-launcher-badge-active")});this.launcherButton.addEventListener("click",function(){(0,_events.triggerEvent)("onesignal.bell.button.click");(0,_events.triggerEvent)("onesignal.bell.click")});(0,_utils.addDomElement)(this.launcherButton,"beforeEnd",logoSvg);this.setSize(this.options.size);if("bottom-left"===this.options.position){(0,_utils.addCssClass)(this.container,"onesignal-bell-container-bottom-left");(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-bottom-left")}else if("bottom-right"===this.options.position){(0,_utils.addCssClass)(this.container,"onesignal-bell-container-bottom-right");(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-bottom-right")}else throw new Error("Invalid OneSignal bell position "+this.options.position);if("default"===this.options.theme)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-theme-default");else if("inverse"===this.options.theme)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-theme-inverse");else throw new Error("Invalid OneSignal bell theme "+this.options.theme);OneSignal.isPushNotificationsEnabled(function(isPushEnabled){if(isPushEnabled){console.log("isPushEnabled",isPushEnabled);var promise=_this2.setInactive(true)}else var promise=Promise.resolve();promise.then(function(){_this2._scheduleEvent(_this2.options.showLauncherAfter,function(){_this2.showLauncher()}).then(function(){return _this2._scheduleEvent(_this2.options.showBadgeAfter,function(){if(_this2.options.prenotify)if(!isPushEnabled){_this2.enqueueMessage("Click to subscribe to notifications");_this2.showBadge()}_this2.initialized=true})})["catch"](function(e){_loglevel2["default"].error(e)})})})}},{key:"_scheduleEvent",value:function _scheduleEvent(msInFuture,task){if("function"!=typeof task)throw new Error("Task to be scheduled must be a function.");if(0>=msInFuture){task();return Promise.resolve()}return new Promise(function(resolve,reject){setTimeout(function(){task();resolve()},msInFuture)})}},{key:"updateState",value:function updateState(){var _this3=this;OneSignal.isPushNotificationsEnabled(function(isEnabled){_this3.setState(isEnabled?"subscribed":"unsubscribed")})}},{key:"setState",value:function setState(newState){if(this.states.hasOwnProperty(newState)){var lastState=this.state;this.state=newState;if(lastState!==newState)(0,_events.triggerEvent)("onesignal.bell.state.changed",{from:lastState,to:newState});this.setMessage(this.messages[newState])}else _loglevel2["default"].error("Cannot update to invalid new state",newState)}},{key:"enqueueMessage",value:function enqueueMessage(message){var _this4=this;var notify=arguments.length<=1||void 0===arguments[1]?false:arguments[1];this.messages.queued.push(message);if(this.isBadgeOpen())this.hideBadge().then(function(){_this4.incrementBadge();_this4.showBadge()});else{this.incrementBadge();if(this.initialized)this.showBadge()}}},{key:"dequeueMessage",value:function dequeueMessage(message){var _this5=this;var dequeuedMessage=this.messages.queued.pop(message);if(this.isBadgeOpen())this.hideBadge().then(function(){_this5.decrementBadge();_this5.showBadge()});else{var newBadgeNumber=this.decrementBadge();if(0>=newBadgeNumber)this.hideBadge()}return dequeuedMessage}},{key:"showDialog",value:function showDialog(){var _this6=this;(0,_utils.addCssClass)(this.launcherDialog,"onesignal-bell-launcher-dialog-opened");return new Promise(function(resolve,reject){(0,_utils.once)(_this6.launcherDialog,"transitionend",function(e){if(e.target===_this6.launcherDialog){e.stopPropagation();return resolve(e)}})})}},{key:"hideDialog",value:function hideDialog(){var _this7=this;(0,_utils.removeCssClass)(this.launcherDialog,"onesignal-bell-launcher-dialog-opened");return new Promise(function(resolve,reject){(0,_utils.once)(_this7.launcherDialog,"transitionend",function(e){if(e.target===_this7.launcherDialog){e.stopPropagation();return resolve(e)}})})}},{key:"isDialogOpened",value:function isDialogOpened(){return document.querySelector(".onesignal-bell-launcher-dialog-opened")}},{key:"showLauncher",value:function showLauncher(){(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-active")}},{key:"hideLauncher",value:function hideLauncher(){(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-active")}},{key:"setMessage",value:function setMessage(message){this.launcherMessageBody.innerHTML=message}},{key:"showMessage",value:function showMessage(){(0,_utils.addCssClass)(this.launcherMessage,"onesignal-bell-launcher-message-opened")}},{key:"hideMessage",value:function hideMessage(){var _this8=this;(0,_utils.removeCssClass)(this.launcherMessage,"onesignal-bell-launcher-message-opened");return new Promise(function(resolve,reject){(0,_utils.once)(_this8.launcherMessage,"transitionend",function(e){if(e.target===_this8.launcherMessage){e.stopPropagation();return resolve(e)}})})}},{key:"isMessageOpened",value:function isMessageOpened(){return document.querySelector(".onesignal-bell-launcher-message-opened")}},{key:"displayMessage",value:function displayMessage(content){var _this9=this;var hideAfter=arguments.length<=1||void 0===arguments[1]?0:arguments[1];_loglevel2["default"].info("Displaying message.");return new Promise(function(resolve,reject){if(_this9.isMessageOpened())_this9.hideMessage().then(function(){_this9.setMessage(content);_this9.showMessage();if(hideAfter)setTimeout(function(){_this9.hideMessage();return resolve()},hideAfter);else return resolve()})["catch"](function(e){_loglevel2["default"].error(e)});else{_this9.setMessage(content);_this9.showMessage();if(hideAfter)setTimeout(function(){_this9.hideMessage();return resolve()},hideAfter);else return resolve()}})}},{key:"setBadge",value:function setBadge(content){this.launcherBadge.innerHTML=content}},{key:"showBadge",value:function showBadge(){if(this.badgeHasContent())(0,_utils.addCssClass)(this.launcherBadge,"onesignal-bell-launcher-badge-opened")}},{key:"isBadgeOpen",value:function isBadgeOpen(){return document.querySelector(".onesignal-bell-badge-opened")}},{key:"badgeHasContent",value:function badgeHasContent(){return this.launcherBadge.innerHTML.length>0}},{key:"getBadgeContent",value:function getBadgeContent(){return this.launcherBadge.innerHTML}},{key:"incrementBadge",value:function incrementBadge(){var content=this.getBadgeContent();if(!isNaN(content)){var badgeNumber=+content;badgeNumber+=1;this.setBadge(badgeNumber);return badgeNumber}}},{key:"decrementBadge",value:function decrementBadge(){var content=this.getBadgeContent();if(!isNaN(content)){var badgeNumber=+content;badgeNumber-=1;if(badgeNumber>0)this.setBadge(badgeNumber);else this.setBadge("");return badgeNumber}}},{key:"hideBadge",value:function hideBadge(){var _this10=this;return new Promise(function(resolve,reject){(0,_utils.removeCssClass)(_this10.launcherBadge,"onesignal-bell-launcher-badge-opened");(0,_utils.once)(_this10.launcherBadge,"transitionend",function(e){if(e.target===_this10.launcherBadge){e.stopPropagation();return resolve(e)}})})["catch"](function(e){_loglevel2["default"].error(e);reject(e)})}},{key:"isInactive",value:function isInactive(){return document.querySelector(".onesignal-bell-launcher-inactive")}},{key:"setInactive",value:function setInactive(isInactive){var _this11=this;if(isInactive){this.hideMessage();if(this.badgeHasContent())return this.hideBadge().then(function(){(0,_utils.addCssClass)(_this11.launcher,"onesignal-bell-launcher-inactive");_this11.setSize("small");var launcher=_this11.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}).then(function(){_this11.showBadge()})["catch"](function(e){_loglevel2["default"].error(e)});else{(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-inactive");this.setSize("small");var launcher=this.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}}else if(this.badgeHasContent())return this.hideBadge().then(function(){(0,_utils.removeCssClass)(_this11.launcher,"onesignal-bell-launcher-inactive");_this11.setSize(_this11.options.size);var launcher=_this11.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}).then(function(){_this11.showBadge()})["catch"](function(e){_loglevel2["default"].error(e)});else{(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-inactive");this.setSize(this.options.size);var launcher=this.launcher;return new Promise(function(resolve,reject){(0,_utils.once)(_this11.launcher,"transitionend",function(e){if(e.target===_this11.launcher){e.stopPropagation();return resolve(e)}})})}}},{key:"setSize",value:function setSize(size){(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-sm");(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-md");(0,_utils.removeCssClass)(this.launcher,"onesignal-bell-launcher-lg");if("small"===size)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-sm");else if("medium"===size)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-md");else if("large"===size)(0,_utils.addCssClass)(this.launcher,"onesignal-bell-launcher-lg");else throw new Error("Invalid OneSignal bell size "+size)}},{key:"container",get:function get(){return document.querySelector("#onesignal-bell-container")}},{key:"launcher",get:function get(){return this.container.querySelector("#onesignal-bell-launcher")}},{key:"launcherButton",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-button")}},{key:"launcherBadge",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-badge")}},{key:"launcherMessage",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-message")}},{key:"launcherMessageBody",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-message-body")}},{key:"launcherDialog",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-dialog")}},{key:"launcherDialogBody",get:function get(){return this.launcher.querySelector(".onesignal-bell-launcher-dialog-body")}}]);return Bell}();module.exports=Bell}},function(module,exports,__webpack_require__){var content=__webpack_require__(13);if("string"==typeof content)content=[[module.id,content,""]];var update=__webpack_require__(15)(content,{});if(content.locals)module.exports=content.locals;if(false){if(!content.locals)module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./bell.scss",function(){var newContent=require("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./bell.scss");if("string"==typeof newContent)newContent=[[module.id,newContent,""]];update(newContent)});module.hot.dispose(function(){update()})}},function(module,exports,__webpack_require__){exports=module.exports=__webpack_require__(14)();exports.push([module.id,'/*!\n* CleanSlate\n*   github.com/premasagar/cleanslate\n*\n*/.onesignal-reset,.onesignal-reset a,.onesignal-reset abbr,.onesignal-reset acronym,.onesignal-reset address,.onesignal-reset applet,.onesignal-reset area,.onesignal-reset article,.onesignal-reset aside,.onesignal-reset audio,.onesignal-reset b,.onesignal-reset big,.onesignal-reset blockquote,.onesignal-reset button,.onesignal-reset canvas,.onesignal-reset caption,.onesignal-reset cite,.onesignal-reset code,.onesignal-reset col,.onesignal-reset colgroup,.onesignal-reset datalist,.onesignal-reset dd,.onesignal-reset del,.onesignal-reset dfn,.onesignal-reset div,.onesignal-reset dl,.onesignal-reset dt,.onesignal-reset em,.onesignal-reset fieldset,.onesignal-reset figcaption,.onesignal-reset figure,.onesignal-reset footer,.onesignal-reset form,.onesignal-reset h1,.onesignal-reset h2,.onesignal-reset h3,.onesignal-reset h4,.onesignal-reset h5,.onesignal-reset h6,.onesignal-reset header,.onesignal-reset hr,.onesignal-reset i,.onesignal-reset iframe,.onesignal-reset img,.onesignal-reset input,.onesignal-reset ins,.onesignal-reset kbd,.onesignal-reset label,.onesignal-reset legend,.onesignal-reset li,.onesignal-reset main,.onesignal-reset map,.onesignal-reset mark,.onesignal-reset menu,.onesignal-reset meta,.onesignal-reset nav,.onesignal-reset object,.onesignal-reset ol,.onesignal-reset optgroup,.onesignal-reset option,.onesignal-reset output,.onesignal-reset p,.onesignal-reset pre,.onesignal-reset progress,.onesignal-reset q,.onesignal-reset samp,.onesignal-reset section,.onesignal-reset select,.onesignal-reset small,.onesignal-reset span,.onesignal-reset strike,.onesignal-reset strong,.onesignal-reset sub,.onesignal-reset summary,.onesignal-reset sup,.onesignal-reset table,.onesignal-reset tbody,.onesignal-reset td,.onesignal-reset textarea,.onesignal-reset tfoot,.onesignal-reset th,.onesignal-reset thead,.onesignal-reset time,.onesignal-reset tr,.onesignal-reset tt,.onesignal-reset ul,.onesignal-reset var,.onesignal-reset video{background-attachment:scroll;background-color:transparent;background-image:none;background-position:0 0;background-repeat:repeat;border-color:#000;border:medium none currentColor;bottom:auto;clear:none;clip:auto;color:inherit;counter-increment:none;counter-reset:none;cursor:auto;direction:inherit;display:inline;float:none;font-family:inherit;font-size:inherit;font-style:inherit;font-variant:normal;font-weight:inherit;height:auto;left:auto;letter-spacing:normal;line-height:inherit;list-style-type:inherit;list-style-position:outside;list-style-image:none;margin:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;outline:medium none invert;overflow:visible;padding:0;position:static;quotes:"" "";right:auto;table-layout:auto;text-align:inherit;text-decoration:inherit;text-indent:0;text-transform:none;top:auto;unicode-bidi:normal;vertical-align:baseline;visibility:inherit;white-space:normal;width:auto;word-spacing:normal;z-index:auto;background-origin:padding-box;background-clip:border-box;background-size:auto;-webkit-border-image:none;-o-border-image:none;border-image:none;border-radius:0;box-shadow:none;box-sizing:content-box;-webkit-column-count:auto;-moz-column-count:auto;column-count:auto;-webkit-column-gap:normal;-moz-column-gap:normal;column-gap:normal;-webkit-column-rule:medium none #000;-moz-column-rule:medium none #000;column-rule:medium none #000;-webkit-column-span:1;-moz-column-span:1;column-span:1;-webkit-column-width:auto;-moz-column-width:auto;column-width:auto;font-feature-settings:normal;overflow-x:visible;overflow-y:visible;-webkit-hyphens:manual;-moz-hyphens:manual;hyphens:manual;-webkit-perspective:none;-ms-perspective:none;-o-perspective:none;perspective:none;-webkit-perspective-origin:50% 50%;-ms-perspective-origin:50% 50%;-o-perspective-origin:50% 50%;perspective-origin:50% 50%;-webkit-backface-visibility:visible;backface-visibility:visible;text-shadow:none;-webkit-transition:all 0s ease 0s;transition:all 0s ease 0s;-webkit-transform:none;-ms-transform:none;transform:none;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform-style:flat;transform-style:flat;word-break:normal}.onesignal-reset,.onesignal-reset address,.onesignal-reset article,.onesignal-reset audio,.onesignal-reset blockquote,.onesignal-reset caption,.onesignal-reset colgroup,.onesignal-reset dd,.onesignal-reset dialog,.onesignal-reset div,.onesignal-reset dl,.onesignal-reset dt,.onesignal-reset fieldset,.onesignal-reset figure,.onesignal-reset footer,.onesignal-reset form,.onesignal-reset h1,.onesignal-reset h2,.onesignal-reset h3,.onesignal-reset h4,.onesignal-reset h5,.onesignal-reset h6,.onesignal-reset header,.onesignal-reset hgroup,.onesignal-reset hr,.onesignal-reset main,.onesignal-reset menu,.onesignal-reset nav,.onesignal-reset ol,.onesignal-reset option,.onesignal-reset p,.onesignal-reset pre,.onesignal-reset progress,.onesignal-reset section,.onesignal-reset summary,.onesignal-reset ul,.onesignal-reset video{display:block}.onesignal-reset h1,.onesignal-reset h2,.onesignal-reset h3,.onesignal-reset h4,.onesignal-reset h5,.onesignal-reset h6{font-weight:700}.onesignal-reset h1{font-size:2em;padding:.67em 0}.onesignal-reset h2{font-size:1.5em;padding:.83em 0}.onesignal-reset h3{font-size:1.17em;padding:.83em 0}.onesignal-reset h4{font-size:1em}.onesignal-reset h5{font-size:.83em}.onesignal-reset p{margin:1em 0}.onesignal-reset table{display:table}.onesignal-reset thead{display:table-header-group}.onesignal-reset tbody{display:table-row-group}.onesignal-reset tfoot{display:table-footer-group}.onesignal-reset tr{display:table-row}.onesignal-reset td,.onesignal-reset th{display:table-cell;padding:2px}.onesignal-reset ol,.onesignal-reset ul{margin:1em 0}.onesignal-reset ol li,.onesignal-reset ol ol li,.onesignal-reset ol ol ol li,.onesignal-reset ol ol ul li,.onesignal-reset ol ul ul li,.onesignal-reset ul li,.onesignal-reset ul ol ol li,.onesignal-reset ul ul li,.onesignal-reset ul ul ol li,.onesignal-reset ul ul ul li{list-style-position:inside;margin-top:.08em}.onesignal-reset ol ol,.onesignal-reset ol ol ol,.onesignal-reset ol ol ul,.onesignal-reset ol ul,.onesignal-reset ol ul ul,.onesignal-reset ul ol,.onesignal-reset ul ol ol,.onesignal-reset ul ul,.onesignal-reset ul ul ol,.onesignal-reset ul ul ul{padding-left:40px;margin:0}.onesignal-reset nav ol,.onesignal-reset nav ul{list-style-type:none}.onesignal-reset menu,.onesignal-reset ul{list-style-type:disc}.onesignal-reset ol{list-style-type:decimal}.onesignal-reset menu menu,.onesignal-reset menu ul,.onesignal-reset ol menu,.onesignal-reset ol ul,.onesignal-reset ul menu,.onesignal-reset ul ul{list-style-type:circle}.onesignal-reset menu menu menu,.onesignal-reset menu menu ul,.onesignal-reset menu ol menu,.onesignal-reset menu ol ul,.onesignal-reset menu ul menu,.onesignal-reset menu ul ul,.onesignal-reset ol menu menu,.onesignal-reset ol menu ul,.onesignal-reset ol ol menu,.onesignal-reset ol ol ul,.onesignal-reset ol ul menu,.onesignal-reset ol ul ul,.onesignal-reset ul menu menu,.onesignal-reset ul menu ul,.onesignal-reset ul ol menu,.onesignal-reset ul ol ul,.onesignal-reset ul ul menu,.onesignal-reset ul ul ul{list-style-type:square}.onesignal-reset li{display:list-item;min-height:auto;min-width:auto;padding-left:20px}.onesignal-reset strong{font-weight:700}.onesignal-reset em{font-style:italic}.onesignal-reset code,.onesignal-reset kbd,.onesignal-reset pre,.onesignal-reset samp{font-family:monospace}.onesignal-reset a{color:blue;text-decoration:underline}.onesignal-reset a:visited{color:#529}.onesignal-reset a,.onesignal-reset a *,.onesignal-reset input[type=checkbox],.onesignal-reset input[type=radio],.onesignal-reset input[type=submit],.onesignal-reset select{cursor:pointer}.onesignal-reset button,.onesignal-reset input[type=submit]{text-align:center;padding:2px 6px 3px;border-radius:4px;text-decoration:none;font-family:arial,helvetica,sans-serif;font-size:small;-webkit-appearance:push-button;color:buttontext;border:1px solid #a6a6a6;background:#d3d3d3;background:#fff;background:-webkit-gradient(linear,left top,left bottom,color-stop(0,#fff),color-stop(100%,#ddd),color-stop(100%,#d1d1d1),color-stop(100%,#ddd));background:-webkit-linear-gradient(top,#fff 0,#ddd 100%,#d1d1d1 100%,#ddd 100%);background:linear-gradient(to bottom,#fff 0,#ddd 100%,#d1d1d1 100%,#ddd 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#ffffff\',endColorstr=\'#dddddd\',GradientType=0);-o-box-shadow:1px 1px 0 #eee;box-shadow:1px 1px 0 #eee;outline:initial}.onesignal-reset button{padding:1px 6px 2px;margin-right:5px}.onesignal-reset input[type=hidden]{display:none}.onesignal-reset textarea{-webkit-appearance:textarea;background:#fff;padding:2px;margin-left:4px;word-wrap:break-word;white-space:pre-wrap;font-size:11px;font-family:arial,helvetica,sans-serif;line-height:13px;resize:both}.onesignal-reset input,.onesignal-reset select,.onesignal-reset textarea{border:1px solid #ccc}.onesignal-reset select{font-size:11px;font-family:helvetica,arial,sans-serif;display:inline-block}.onesignal-reset input:focus,.onesignal-reset textarea:focus{outline:5px auto -webkit-focus-ring-color;outline:initial}.onesignal-reset input[type=text]{background:#fff;padding:1px;font-family:initial;font-size:small}.onesignal-reset input[type=checkbox],.onesignal-reset input[type=radio]{border:1px solid #2b2b2b;border-radius:4px;outline:intial}.onesignal-reset input[type=radio]{margin:2px 2px 3px}.onesignal-reset button:active,.onesignal-reset input[type=submit]:active{background:#3b679e;background:-webkit-gradient(linear,left top,left bottom,color-stop(0,#3b679e),color-stop(50%,#2b88d9),color-stop(51%,#207cca),color-stop(100%,#7db9e8));background:-webkit-linear-gradient(top,#3b679e 0,#2b88d9 50%,#207cca 51%,#7db9e8 100%);background:linear-gradient(to bottom,#3b679e 0,#2b88d9 50%,#207cca 51%,#7db9e8 100%);border-color:#5259b0}.onesignal-reset abbr[title],.onesignal-reset acronym[title],.onesignal-reset dfn[title]{cursor:help;border-bottom-width:1px;border-bottom-style:dotted}.onesignal-reset ins{background-color:#ff9;color:#000}.onesignal-reset del{text-decoration:line-through}.onesignal-reset blockquote,.onesignal-reset q{quotes:none}.onesignal-reset blockquote:after,.onesignal-reset blockquote:before,.onesignal-reset li:after,.onesignal-reset li:before,.onesignal-reset q:after,.onesignal-reset q:before{content:""}.onesignal-reset input,.onesignal-reset select{vertical-align:middle}.onesignal-reset table{border-collapse:collapse;border-spacing:0}.onesignal-reset hr{display:block;height:1px;border:0;border-top:1px solid #ccc;margin:1em 0}.onesignal-reset [dir=rtl]{direction:rtl}.onesignal-reset mark{background-color:#ff9;color:#000;font-style:italic;font-weight:700}.onesignal-reset menu{padding-left:40px;padding-top:8px}.onesignal-reset [hidden],.onesignal-reset template{display:none}.onesignal-reset abbr[title]{border-bottom:1px dotted}.onesignal-reset sub,.onesignal-reset sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.onesignal-reset sup{top:-.5em}.onesignal-reset sub{bottom:-.25em}.onesignal-reset img{border:0}.onesignal-reset figure{margin:0}.onesignal-reset textarea{overflow:auto;vertical-align:top}.onesignal-reset{font-size:medium;line-height:1;direction:ltr;text-align:left;text-align:start;font-family:Times New Roman,Times,serif;color:#000;font-style:normal;font-weight:400;text-decoration:none;list-style-type:disc}.onesignal-reset pre{white-space:pre}#onesignal-bell-container.onesignal-reset{z-index:2147483000;position:fixed}#onesignal-bell-container.onesignal-reset.onesignal-bell-container-bottom-left{bottom:0;left:0}#onesignal-bell-container.onesignal-reset.onesignal-bell-container-bottom-right{bottom:0;right:0}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:absolute;z-index:2147483000;font-family:Helvetica Neue,Helvetica,Arial,sans-serif;transform:scale(.01) translateZ(0);opacity:0;transition:transform 175ms ease-in-out,opacity 175ms ease-in-out;width:330px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left{bottom:20px;left:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm{transform-origin:16px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-message{left:42px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog{bottom:39px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:before{right:5px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:after{right:7px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md{transform-origin:24px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-message{left:61px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog{bottom:58px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:before{right:12px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:after{right:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg{transform-origin:32px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-message{left:81px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog{bottom:78px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:before{right:18px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:after{right:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-badge{left:4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-message{transform-origin:left center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-message:after{right:100%;border-right-color:#000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-left .onesignal-bell-launcher-button{left:0}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right{bottom:20px;right:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm{transform-origin:314px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-message{right:42px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog{bottom:39px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:before{right:5px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:after{right:7px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md{transform-origin:306px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-message{right:61px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog{bottom:58px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:before{right:12px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:after{right:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg{transform-origin:298px center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-message{right:81px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog{bottom:78px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:before{right:18px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:after{right:20px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-badge{right:4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-message{transform-origin:right center}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-message:after{left:100%;border-left-color:#000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-bottom-right .onesignal-bell-launcher-button{right:0}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-button{position:absolute;bottom:0;border-radius:50%;transition:transform 175ms ease-in-out,border 175ms ease-in-out,width 175ms ease-in-out,height 175ms ease-in-out;cursor:pointer;z-index:2147483000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-button svg{width:100%;height:100%;-webkit-filter:drop-shadow(0 2px 4px rgba(34,36,38,.35));filter:drop-shadow(0 2px 4px rgba(34,36,38,.35))}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-button.onesignal-bell-launcher-button-hover{cursor:pointer}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-badge{position:absolute;bottom:0;border-radius:50%;text-align:center;top:0;cursor:pointer;-webkit-filter:drop-shadow(0 2px 4px rgba(34,36,38,0));filter:drop-shadow(0 2px 4px rgba(34,36,38,0));transition:transform 175ms ease-in-out,border 175ms ease-in-out,opacity .21s ease-in-out,width .21s ease-in-out,height .21s ease-in-out,position .21s ease-in-out,right .21s ease-in-out,top .21s ease-in-out,bottom .21s ease-in-out,left .21s ease-in-out;z-index:2147483400;opacity:0;transform:scale(.01);pointer-events:none}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-badge.onesignal-bell-launcher-badge-hover{cursor:pointer}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-badge.onesignal-bell-launcher-badge-opened{opacity:1;transform:scale(1)}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message{position:absolute;color:#fff;background:#000;cursor:pointer;border-radius:5px;transform:translateY(-50%) scaleX(0) translateZ(0);opacity:0;pointer-events:none;transition:transform 175ms ease-in-out,opacity 175ms ease-in-out;top:50%;z-index:2147481000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message:after{top:50%;border:solid transparent;content:" ";height:0;width:0;position:absolute;pointer-events:none;border-color:transparent}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{z-index:2147482000;max-width:100%;white-space:nowrap;text-overflow:ellipsis}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-message.onesignal-bell-launcher-message-opened{pointer-events:auto;opacity:1;transform:translateY(-50%) scaleX(1) translateZ(0)}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog{cursor:pointer;position:absolute;right:0;background-color:#fff;border-radius:5px;border:1px solid rgba(0,0,0,.1);-webkit-filter:drop-shadow(0 2px 2px rgba(34,36,38,.15));filter:drop-shadow(0 2px 2px rgba(34,36,38,.15));opacity:0;transform:scale(0) translateZ(0);transition:transform 175ms ease-in-out,opacity 175ms ease-in-out;transform-origin:right bottom;z-index:2147481000}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog:after,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog:before{top:100%;border:solid transparent;content:" ";height:0;width:0;position:absolute}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body{z-index:2147482000;max-width:100%;white-space:nowrap;text-overflow:ellipsis;font-family:Helvetica Neue,Helvetica,Arial,sans-serif}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher .onesignal-bell-launcher-dialog.onesignal-bell-launcher-dialog-opened{transform:scale(1) translateZ(0);opacity:1}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm{height:32px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-button{width:32px;height:32px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-badge{font-size:8px;width:12px;height:12px;line-height:12px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-message{padding:9.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-message:after{border-width:6.6px;margin-top:-6.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog{padding:3.2px 9.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:after{border-top-color:#fff;border-width:6.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog:before{border-top-color:rgba(0,0,0,.1);border-width:8.6px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-sm .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body h1{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md{height:48px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-button{width:48px;height:48px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-badge{font-size:12px;width:18px;height:18px;line-height:18px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-message{padding:14.4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-message:after{border-width:9.9px;margin-top:-9.9px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog{padding:4.8px 14.4px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:after{border-top-color:#fff;border-width:9.9px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog:before{border-top-color:rgba(0,0,0,.1);border-width:11.9px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-md .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body h1{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg{height:64px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-button{width:64px;height:64px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-badge{font-size:12px;width:24px;height:24px;line-height:24px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-message{padding:19.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-message:after{border-width:13.2px;margin-top:-13.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-message .onesignal-bell-launcher-message-body{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog{padding:6.4px 19.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:after{border-top-color:#fff;border-width:13.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog:before{border-top-color:rgba(0,0,0,.1);border-width:15.2px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-lg .onesignal-bell-launcher-dialog .onesignal-bell-launcher-dialog-body h1{font-size:14px}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button svg .background{fill:#e54b4d}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button svg .foreground{fill:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button svg .stroke{fill:none;stroke:#fff;stroke-width:3px;stroke-miterlimit:10}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button.onesignal-bell-launcher-badge-active svg .background,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-button.onesignal-bell-launcher-button-active svg .background{fill:#dd2022!important}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-default .onesignal-bell-launcher-badge{border:1px solid #fff;background:#000;color:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button svg .background{fill:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button svg .foreground{fill:#e54b4d}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button svg .stroke{fill:none;stroke:#e54b4d;stroke-width:3px;stroke-miterlimit:10}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button.onesignal-bell-launcher-badge-active svg .background,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-button.onesignal-bell-launcher-button-active svg .background{fill:#f2f2f2!important}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher.onesignal-bell-launcher-theme-inverse .onesignal-bell-launcher-badge{border:1px solid #fff;background:#e54b4d;color:#fff}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-active,#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-enabled{transform:scale(1);opacity:1}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-disabled{visibility:hidden}#onesignal-bell-container.onesignal-reset .onesignal-bell-launcher-inactive{opacity:.6}#onesignal-bell-container.onesignal-reset .pulse-ring{border:7px solid hsla(0,0%,100%,.4);border-radius:50%;position:absolute;left:0;top:0;bottom:0;right:0;-webkit-animation:pulse .35s ease-in-out;animation:pulse .35s ease-in-out;-webkit-animation-iteration-count:1;animation-iteration-count:1;opacity:0;z-index:1000;pointer-events:none}@media print{#onesignal-bell-container{display:none}}@-webkit-keyframes pulse{0%{-webkit-transform:scale(.1);opacity:0;border-width:10px}50%{opacity:1;border-width:5px}to{-webkit-transform:scale(1.2);opacity:0;border-width:1px}}',""]);
},function(module,exports){module.exports=function(){var list=[];list.toString=function toString(){var result=[];for(var i=0;i<this.length;i++){var item=this[i];if(item[2])result.push("@media "+item[2]+"{"+item[1]+"}");else result.push(item[1])}return result.join("")};list.i=function(modules,mediaQuery){if("string"==typeof modules)modules=[[null,modules,""]];var alreadyImportedModules={};for(var i=0;i<this.length;i++){var id=this[i][0];if("number"==typeof id)alreadyImportedModules[id]=true}for(i=0;i<modules.length;i++){var item=modules[i];if("number"!=typeof item[0]||!alreadyImportedModules[item[0]]){if(mediaQuery&&!item[2])item[2]=mediaQuery;else if(mediaQuery)item[2]="("+item[2]+") and ("+mediaQuery+")";list.push(item)}}};return list}},function(module,exports,__webpack_require__){function addStylesToDom(styles,options){for(var i=0;i<styles.length;i++){var item=styles[i];var domStyle=stylesInDom[item.id];if(domStyle){domStyle.refs++;for(var j=0;j<domStyle.parts.length;j++)domStyle.parts[j](item.parts[j]);for(;j<item.parts.length;j++)domStyle.parts.push(addStyle(item.parts[j],options))}else{var parts=[];for(var j=0;j<item.parts.length;j++)parts.push(addStyle(item.parts[j],options));stylesInDom[item.id]={id:item.id,refs:1,parts:parts}}}}function listToStyles(list){var styles=[];var newStyles={};for(var i=0;i<list.length;i++){var item=list[i];var id=item[0];var css=item[1];var media=item[2];var sourceMap=item[3];var part={css:css,media:media,sourceMap:sourceMap};if(!newStyles[id])styles.push(newStyles[id]={id:id,parts:[part]});else newStyles[id].parts.push(part)}return styles}function insertStyleElement(options,styleElement){var head=getHeadElement();var lastStyleElementInsertedAtTop=styleElementsInsertedAtTop[styleElementsInsertedAtTop.length-1];if("top"===options.insertAt){if(!lastStyleElementInsertedAtTop)head.insertBefore(styleElement,head.firstChild);else if(lastStyleElementInsertedAtTop.nextSibling)head.insertBefore(styleElement,lastStyleElementInsertedAtTop.nextSibling);else head.appendChild(styleElement);styleElementsInsertedAtTop.push(styleElement)}else if("bottom"===options.insertAt)head.appendChild(styleElement);else throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.")}function removeStyleElement(styleElement){styleElement.parentNode.removeChild(styleElement);var idx=styleElementsInsertedAtTop.indexOf(styleElement);if(idx>=0)styleElementsInsertedAtTop.splice(idx,1)}function createStyleElement(options){var styleElement=document.createElement("style");styleElement.type="text/css";insertStyleElement(options,styleElement);return styleElement}function createLinkElement(options){var linkElement=document.createElement("link");linkElement.rel="stylesheet";insertStyleElement(options,linkElement);return linkElement}function addStyle(obj,options){var styleElement,update,remove;if(options.singleton){var styleIndex=singletonCounter++;styleElement=singletonElement||(singletonElement=createStyleElement(options));update=applyToSingletonTag.bind(null,styleElement,styleIndex,false);remove=applyToSingletonTag.bind(null,styleElement,styleIndex,true)}else if(obj.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa){styleElement=createLinkElement(options);update=updateLink.bind(null,styleElement);remove=function(){removeStyleElement(styleElement);if(styleElement.href)URL.revokeObjectURL(styleElement.href)}}else{styleElement=createStyleElement(options);update=applyToTag.bind(null,styleElement);remove=function(){removeStyleElement(styleElement)}}update(obj);return function updateStyle(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap)return;update(obj=newObj)}else remove()}}function applyToSingletonTag(styleElement,index,remove,obj){var css=remove?"":obj.css;if(styleElement.styleSheet)styleElement.styleSheet.cssText=replaceText(index,css);else{var cssNode=document.createTextNode(css);var childNodes=styleElement.childNodes;if(childNodes[index])styleElement.removeChild(childNodes[index]);if(childNodes.length)styleElement.insertBefore(cssNode,childNodes[index]);else styleElement.appendChild(cssNode)}}function applyToTag(styleElement,obj){var css=obj.css;var media=obj.media;var sourceMap=obj.sourceMap;if(media)styleElement.setAttribute("media",media);if(styleElement.styleSheet)styleElement.styleSheet.cssText=css;else{for(;styleElement.firstChild;)styleElement.removeChild(styleElement.firstChild);styleElement.appendChild(document.createTextNode(css))}}function updateLink(linkElement,obj){var css=obj.css;var media=obj.media;var sourceMap=obj.sourceMap;if(sourceMap)css+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))+" */";var blob=new Blob([css],{type:"text/css"});var oldSrc=linkElement.href;linkElement.href=URL.createObjectURL(blob);if(oldSrc)URL.revokeObjectURL(oldSrc)}var stylesInDom={},memoize=function(fn){var memo;return function(){if("undefined"==typeof memo)memo=fn.apply(this,arguments);return memo}},isOldIE=memoize(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),getHeadElement=memoize(function(){return document.head||document.getElementsByTagName("head")[0]}),singletonElement=null,singletonCounter=0,styleElementsInsertedAtTop=[];module.exports=function(list,options){if(true)if("object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");options=options||{};if("undefined"==typeof options.singleton)options.singleton=isOldIE();if("undefined"==typeof options.insertAt)options.insertAt="bottom";var styles=listToStyles(list);addStylesToDom(styles,options);return function update(newList){var mayRemove=[];for(var i=0;i<styles.length;i++){var item=styles[i];var domStyle=stylesInDom[item.id];domStyle.refs--;mayRemove.push(domStyle)}if(newList){var newStyles=listToStyles(newList);addStylesToDom(newStyles,options)}for(var i=0;i<mayRemove.length;i++){var domStyle=mayRemove[i];if(0===domStyle.refs){for(var j=0;j<domStyle.parts.length;j++)domStyle.parts[j]();delete stylesInDom[domStyle.id]}}}};var replaceText=function(){var textStore=[];return function(index,replacement){textStore[index]=replacement;return textStore.filter(Boolean).join("\n")}}()},function(module,exports){module.exports='<?xml version="1.0" encoding="utf-8"?>\n<!-- Generator: Adobe Illustrator 19.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version="1.1" class="onesignal-bell-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n	 width="99.7px" height="99.7px" viewBox="0 0 99.7 99.7" style="enable-background:new 0 0 99.7 99.7;" xml:space="preserve">\n<g>\n	<circle class="background" cx="49.9" cy="49.9" r="49.9"/>\n	<g id="Layer_2">\n		<g>\n			<path class="foreground" d="M50.1,66.2H27.7c0,0-2-0.2-2-2.1c0-1.9,1.7-2,1.7-2s6.7-3.2,6.7-5.5c0-2.3-1.1-3.9-1.1-13.3\n				s6-16.6,13.2-16.6c0,0,1-2.4,3.9-2.4c2.8,0,3.8,2.4,3.8,2.4c7.2,0,13.2,7.2,13.2,16.6s-1,11-1,13.3c0,2.3,6.7,5.5,6.7,5.5\n				s1.7,0.1,1.7,2c0,1.8-2.1,2.1-2.1,2.1H50.1z"/>\n			<path class="foreground" d="M42.9,68.5h14.5c0,0-1,6.3-7.2,6.3S42.9,68.5,42.9,68.5z"/>\n			<ellipse class="stroke" cx="49.9" cy="49.9" rx="37.4" ry="36.9"/>\n		</g>\n	</g>\n</g>\n</svg>\n'}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vT25lU2lnbmFsU0RLLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA1ZGNhY2NmOTNhNzNiNzBhNzRjYyIsIndlYnBhY2s6Ly8vLi9zcmMvZW50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nkay5qcz9kZmIwIiwid2VicGFjazovLy8uL3NyYy9zZGsuanMiLCJ3ZWJwYWNrOi8vLy4vfi93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL34vbG9nbGV2ZWwvbGliL2xvZ2xldmVsLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpbWl0U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9iZWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9iZWxsLnNjc3M/NmI4YyIsIndlYnBhY2s6Ly8vLi9zcmMvYmVsbC5zY3NzIiwid2VicGFjazovLy8uL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vfi9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9iZWxsLnN2ZyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJPbmVTaWduYWwiLCJwcmVkZWZpbmVkT25lU2lnbmFsUHVzaGVzIiwiX3Byb2Nlc3NfcHVzaGVzIiwiZ2xvYmFsIiwidGhpcyIsImZldGNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX3ZhcnMiLCJfYXBpIiwiX2xvZ2xldmVsIiwiX2xvZ2xldmVsMiIsIl9saW1pdFN0b3JlIiwiX2xpbWl0U3RvcmUyIiwiX2V2ZW50cyIsIl9iZWxsIiwiX2JlbGwyIiwiX3V0aWxzIiwiX1ZFUlNJT04iLCJfSE9TVF9VUkwiLCJIT1NUX1VSTCIsIl9hcHBfaWQiLCJfdGFnc1RvU2VuZE9uUmVnaXN0ZXIiLCJfbm90aWZpY2F0aW9uT3BlbmVkX2NhbGxiYWNrIiwiX2lkc0F2YWlsYWJsZV9jYWxsYmFjayIsIl9kZWZhdWx0TGF1bmNoVVJMIiwiX2luaXRPcHRpb25zIiwiX2h0dHBSZWdpc3RyYXRpb24iLCJfbWFpbl9wYWdlX3BvcnQiLCJfaXNOb3RpZmljYXRpb25FbmFibGVkQ2FsbGJhY2siLCJfc3Vic2NyaXB0aW9uU2V0IiwiX2luaXRPbmVTaWduYWxIdHRwIiwiX3Nlc3Npb25JZnJhbWVBZGRlZCIsIl91c2VIdHRwTW9kZSIsIl93aW5kb3dXaWR0aCIsIl93aW5kb3dIZWlnaHQiLCJfaXNOZXdWaXNpdG9yIiwiX2lzSW5pdGlhbGl6ZWQiLCJiZWxsIiwiTE9HR0lORyIsIlNFUlZJQ0VfV09SS0VSX1VQREFURVJfUEFUSCIsIlNFUlZJQ0VfV09SS0VSX1BBVEgiLCJTRVJWSUNFX1dPUktFUl9QQVJBTSIsIl9lbnN1cmVEYkluc3RhbmNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfb25lU2lnbmFsX2RiIiwicmVxdWVzdCIsImluZGV4ZWREQiIsIm9wZW4iLCJvbnN1Y2Nlc3MiLCJldmVudCIsImRhdGFiYXNlIiwidGFyZ2V0IiwicmVzdWx0Iiwib25lcnJvciIsImVycm9yIiwib251cGdyYWRlbmVlZGVkIiwiZGVidWciLCJkYiIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsIl9nZXREYlZhbHVlIiwidGFibGUiLCJrZXkiLCJ0aGVuIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZSIsImdldCIsIl90cmlnZ2VyRXZlbnRfZGJWYWx1ZVJldHJpZXZlZCIsImVycm9yQ29kZSIsImUiLCJfZ2V0RGJWYWx1ZXMiLCJqc29uUmVzdWx0IiwiY3Vyc29yIiwib3BlbkN1cnNvciIsInZhbHVlIiwiX3B1dERiVmFsdWUiLCJwdXQiLCJfdHJpZ2dlckV2ZW50X2RiVmFsdWVTZXQiLCJfZGVsZXRlRGJWYWx1ZSIsIl9zZW5kVG9PbmVTaWduYWxBcGkiLCJ1cmwiLCJhY3Rpb24iLCJpbkRhdGEiLCJjYWxsYmFjayIsImZhaWxlZENhbGxiYWNrIiwiY29udGVudHMiLCJtZXRob2QiLCJoZWFkZXJzIiwiQ29udGVudC10eXBlIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXMiLCJyZXNwb25zZSIsIkVycm9yIiwic3RhdHVzVGV4dCIsImpzb24iLCJqc29uRGF0YSIsIl9nZXRMYW5ndWFnZSIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwibGVuZ3RoIiwic3Vic3RyaW5nIiwiX2dldFBsYXllcklkIiwiX2dldFBsYXllcklkX2dvdFVzZXJJZCIsIl9nZXRCcm93c2VyTmFtZSIsImFwcFZlcnNpb24iLCJtYXRjaCIsInVzZXJBZ2VudCIsIl9yZWdpc3RlcldpdGhPbmVTaWduYWwiLCJhcHBJZCIsInJlZ2lzdHJhdGlvbklkIiwiZGV2aWNlVHlwZSIsIl9yZWdpc3RlcldpdGhPbmVTaWduYWxfR290VXNlcklkIiwidXNlcklkUmVzdWx0IiwiX2dldE5vdGlmaWNhdGlvblR5cGVzIiwibm90aWZfdHlwZXMiLCJyZXF1ZXN0VXJsIiwiYXBwX2lkIiwiZGV2aWNlX3R5cGUiLCJ0aW1lem9uZSIsIkRhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImRldmljZV9tb2RlbCIsInBsYXRmb3JtIiwiZGV2aWNlX29zIiwic2RrIiwibm90aWZpY2F0aW9uX3R5cGVzIiwiaWRlbnRpZmllciIsInR5cGUiLCJyZWdpc3RlcmVkQ2FsbGJhY2siLCJyZXNwb25zZUpTT04iLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJfc2VuZFVuc2VudFRhZ3MiLCJ1c2VySWQiLCJjdXJyX2NhbGxiYWNrIiwicG9wIiwiY3JlYXRvciIsIm9wZW5lciIsInBhcmVudCIsIl9zYWZlUG9zdE1lc3NhZ2UiLCJpZHNBdmFpbGFibGUiLCJvcmlnaW4iLCJ3aW5kb3ciLCJjbG9zZSIsInNlbmRUYWdzIiwic2V0RGVmYXVsdE5vdGlmaWNhdGlvblVybCIsInNldERlZmF1bHRJY29uIiwiaWNvbiIsInNldERlZmF1bHRUaXRsZSIsInRpdGxlIiwiX3Zpc2liaWxpdHljaGFuZ2UiLCJkb2N1bWVudCIsInZpc2liaWxpdHlTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfc2Vzc2lvbkluaXQiLCJvbkN1c3RvbVByb21wdENsaWNrZWQiLCJkZXRhaWwiLCJfY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZCIsIm9uTmF0aXZlUHJvbXB0Q2hhbmdlZCIsIl9vblN1YnNjcmlwdGlvbkNoYW5nZWQiLCJ3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzIiwid2VsY29tZV9ub3RpZmljYXRpb25fZGlzYWJsZWQiLCJ1bmRlZmluZWQiLCJtZXNzYWdlIiwic2VuZE5vdGlmaWNhdGlvbiIsImVuIiwidHJpZ2dlckV2ZW50IiwiX29uRGJWYWx1ZVJldHJpZXZlZCIsIl9vbkRiVmFsdWVTZXQiLCJpbmZvIiwiX29uSW50ZXJuYWxTdWJzY3JpcHRpb25TZXQiLCJuZXdTdWJzY3JpcHRpb25WYWx1ZSIsInBlcm1pc3Npb25zIiwibGFzdFBlcm1pc3Npb24iLCJjdXJyZW50UGVybWlzc2lvbiIsImlkcyIsImxhc3RJZCIsImN1cnJlbnRJZCIsInN1YnNjcmlwdGlvblN0YXRlcyIsImxhc3RTdWJzY3JpcHRpb25TdGF0ZSIsImN1cnJlbnRTdWJzY3JpcHRpb25TdGF0ZSIsIm5ld1N1YnNjcmlwdGlvblN0YXRlIiwibGFzdFRyaWdnZXJUaW1lcyIsIm5vdyIsImN1cnJlbnRUaW1lIiwibGFzdFRyaWdnZXJUaW1lIiwiZWxhcHNlZFRpbWVTZWNvbmRzIiwibGFzdEV2ZW50U3RhdGVzIiwiY3VycmVudFN0YXRlIiwibGFzdFN0YXRlIiwic2hvdWxkTm90VHJpZ2dlckV2ZW50IiwiX3RyaWdnZXJFdmVudF9zdWJzY3JpcHRpb25DaGFuZ2VkIiwiaW5pdCIsIm9wdGlvbnMiLCJ3YXJuIiwiZW5hYmxlQWxsIiwic2V0TGV2ZWwiLCJpc1B1c2hOb3RpZmljYXRpb25zU3VwcG9ydGVkIiwiaXNCcm93c2VyRmlyZWZveCIsImdldEZpcmVmb3hWZXJzaW9uIiwiX3VzaW5nTmF0aXZlUGVybWlzc2lvbkhvb2siLCJjdXJyZW50Tm90aWZpY2F0aW9uUGVybWlzc2lvbiIsIl9nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uIiwicXVlcnkiLCJuYW1lIiwicGVybWlzc2lvblN0YXR1cyIsIm9uY2hhbmdlIiwicmVjZW50UGVybWlzc2lvbnMiLCJwZXJtaXNzaW9uQmVmb3JlUHJvbXB0IiwiX3RyaWdnZXJFdmVudF9uYXRpdmVQcm9tcHRQZXJtaXNzaW9uQ2hhbmdlZCIsInN0b3JlVmFsdWUiLCJfZ2V0U3Vic2NyaXB0aW9uIiwiY3VycmVudFN1YnNjcmlwdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc1N1cHBvcnRlZFNhZmFyaSIsIl9zdXBwb3J0c0RpcmVjdFBlcm1pc3Npb24iLCJzdWJkb21haW5OYW1lIiwiREVWX0hPU1QiLCJzIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInJlYWR5U3RhdGUiLCJfaW50ZXJuYWxJbml0IiwiaXNCcm93c2VyRW52Iiwic2l6ZSIsInBvc2l0aW9uIiwidGhlbWUiLCJjcmVhdGUiLCJhbGwiLCJfaW50ZXJuYWxJbml0X0dvdEFwcFJlZ2lzdHJhdGlvblN1YnNjcmlwdGlvbklkcyIsImFwcElkUmVzdWx0IiwicmVnaXN0cmF0aW9uSWRSZXN1bHQiLCJzdWJzY3JpcHRpb25SZXN1bHQiLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsIk5vdGlmaWNhdGlvbiIsInBlcm1pc3Npb24iLCJhdXRvUmVnaXN0ZXIiLCJyZWdpc3RlckZvclB1c2hOb3RpZmljYXRpb25zIiwiZnJvbVJlZ2lzdGVyRm9yIiwiX2luaXRIdHRwIiwiY29udGludWVQcmVzc2VkIiwic2V0U3Vic2NyaXB0aW9uIiwiaXNJZnJhbWUiLCJtZXNzYWdlQ2hhbm5lbCIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJkYXRhIiwiaW5pdE9wdGlvbnMiLCJkZWZhdWx0VXJsIiwiZGVmYXVsdFRpdGxlIiwiZGVmYXVsdEljb24iLCJwYXJlbnRfdXJsIiwicmVnaXN0ZXJGb3JQdXNoTm90aWZpY2F0aW9uc19Hb3ROb3RpZmljYXRpb25PcGVuZWQiLCJub3RpZmljYXRpb25PcGVuZWRSZXN1bHQiLCJvcGVuZWROb3RpZmljYXRpb24iLCJnZXROb3RpZmljYXRpb25QZXJtaXNzaW9uIiwiX2dldFN1YmRvbWFpblN0YXRlIiwiY3VyU3RhdGUiLCJzZXRTdWJkb21haW5TdGF0ZSIsIm9uZVNpZ25hbEluaXRQYWdlUmVhZHkiLCJwb3J0MiIsIl9pbml0U2F2ZVN0YXRlIiwibG9jYXRpb24iLCJzZWFyY2giLCJpbmRleE9mIiwicGxheWVyX2lkIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwiX2VuYWJsZU5vdGlmaWNhdGlvbnMiLCJfcmVnaXN0ZXJFcnJvciIsInN0YXRlIiwibm90aWZQZXJtc3Npb24iLCJzdWJzY3JpcHRpb25TZXQiLCJpc1B1c2hFbmFibGVkIiwicHJvdG9jb2wiLCJob3N0IiwiaG9zdFBhZ2VQcm90b2NvbCIsImR1YWxTY3JlZW5MZWZ0Iiwic2NyZWVuTGVmdCIsInNjcmVlbiIsImxlZnQiLCJkdWFsU2NyZWVuVG9wIiwic2NyZWVuVG9wIiwidG9wIiwidGhpc1dpZHRoIiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwid2lkdGgiLCJ0aGlzSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJoZWlnaHQiLCJjaGlsZFdpZHRoIiwiY2hpbGRIZWlnaHQiLCJtZXNzYWdlX2xvY2FsaXphdGlvbl9vcHRzIiwibWVzc2FnZV9sb2NhbGl6YXRpb25fb3B0c19zdHIiLCJtZXNzYWdlX2xvY2FsaXphdGlvbl9wYXJhbXMiLCJpIiwiZW5jb2RlZF92YWx1ZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImNoaWxkV2luZG93IiwiZm9jdXMiLCJfYWRkU2Vzc2lvbklmcmFtZSIsInNhZmFyaV93ZWJfaWQiLCJub3RpZmljYXRpb25QZXJtaXNzaW9uQmVmb3JlUmVxdWVzdCIsInNhZmFyaSIsInB1c2hOb3RpZmljYXRpb24iLCJyZXF1ZXN0UGVybWlzc2lvbiIsIm5vdGlmaWNhdGlvblBlcm1pc3Npb25BZnRlclJlcXVlc3QiLCJkZXZpY2VUb2tlbiIsInRvTG93ZXJDYXNlIiwibW9kYWxQcm9tcHQiLCJpc1B1c2hOb3RpZmljYXRpb25zRW5hYmxlZCIsInB1c2hFbmFibGVkIiwiZWxlbWVudCIsImlubmVySFRNTCIsImlmcmFtZVN0eWxlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpZnJhbWVOb2RlIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJjc3NUZXh0Iiwic3JjIiwidG9TdHJpbmciLCJnZXRFbGVtZW50QnlJZCIsIl9yZWdpc3RlckZvclczQ1B1c2giLCJfcmVnaXN0ZXJGb3JXM0NQdXNoX0dvdFJlZ2lzdHJhdGlvbklkIiwiZ2V0UmVnaXN0cmF0aW9uIiwic3dfcGF0aCIsInBhdGgiLCJhY3RpdmUiLCJzY3JpcHRVUkwiLCJ2ZXJzaW9uUmVzdWx0IiwidW5yZWdpc3RlciIsImluc3RhbGxpbmciLCJub2RlIiwiZGlzcGxheSIsImVyciIsImV4aXN0aW5nU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsIlNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJwcm90b3R5cGUiLCJyZWFkeSIsInNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJfc3Vic2NyaWJlRm9yUHVzaCIsInNhZmFyaVdlYklkIiwiX3RyaWdnZXJFdmVudF9jdXN0b21Qcm9tcHRDbGlja2VkIiwiY2xpY2tSZXN1bHQiLCJmcm9tIiwidG8iLCJfdHJpZ2dlckV2ZW50X2ludGVybmFsU3Vic2NyaXB0aW9uU2V0IiwicHVzaE1hbmFnZXIiLCJzdWJzY3JpYmUiLCJ1c2VyVmlzaWJsZU9ubHkiLCJzdWJzY3JpcHRpb24iLCJfc3Vic2NyaWJlRm9yUHVzaF9Hb3RBcHBJZCIsInN1YnNjcmlwdGlvbklkIiwiZW5kcG9pbnQiLCJyZXBsYWNlIiwiUmVnRXhwIiwiaXNTdXBwb3J0ZWRGaXJlRm94IiwiY29kZSIsInNlbmRUYWciLCJqc29uS2V5VmFsdWUiLCJqc29uUGFpciIsInNlbmRUYWdzX0dvdFVzZXJJZCIsInRhZ3MiLCJyZXN1bHRPYmoiLCJfb2JqIiwiZGVsZXRlVGFnIiwiZGVsZXRlVGFncyIsImtleUFycmF5IiwiX2hhbmRsZU5vdGlmaWNhdGlvbk9wZW5lZCIsIm5vdGlmaWNhdGlvbkRhdGEiLCJwYXJzZSIsIm5vdGlmaWNhdGlvbiIsInRhZyIsIl9oYW5kbGVOb3RpZmljYXRpb25PcGVuZWRfR290QXBwVXNlcklkcyIsInJlc3VsdHMiLCJvcGVuZWQiLCJ3YWl0VW50aWwiLCJjbGllbnRzIiwibWF0Y2hBbGwiLCJjbGllbnRMaXN0IiwibGF1bmNoVVJMIiwicmVnaXN0cmF0aW9uIiwic2NvcGUiLCJjbGllbnQiLCJwb3N0TWVzc2FnZSIsIm9wZW5XaW5kb3ciLCJfZ2V0VGl0bGUiLCJpbmNvbWluZ1RpdGxlIiwiX2dldFRpdGxlX0dvdERlZmF1bHRQYWdlVGl0bGVzIiwiZGVmYXVsdFRpdGxlUmVzdWx0IiwicGFnZVRpdGxlUmVzdWx0IiwiX2hhbmRsZUdDTU1lc3NhZ2UiLCJ0ZXh0IiwiX2hhbmRsZUdDTU1lc3NhZ2VfR290RGVmYXVsdEljb24iLCJkZWZhdWx0SWNvblJlc3VsdCIsIl9nZXRMYXN0Tm90aWZpY2F0aW9ucyIsImN1c3RvbSIsImFsZXJ0IiwiYWRkaXRpb25hbERhdGEiLCJhIiwidSIsInNob3dOb3RpZmljYXRpb24iLCJkZWZhdWx0VXJsUmVzdWx0IiwiaXRlbUNhbGxiYWNrIiwiY29tcGxldGVDYWxsYmFjayIsIl9nZXRMYXN0Tm90aWZpY2F0aW9uc19Hb3RVc2VySWQiLCJfbGlzdGVuZXJfcmVjZWl2ZU1lc3NhZ2UiLCJyZWNlaXZlTWVzc2FnZSIsIlVSTCIsInBvcnRzIiwiZXZlbnREYXRhIiwiX2lmcmFtZVBvcnQiLCJfZmlyZU5vdGlmaWNhdGlvbkVuYWJsZWRDYWxsYmFjayIsImh0dHBzUHJvbXB0QWNjZXB0ZWQiLCJlbGVtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaHR0cHNQcm9tcHRDYW5jZWxlZCIsImh0dHBQcm9tcHRBY2NlcHRlZCIsImh0dHBQcm9tcHRDYW5jZWxlZCIsImFkZExpc3RlbmVyRm9yTm90aWZpY2F0aW9uT3BlbmVkIiwiZ2V0SWRzQXZhaWxhYmxlIiwicHVzaCIsImdldElkc0F2YWlsYWJsZV9Hb3RVc2VyUmVnaXN0cmF0aW9uSWRzIiwiZ2V0VGFncyIsImlzQnJvd3NlclNhZmFyaSIsImRiX3N1YnNjcmlwdGlvblNldCIsIm5ld1N1YnNjcmlwdGlvbiIsInNldFN1YnNjcmlwdGlvblNldENhbGxiYWNrIiwidGFyZ2V0T3JpZ2luIiwicmVjZWl2ZXIiLCJ0T3JpZ2luIiwic3RhcnRzV2l0aCIsInF1ZXJ5RGljdCIsInN1YnN0ciIsInNwbGl0IiwiZm9yRWFjaCIsIml0ZW0iLCJ2YWxpZFByZVVSTFJlZ2V4IiwiYXJyYXkiLCJmdW5jdGlvbk5hbWUiLCJzaGlmdCIsImFwcGx5IiwiaW1wb3J0U2NyaXB0cyIsInNlbGYiLCJpc1NXb25TdWJkb21haW4iLCJocmVmIiwicGF0aG5hbWUiLCJjYWNoZXMiLCJjYWNoZSIsImFkZEFsbCIsInJlc3BvbmRXaXRoIiwibm9ybWFsaXplTmFtZSIsIlN0cmluZyIsInRlc3QiLCJUeXBlRXJyb3IiLCJub3JtYWxpemVWYWx1ZSIsIkhlYWRlcnMiLCJtYXAiLCJhcHBlbmQiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsIm9ubG9hZCIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJyZWFkQmxvYkFzVGV4dCIsInJlYWRBc1RleHQiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0Iiwic3VwcG9ydCIsIkJsb2IiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwicmVqZWN0ZWQiLCJkZWNvZGUiLCJub3JtYWxpemVNZXRob2QiLCJ1cGNhc2VkIiwidG9VcHBlckNhc2UiLCJtZXRob2RzIiwiUmVxdWVzdCIsImlucHV0IiwiY3JlZGVudGlhbHMiLCJtb2RlIiwicmVmZXJyZXIiLCJmb3JtIiwidHJpbSIsImJ5dGVzIiwiam9pbiIsImRlY29kZVVSSUNvbXBvbmVudCIsInhociIsInBhaXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiaGVhZGVyIiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsIm9rIiwibGlzdCIsInZhbHVlcyIsImdldEFsbCIsImhhcyIsImhhc093blByb3BlcnR5Iiwic2V0IiwidGhpc0FyZyIsImNsb25lIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsInJlc3BvbnNlVVJMIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJYTUxIdHRwUmVxdWVzdCIsInJlc3BvbnNlVGV4dCIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwicG9seWZpbGwiLCJkZWZpbmVQcm9wZXJ0eSIsIlBST0RfSE9TVCIsImlzRGV2IiwiX3R5cGVvZiIsIlN5bWJvbCIsImNvbnN0cnVjdG9yIiwiaXNBcnJheSIsInZhcmlhYmxlIiwiZ2V0SHVtYW5pemVkVGltZUR1cmF0aW9uIiwidGltZUR1cmF0aW9uSW5NaWxsaXNlY29uZHMiLCJhZGRQbHVyYWxTdWZmaXgiLCJudW1iZXIiLCJkdXJhdGlvbiIsIk1hdGgiLCJmbG9vciIsInllYXJzIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJjaHJvbWVWZXJzaW9uIiwicGFyc2VJbnQiLCJzYWZhcmlWZXJzaW9uIiwiZmlyZUZveFZlcnNpb24iLCJyZW1vdmVEb21FbGVtZW50Iiwic2VsZWN0b3IiLCJlbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkRG9tRWxlbWVudCIsInRhcmdldFNlbGVjdG9yT3JFbGVtZW50IiwiYWRkT3JkZXIiLCJlbGVtZW50SHRtbCIsInF1ZXJ5U2VsZWN0b3IiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJhZGRDc3NDbGFzcyIsImNzc0NsYXNzIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlQ3NzQ2xhc3MiLCJyZW1vdmUiLCJvbiIsInRhc2siLCJvbmNlIiwibWFudWFsRGVzdHJveSIsImFyZ3VtZW50cyIsInRhc2tXcmFwcGVyIiwiaW50ZXJuYWxUYXNrRnVuY3Rpb24iLCJkZXN0cm95RXZlbnRMaXN0ZW5lciIsIm9mZiIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwicm9vdCIsImRlZmluaXRpb24iLCJsb2ciLCJyZWFsTWV0aG9kIiwibWV0aG9kTmFtZSIsImNvbnNvbGUiLCJ1bmRlZmluZWRUeXBlIiwiYmluZE1ldGhvZCIsIm5vb3AiLCJiaW5kIiwiRnVuY3Rpb24iLCJlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzIiwibGV2ZWwiLCJsb2dnZXJOYW1lIiwicmVwbGFjZUxvZ2dpbmdNZXRob2RzIiwibG9nTWV0aG9kcyIsIm1ldGhvZEZhY3RvcnkiLCJkZWZhdWx0TWV0aG9kRmFjdG9yeSIsIkxvZ2dlciIsImRlZmF1bHRMZXZlbCIsImZhY3RvcnkiLCJwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlIiwibGV2ZWxOdW0iLCJsZXZlbE5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJzdG9yYWdlS2V5IiwiaWdub3JlIiwiY29va2llIiwiZ2V0UGVyc2lzdGVkTGV2ZWwiLCJzdG9yZWRMZXZlbCIsImV4ZWMiLCJzbGljZSIsImxldmVscyIsImN1cnJlbnRMZXZlbCIsIlRSQUNFIiwiREVCVUciLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiU0lMRU5UIiwiZ2V0TGV2ZWwiLCJwZXJzaXN0Iiwic2V0RGVmYXVsdExldmVsIiwiZGlzYWJsZUFsbCIsImluaXRpYWxMZXZlbCIsImRlZmF1bHRMb2dnZXIiLCJfbG9nZ2Vyc0J5TmFtZSIsImdldExvZ2dlciIsImxvZ2dlciIsIl9sb2ciLCJub0NvbmZsaWN0IiwiYXBpQ2FsbCIsInBsYXllcklkcyIsInRpdGxlcyIsInBhcmFtcyIsImhlYWRpbmdzIiwiaW5jbHVkZV9wbGF5ZXJfaWRzIiwiaXNBbnlXZWIiLCJMaW1pdFN0b3JlIiwic3RvcmUiLCJMSU1JVCIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWxzIiwiZXZ0IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJFdmVudCIsImV2ZW50TmFtZSIsImRpc3BhdGNoRXZlbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImxvZ29TdmciLCJCZWxsIiwiX3RoaXMiLCJfcmVmIiwiX3JlZiRzaXplIiwiX3JlZiRwb3NpdGlvbiIsIl9yZWYkdGhlbWUiLCJfcmVmJHNob3dMYXVuY2hlckFmdGUiLCJzaG93TGF1bmNoZXJBZnRlciIsIl9yZWYkc2hvd0JhZGdlQWZ0ZXIiLCJzaG93QmFkZ2VBZnRlciIsIl9yZWYkbWVzc2FnZXMiLCJtZXNzYWdlcyIsInVuc3Vic2NyaWJlZCIsInN1YnNjcmliZWQiLCJfcmVmJHByZW5vdGlmeSIsInByZW5vdGlmeSIsInF1ZXVlZCIsInN0YXRlcyIsInVuaW5pdGlhbGl6ZWQiLCJvcmlnaW5hbENhbGwiLCJoaWRlTWVzc2FnZSIsImlzRGlhbG9nT3BlbmVkIiwic2hvd0RpYWxvZyIsIndhc0RpYWxvZ0NsaWNrZWQiLCJsYXVuY2hlckRpYWxvZyIsImNvbnRhaW5zIiwiaGlkZURpYWxvZyIsIndhc0luYWN0aXZlIiwic2V0SW5hY3RpdmUiLCJpc0luYWN0aXZlIiwiaXNNZXNzYWdlT3BlbmVkIiwiZGVxdWV1ZWRNZXNzYWdlIiwiZGVxdWV1ZU1lc3NhZ2UiLCJzZXRNZXNzYWdlIiwic2hvd01lc3NhZ2UiLCJzZXRTdGF0ZSIsImRpc3BsYXlNZXNzYWdlIiwidXBkYXRlU3RhdGUiLCJfdGhpczIiLCJjb250YWluZXIiLCJsYXVuY2hlciIsImxhdW5jaGVyTWVzc2FnZSIsImxhdW5jaGVyRGlhbG9nQm9keSIsImxhdW5jaGVyQnV0dG9uIiwiaXNIb3ZlcmluZ0RhdGEiLCJsYXVuY2hlckJhZGdlIiwic2V0U2l6ZSIsInByb21pc2UiLCJfc2NoZWR1bGVFdmVudCIsInNob3dMYXVuY2hlciIsImVucXVldWVNZXNzYWdlIiwic2hvd0JhZGdlIiwiaW5pdGlhbGl6ZWQiLCJtc0luRnV0dXJlIiwic2V0VGltZW91dCIsIl90aGlzMyIsImlzRW5hYmxlZCIsIm5ld1N0YXRlIiwiX3RoaXM0Iiwibm90aWZ5IiwiaXNCYWRnZU9wZW4iLCJoaWRlQmFkZ2UiLCJpbmNyZW1lbnRCYWRnZSIsIl90aGlzNSIsImRlY3JlbWVudEJhZGdlIiwibmV3QmFkZ2VOdW1iZXIiLCJfdGhpczYiLCJzdG9wUHJvcGFnYXRpb24iLCJfdGhpczciLCJoaWRlTGF1bmNoZXIiLCJsYXVuY2hlck1lc3NhZ2VCb2R5IiwiX3RoaXM4IiwiY29udGVudCIsIl90aGlzOSIsImhpZGVBZnRlciIsInNldEJhZGdlIiwiYmFkZ2VIYXNDb250ZW50IiwiZ2V0QmFkZ2VDb250ZW50IiwiaXNOYU4iLCJiYWRnZU51bWJlciIsIl90aGlzMTAiLCJfdGhpczExIiwidXBkYXRlIiwibG9jYWxzIiwiaG90IiwiYWNjZXB0IiwibmV3Q29udGVudCIsInJlcXVpcmUiLCJkaXNwb3NlIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsImRvbVN0eWxlIiwic3R5bGVzSW5Eb20iLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInBhcnQiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJnZXRIZWFkRWxlbWVudCIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwic3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsInJlbW92ZVN0eWxlRWxlbWVudCIsImlkeCIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUxpbmtFbGVtZW50IiwibGlua0VsZW1lbnQiLCJyZWwiLCJzaW5nbGV0b24iLCJzdHlsZUluZGV4Iiwic2luZ2xldG9uQ291bnRlciIsInNpbmdsZXRvbkVsZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiYnRvYSIsInVwZGF0ZUxpbmsiLCJhcHBseVRvVGFnIiwidXBkYXRlU3R5bGUiLCJuZXdPYmoiLCJpbmRleCIsInN0eWxlU2hlZXQiLCJyZXBsYWNlVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJ1bmVzY2FwZSIsIm9sZFNyYyIsIm1lbW9pemUiLCJmbiIsIm1lbW8iLCJpc09sZElFIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9v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QSxnQkFBQWlqQixRQUFBK0QsU0FDQSxHQUFBQyxhQUNBLFFBQUFwZ0IsR0FBQSxFQUFnQkEsRUFBQThjLE9BQUF6cEIsT0FBbUIyTSxJQUFBLENBQ25DLEdBQUErSSxNQUFBK1QsT0FBQTljLEVBQ0EsSUFBQStjLFVBQUFDLFlBQUFqVSxLQUFBMWMsR0FDQTB3QixVQUFBRSxNQUNBbUQsV0FBQXBZLEtBQUErVSxVQUVBLEdBQUFvRCxRQUFBLENBQ0EsR0FBQTdDLFdBQUFELGFBQUE4QyxRQUNBdEQsZ0JBQUFTLFVBQUFua0IsU0FFQSxPQUFBNkcsR0FBQSxFQUFnQkEsRUFBQW9nQixVQUFBL3NCLE9BQXNCMk0sSUFBQSxDQUN0QyxHQUFBK2MsVUFBQXFELFVBQUFwZ0IsRUFDQSxRQUFBK2MsU0FBQUUsS0FBQSxDQUNBLE9BQUFDLEdBQUEsRUFBa0JBLEVBQUFILFNBQUFJLE1BQUE5cEIsT0FBMkI2cEIsSUFDN0NILFNBQUFJLE1BQUFELFdBQ0FGLGFBQUFELFNBQUExd0IsT0FpSUEsSUFBQW96QixhQUFBLFdBQ0EsR0FBQVksYUFFQSxpQkFBQWQsTUFBQWUsYUFDQUQsVUFBQWQsT0FBQWUsV0FDQSxPQUFBRCxXQUFBRSxPQUFBQyxTQUFBMVQsS0FBQSxXakJ1dEdNLFNBQVMxZ0IsT0FBUUQsU2tCcDVHdkJDLE9BQUFELFFBQUEiLCJmaWxlIjoiT25lU2lnbmFsU0RLLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdGlmICh0eXBlb2YgT25lU2lnbmFsICE9PSBcInVuZGVmaW5lZFwiKSB2YXIgcHJlZGVmaW5lZE9uZVNpZ25hbFB1c2hlcyA9IE9uZVNpZ25hbDtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHRpZiAocHJlZGVmaW5lZE9uZVNpZ25hbFB1c2hlcykgT25lU2lnbmFsLl9wcm9jZXNzX3B1c2hlcyhwcmVkZWZpbmVkT25lU2lnbmFsUHVzaGVzKTtcblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHttb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIk9uZVNpZ25hbFwiXSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihmZXRjaCkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfdmFycyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgX2FwaSA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX2xvZ2xldmVsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBfbG9nbGV2ZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nbGV2ZWwpO1xuXHRcblx0dmFyIF9saW1pdFN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdHZhciBfbGltaXRTdG9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saW1pdFN0b3JlKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdFxuXHR2YXIgX2V2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0dmFyIF9iZWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHR2YXIgX2JlbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmVsbCk7XG5cdFxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgT25lU2lnbmFsID0ge1xuXHQgIF9WRVJTSU9OOiAxMDkwMTMsXG5cdCAgX0hPU1RfVVJMOiBfdmFycy5IT1NUX1VSTCxcblx0ICBfYXBwX2lkOiBudWxsLFxuXHQgIF90YWdzVG9TZW5kT25SZWdpc3RlcjogbnVsbCxcblx0ICBfbm90aWZpY2F0aW9uT3BlbmVkX2NhbGxiYWNrOiBudWxsLFxuXHQgIF9pZHNBdmFpbGFibGVfY2FsbGJhY2s6IFtdLFxuXHQgIF9kZWZhdWx0TGF1bmNoVVJMOiBudWxsLFxuXHQgIF9pbml0T3B0aW9uczogbnVsbCxcblx0ICBfaHR0cFJlZ2lzdHJhdGlvbjogZmFsc2UsXG5cdCAgX21haW5fcGFnZV9wb3J0OiBudWxsLFxuXHQgIF9pc05vdGlmaWNhdGlvbkVuYWJsZWRDYWxsYmFjazogbnVsbCxcblx0ICBfc3Vic2NyaXB0aW9uU2V0OiB0cnVlLFxuXHQgIF9pbml0T25lU2lnbmFsSHR0cDogbnVsbCxcblx0ICBfc2Vzc2lvbklmcmFtZUFkZGVkOiBmYWxzZSxcblx0ICBfdXNlSHR0cE1vZGU6IG51bGwsXG5cdCAgX3dpbmRvd1dpZHRoOiA1NTAsXG5cdCAgX3dpbmRvd0hlaWdodDogNDgwLFxuXHQgIF9pc05ld1Zpc2l0b3I6IGZhbHNlLFxuXHQgIF9pc0luaXRpYWxpemVkOiBmYWxzZSxcblx0ICBiZWxsOiBudWxsLFxuXHQgIExPR0dJTkc6IHRydWUsXG5cdCAgU0VSVklDRV9XT1JLRVJfVVBEQVRFUl9QQVRIOiBcIk9uZVNpZ25hbFNES1VwZGF0ZXJXb3JrZXIuanNcIixcblx0ICBTRVJWSUNFX1dPUktFUl9QQVRIOiBcIk9uZVNpZ25hbFNES1dvcmtlci5qc1wiLFxuXHQgIFNFUlZJQ0VfV09SS0VSX1BBUkFNOiB7fSxcblx0XG5cdCAgX2Vuc3VyZURiSW5zdGFuY2U6IGZ1bmN0aW9uIF9lbnN1cmVEYkluc3RhbmNlKCkge1xuXHQgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgaWYgKE9uZVNpZ25hbC5fb25lU2lnbmFsX2RiKSB7XG5cdCAgICAgICAgcmVzb2x2ZShPbmVTaWduYWwuX29uZVNpZ25hbF9kYik7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihcIk9ORV9TSUdOQUxfU0RLX0RCXCIsIDEpO1xuXHQgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICB2YXIgZGF0YWJhc2UgPSBldmVudC50YXJnZXQucmVzdWx0O1xuXHQgICAgICAgICAgT25lU2lnbmFsLl9vbmVTaWduYWxfZGIgPSBkYXRhYmFzZTtcblx0ICAgICAgICAgIHJlc29sdmUoZGF0YWJhc2UpO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoJ1VuYWJsZSB0byBvcGVuIEluZGV4ZWREQi4nLCBldmVudCk7XG5cdCAgICAgICAgICByZWplY3QoZXZlbnQpO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoJ1JlYnVpbGRpbmcgc2NoZW1hIGluIEluZGV4ZWREQi4uLicpO1xuXHQgICAgICAgICAgdmFyIGRiID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcblx0ICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwiSWRzXCIsIHsga2V5UGF0aDogXCJ0eXBlXCIgfSk7XG5cdCAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShcIk5vdGlmaWNhdGlvbk9wZW5lZFwiLCB7IGtleVBhdGg6IFwidXJsXCIgfSk7XG5cdCAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShcIk9wdGlvbnNcIiwgeyBrZXlQYXRoOiBcImtleVwiIH0pO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH0sXG5cdFxuXHQgIF9nZXREYlZhbHVlOiBmdW5jdGlvbiBfZ2V0RGJWYWx1ZSh0YWJsZSwga2V5KSB7XG5cdCAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICBPbmVTaWduYWwuX2Vuc3VyZURiSW5zdGFuY2UoKS50aGVuKGZ1bmN0aW9uIChkYXRhYmFzZSkge1xuXHQgICAgICAgIHZhciByZXF1ZXN0ID0gZGF0YWJhc2UudHJhbnNhY3Rpb24odGFibGUpLm9iamVjdFN0b3JlKHRhYmxlKS5nZXQoa2V5KTtcblx0ICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgaWYgKHJlcXVlc3QucmVzdWx0KSBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9kYlZhbHVlUmV0cmlldmVkKHJlcXVlc3QucmVzdWx0KTtcblx0ICAgICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvckNvZGUpO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICB9KTtcblx0ICAgICAgO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgX2dldERiVmFsdWVzOiBmdW5jdGlvbiBfZ2V0RGJWYWx1ZXModGFibGUpIHtcblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgIE9uZVNpZ25hbC5fZW5zdXJlRGJJbnN0YW5jZSgpLnRoZW4oZnVuY3Rpb24gKGRhdGFiYXNlKSB7XG5cdCAgICAgICAgdmFyIGpzb25SZXN1bHQgPSB7fTtcblx0ICAgICAgICB2YXIgY3Vyc29yID0gZGF0YWJhc2UudHJhbnNhY3Rpb24odGFibGUpLm9iamVjdFN0b3JlKHRhYmxlKS5vcGVuQ3Vyc29yKCk7XG5cdCAgICAgICAgY3Vyc29yLm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgICAgdmFyIGN1cnNvciA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG5cdCAgICAgICAgICBpZiAoY3Vyc29yKSB7XG5cdCAgICAgICAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X2RiVmFsdWVSZXRyaWV2ZWQoY3Vyc29yKTtcblx0ICAgICAgICAgICAganNvblJlc3VsdFtjdXJzb3Iua2V5XSA9IGN1cnNvci52YWx1ZS52YWx1ZTtcblx0ICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG5cdCAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShqc29uUmVzdWx0KTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIGN1cnNvci5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICByZWplY3QoY3Vyc29yLmVycm9yQ29kZSk7XG5cdCAgICAgICAgfTtcblx0ICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgX3B1dERiVmFsdWU6IGZ1bmN0aW9uIF9wdXREYlZhbHVlKHRhYmxlLCB2YWx1ZSkge1xuXHQgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgT25lU2lnbmFsLl9lbnN1cmVEYkluc3RhbmNlKCkudGhlbihmdW5jdGlvbiAoZGF0YWJhc2UpIHtcblx0ICAgICAgICBkYXRhYmFzZS50cmFuc2FjdGlvbihbdGFibGVdLCBcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZSh0YWJsZSkucHV0KHZhbHVlKTtcblx0ICAgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9kYlZhbHVlU2V0KHZhbHVlKTtcblx0ICAgICAgICByZXNvbHZlKHZhbHVlKTtcblx0ICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgX2RlbGV0ZURiVmFsdWU6IGZ1bmN0aW9uIF9kZWxldGVEYlZhbHVlKHRhYmxlLCBrZXkpIHtcblx0ICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgIE9uZVNpZ25hbC5fZW5zdXJlRGJJbnN0YW5jZSgpLnRoZW4oZnVuY3Rpb24gKGRhdGFiYXNlKSB7XG5cdCAgICAgICAgZGF0YWJhc2UudHJhbnNhY3Rpb24oW3RhYmxlXSwgXCJyZWFkd3JpdGVcIikub2JqZWN0U3RvcmUodGFibGUpLmRlbGV0ZShrZXkpO1xuXHQgICAgICAgIHJlc29sdmUoa2V5KTtcblx0ICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgICA7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBfc2VuZFRvT25lU2lnbmFsQXBpOiBmdW5jdGlvbiBfc2VuZFRvT25lU2lnbmFsQXBpKHVybCwgYWN0aW9uLCBpbkRhdGEsIGNhbGxiYWNrLCBmYWlsZWRDYWxsYmFjaykge1xuXHQgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKCdDYWxsaW5nICcgKyBhY3Rpb24gKyAnICcgKyAoT25lU2lnbmFsLl9IT1NUX1VSTCArIHVybCkgKyAnIHdpdGggZGF0YTonLCBpbkRhdGEpO1xuXHQgICAgdmFyIGNvbnRlbnRzID0ge1xuXHQgICAgICBtZXRob2Q6IGFjdGlvblxuXHQgICAgfTtcblx0XG5cdCAgICAvL21vZGU6ICduby1jb3JzJywgLy8gbm8tY29ycyBpcyBkaXNhYmxlZCBmb3Igbm9uLXNlcnZpY2V3b3JrZXIuXG5cdCAgICBpZiAoaW5EYXRhKSB7XG5cdCAgICAgIGNvbnRlbnRzLmhlYWRlcnMgPSB7IFwiQ29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCIgfTtcblx0ICAgICAgY29udGVudHMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGluRGF0YSk7XG5cdCAgICB9XG5cdFxuXHQgICAgZmV0Y2goT25lU2lnbmFsLl9IT1NUX1VSTCArIHVybCwgY29udGVudHMpLnRoZW4oZnVuY3Rpb24gc3RhdHVzKHJlc3BvbnNlKSB7XG5cdCAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7ZWxzZSByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpKTtcblx0ICAgIH0pLnRoZW4oZnVuY3Rpb24gc3RhdHVzKHJlc3BvbnNlKSB7XG5cdCAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdCAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkge1xuXHQgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgY2FsbGJhY2soanNvbkRhdGEpO1xuXHQgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKCdPbmVTaWduYWwuX3NlbmRUb09uZVNpZ25hbEFwaSgpIGZhaWxlZDonLCBlKTtcblx0ICAgICAgaWYgKGZhaWxlZENhbGxiYWNrICE9IG51bGwpIGZhaWxlZENhbGxiYWNrKCk7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBfZ2V0TGFuZ3VhZ2U6IGZ1bmN0aW9uIF9nZXRMYW5ndWFnZSgpIHtcblx0ICAgIHJldHVybiBuYXZpZ2F0b3IubGFuZ3VhZ2UgPyBuYXZpZ2F0b3IubGFuZ3VhZ2UubGVuZ3RoID4gMyA/IG5hdmlnYXRvci5sYW5ndWFnZS5zdWJzdHJpbmcoMCwgMikgOiBuYXZpZ2F0b3IubGFuZ3VhZ2UgOiAnZW4nO1xuXHQgIH0sXG5cdFxuXHQgIF9nZXRQbGF5ZXJJZDogZnVuY3Rpb24gX2dldFBsYXllcklkKHZhbHVlLCBjYWxsYmFjaykge1xuXHQgICAgaWYgKHZhbHVlKSBjYWxsYmFjayh2YWx1ZSk7ZWxzZSB7XG5cdCAgICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpLnRoZW4oZnVuY3Rpb24gX2dldFBsYXllcklkX2dvdFVzZXJJZChyZXN1bHQpIHtcblx0ICAgICAgICBpZiAocmVzdWx0KSBjYWxsYmFjayhyZXN1bHQuaWQpO2Vsc2UgY2FsbGJhY2sobnVsbCk7XG5cdCAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICB9KTtcblx0ICAgICAgO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIF9nZXRCcm93c2VyTmFtZTogZnVuY3Rpb24gX2dldEJyb3dzZXJOYW1lKCkge1xuXHQgICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9DaHJvbWVcXC8oLio/KSAvKSkgcmV0dXJuIFwiQ2hyb21lXCI7XG5cdCAgICBpZiAobmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goXCJWZXJzaW9uLyguKikgKFNhZmFyaSlcIikpIHJldHVybiBcIlNhZmFyaVwiO1xuXHQgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oWzAtOV17Mix9XFwuWzAtOV17MSx9KS8pKSByZXR1cm4gXCJGaXJlZm94XCI7XG5cdFxuXHQgICAgcmV0dXJuIFwiXCI7XG5cdCAgfSxcblx0XG5cdCAgX3JlZ2lzdGVyV2l0aE9uZVNpZ25hbDogZnVuY3Rpb24gX3JlZ2lzdGVyV2l0aE9uZVNpZ25hbChhcHBJZCwgcmVnaXN0cmF0aW9uSWQsIGRldmljZVR5cGUpIHtcblx0XG5cdCAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICd1c2VySWQnKS50aGVuKGZ1bmN0aW9uIF9yZWdpc3RlcldpdGhPbmVTaWduYWxfR290VXNlcklkKHVzZXJJZFJlc3VsdCkge1xuXHQgICAgICBPbmVTaWduYWwuX2dldE5vdGlmaWNhdGlvblR5cGVzKGZ1bmN0aW9uIChub3RpZl90eXBlcykge1xuXHQgICAgICAgIHZhciByZXF1ZXN0VXJsID0gJ3BsYXllcnMnO1xuXHRcblx0ICAgICAgICB2YXIganNvbkRhdGEgPSB7XG5cdCAgICAgICAgICBhcHBfaWQ6IGFwcElkLFxuXHQgICAgICAgICAgZGV2aWNlX3R5cGU6IGRldmljZVR5cGUsXG5cdCAgICAgICAgICBsYW5ndWFnZTogT25lU2lnbmFsLl9nZXRMYW5ndWFnZSgpLFxuXHQgICAgICAgICAgdGltZXpvbmU6IG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIC02MCxcblx0ICAgICAgICAgIGRldmljZV9tb2RlbDogbmF2aWdhdG9yLnBsYXRmb3JtICsgXCIgXCIgKyBPbmVTaWduYWwuX2dldEJyb3dzZXJOYW1lKCksXG5cdCAgICAgICAgICBkZXZpY2Vfb3M6IChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvQ2hyb21lXFwvKC4qPykgLykgfHwgbmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goXCJWZXJzaW9uLyguKikgU2FmYXJpXCIpIHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oWzAtOV17Mix9XFwuWzAtOV17MSx9KS8pKVsxXSxcblx0ICAgICAgICAgIHNkazogT25lU2lnbmFsLl9WRVJTSU9OXG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgaWYgKHVzZXJJZFJlc3VsdCkge1xuXHQgICAgICAgICAgcmVxdWVzdFVybCA9ICdwbGF5ZXJzLycgKyB1c2VySWRSZXN1bHQuaWQgKyAnL29uX3Nlc3Npb24nO1xuXHQgICAgICAgICAganNvbkRhdGEubm90aWZpY2F0aW9uX3R5cGVzID0gbm90aWZfdHlwZXM7XG5cdCAgICAgICAgfSBlbHNlIGlmIChub3RpZl90eXBlcyAhPSAxKSBqc29uRGF0YS5ub3RpZmljYXRpb25fdHlwZXMgPSBub3RpZl90eXBlcztcblx0XG5cdCAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbklkKSB7XG5cdCAgICAgICAgICBqc29uRGF0YS5pZGVudGlmaWVyID0gcmVnaXN0cmF0aW9uSWQ7XG5cdCAgICAgICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJJZHNcIiwgeyB0eXBlOiBcInJlZ2lzdHJhdGlvbklkXCIsIGlkOiByZWdpc3RyYXRpb25JZCB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIE9uZVNpZ25hbC5fc2VuZFRvT25lU2lnbmFsQXBpKHJlcXVlc3RVcmwsICdQT1NUJywganNvbkRhdGEsIGZ1bmN0aW9uIHJlZ2lzdGVyZWRDYWxsYmFjayhyZXNwb25zZUpTT04pIHtcblx0ICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJPTkVfU0lHTkFMX1NFU1NJT05cIiwgdHJ1ZSk7XG5cdFxuXHQgICAgICAgICAgaWYgKHJlc3BvbnNlSlNPTi5pZCkge1xuXHQgICAgICAgICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJJZHNcIiwgeyB0eXBlOiBcInVzZXJJZFwiLCBpZDogcmVzcG9uc2VKU09OLmlkIH0pO1xuXHQgICAgICAgICAgICBPbmVTaWduYWwuX3NlbmRVbnNlbnRUYWdzKCk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgT25lU2lnbmFsLl9nZXRQbGF5ZXJJZChyZXNwb25zZUpTT04uaWQsIGZ1bmN0aW9uICh1c2VySWQpIHtcblx0ICAgICAgICAgICAgaWYgKE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgICB3aGlsZSAoT25lU2lnbmFsLl9pZHNBdmFpbGFibGVfY2FsbGJhY2subGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGN1cnJfY2FsbGJhY2sgPSBPbmVTaWduYWwuX2lkc0F2YWlsYWJsZV9jYWxsYmFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgIGN1cnJfY2FsbGJhY2soeyB1c2VySWQ6IHVzZXJJZCwgcmVnaXN0cmF0aW9uSWQ6IHJlZ2lzdHJhdGlvbklkIH0pO1xuXHQgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgaWYgKE9uZVNpZ25hbC5faHR0cFJlZ2lzdHJhdGlvbikge1xuXHQgICAgICAgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIlNlbmRpbmcgcGxheWVyIElkIGFuZCByZWdpc3RyYXRpb25JZCBiYWNrIHRvIGhvc3QgcGFnZVwiKTtcblx0ICAgICAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoT25lU2lnbmFsLl9pbml0T3B0aW9ucyk7XG5cdCAgICAgICAgICAgICAgdmFyIGNyZWF0b3IgPSBvcGVuZXIgfHwgcGFyZW50O1xuXHQgICAgICAgICAgICAgIE9uZVNpZ25hbC5fc2FmZVBvc3RNZXNzYWdlKGNyZWF0b3IsIHtcblx0ICAgICAgICAgICAgICAgIGlkc0F2YWlsYWJsZToge1xuXHQgICAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZCxcblx0ICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uSWQ6IHJlZ2lzdHJhdGlvbklkXG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfSwgT25lU2lnbmFsLl9pbml0T3B0aW9ucy5vcmlnaW4sIG51bGwpO1xuXHRcblx0ICAgICAgICAgICAgICBpZiAob3BlbmVyKSB3aW5kb3cuY2xvc2UoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgfSk7XG5cdCAgICA7XG5cdCAgfSxcblx0XG5cdCAgX3NlbmRVbnNlbnRUYWdzOiBmdW5jdGlvbiBfc2VuZFVuc2VudFRhZ3MoKSB7XG5cdCAgICBpZiAoT25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3Rlcikge1xuXHQgICAgICBPbmVTaWduYWwuc2VuZFRhZ3MoT25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3Rlcik7XG5cdCAgICAgIE9uZVNpZ25hbC5fdGFnc1RvU2VuZE9uUmVnaXN0ZXIgPSBudWxsO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIHNldERlZmF1bHROb3RpZmljYXRpb25Vcmw6IGZ1bmN0aW9uIHNldERlZmF1bHROb3RpZmljYXRpb25VcmwodXJsKSB7XG5cdCAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJPcHRpb25zXCIsIHsga2V5OiBcImRlZmF1bHRVcmxcIiwgdmFsdWU6IHVybCB9KTtcblx0ICB9LFxuXHRcblx0ICBzZXREZWZhdWx0SWNvbjogZnVuY3Rpb24gc2V0RGVmYXVsdEljb24oaWNvbikge1xuXHQgICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiT3B0aW9uc1wiLCB7IGtleTogXCJkZWZhdWx0SWNvblwiLCB2YWx1ZTogaWNvbiB9KTtcblx0ICB9LFxuXHRcblx0ICBzZXREZWZhdWx0VGl0bGU6IGZ1bmN0aW9uIHNldERlZmF1bHRUaXRsZSh0aXRsZSkge1xuXHQgICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiT3B0aW9uc1wiLCB7IGtleTogXCJkZWZhdWx0VGl0bGVcIiwgdmFsdWU6IHRpdGxlIH0pO1xuXHQgIH0sXG5cdFxuXHQgIF92aXNpYmlsaXR5Y2hhbmdlOiBmdW5jdGlvbiBfdmlzaWJpbGl0eWNoYW5nZSgpIHtcblx0ICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT0gXCJ2aXNpYmxlXCIpIHtcblx0ICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgT25lU2lnbmFsLl92aXNpYmlsaXR5Y2hhbmdlKTtcblx0ICAgICAgT25lU2lnbmFsLl9zZXNzaW9uSW5pdCh7fSk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgb25DdXN0b21Qcm9tcHRDbGlja2VkOiBmdW5jdGlvbiBvbkN1c3RvbVByb21wdENsaWNrZWQoZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLnByb21wdC5jdXN0b20uY2xpY2tlZDonLCBldmVudC5kZXRhaWwpO1xuXHQgICAgT25lU2lnbmFsLl9jaGVja1RyaWdnZXJfZXZlbnRTdWJzY3JpcHRpb25DaGFuZ2VkKCk7XG5cdCAgfSxcblx0XG5cdCAgb25OYXRpdmVQcm9tcHRDaGFuZ2VkOiBmdW5jdGlvbiBvbk5hdGl2ZVByb21wdENoYW5nZWQoZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLnByb21wdC5uYXRpdmUucGVybWlzc2lvbmNoYW5nZWQ6JywgZXZlbnQuZGV0YWlsKTtcblx0ICAgIE9uZVNpZ25hbC5fY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZCgpO1xuXHQgIH0sXG5cdFxuXHQgIF9vblN1YnNjcmlwdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uIF9vblN1YnNjcmlwdGlvbkNoYW5nZWQoZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLnN1YnNjcmlwdGlvbi5jaGFuZ2VkOicsIGV2ZW50LmRldGFpbCk7XG5cdCAgICBpZiAoT25lU2lnbmFsLl9pc05ld1Zpc2l0b3IgJiYgZXZlbnQuZGV0YWlsID09PSB0cnVlKSB7XG5cdCAgICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuXHQgICAgICAgIHZhciB3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzID0gT25lU2lnbmFsLl9pbml0T3B0aW9uc1snd2VsY29tZU5vdGlmaWNhdGlvbiddO1xuXHQgICAgICAgIHZhciB3ZWxjb21lX25vdGlmaWNhdGlvbl9kaXNhYmxlZCA9IHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHMgIT09IHVuZGVmaW5lZCAmJiB3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzWydkaXNhYmxlJ10gPT09IHRydWU7XG5cdCAgICAgICAgdmFyIHRpdGxlID0gd2VsY29tZV9ub3RpZmljYXRpb25fb3B0cyAhPT0gdW5kZWZpbmVkICYmIHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ3RpdGxlJ10gIT09IHVuZGVmaW5lZCAmJiB3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzWyd0aXRsZSddICE9PSBudWxsID8gd2VsY29tZV9ub3RpZmljYXRpb25fb3B0c1sndGl0bGUnXSA6ICcnO1xuXHQgICAgICAgIHZhciBtZXNzYWdlID0gd2VsY29tZV9ub3RpZmljYXRpb25fb3B0cyAhPT0gdW5kZWZpbmVkICYmIHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ21lc3NhZ2UnXSAhPT0gdW5kZWZpbmVkICYmIHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ21lc3NhZ2UnXSAhPT0gbnVsbCAmJiB3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzWydtZXNzYWdlJ10ubGVuZ3RoID4gMCA/IHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ21lc3NhZ2UnXSA6ICdUaGFua3MgZm9yIHN1YnNjcmliaW5nISc7XG5cdCAgICAgICAgaWYgKCF3ZWxjb21lX25vdGlmaWNhdGlvbl9kaXNhYmxlZCkge1xuXHQgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKCdCZWNhdXNlIHRoaXMgdXNlciBpcyBhIG5ldyBzaXRlIHZpc2l0b3IsIGEgd2VsY29tZSBub3RpZmljYXRpb24gd2lsbCBiZSBzZW50LicpO1xuXHQgICAgICAgICAgKDAsIF9hcGkuc2VuZE5vdGlmaWNhdGlvbikoT25lU2lnbmFsLl9hcHBfaWQsIFtyZXN1bHQuaWRdLCB7ICdlbic6IHRpdGxlIH0sIHsgJ2VuJzogbWVzc2FnZSB9KTtcblx0ICAgICAgICAgICgwLCBfZXZlbnRzLnRyaWdnZXJFdmVudCkoJ29uZXNpZ25hbC5hY3Rpb25zLndlbGNvbWVub3RpZmljYXRpb25zZW50JywgeyB0aXRsZTogdGl0bGUsIG1lc3NhZ2U6IG1lc3NhZ2UgfSk7XG5cdCAgICAgICAgICBPbmVTaWduYWwuX2lzTmV3VmlzaXRvciA9IGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgICAgX2xpbWl0U3RvcmUyLmRlZmF1bHQucHV0KCdzdWJzY3JpcHRpb24udmFsdWUnLCBldmVudC5kZXRhaWwpO1xuXHQgIH0sXG5cdFxuXHQgIF9vbkRiVmFsdWVSZXRyaWV2ZWQ6IGZ1bmN0aW9uIF9vbkRiVmFsdWVSZXRyaWV2ZWQoZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLmRiLnJldHJpZXZlZDonLCBldmVudC5kZXRhaWwpO1xuXHQgIH0sXG5cdFxuXHQgIF9vbkRiVmFsdWVTZXQ6IGZ1bmN0aW9uIF9vbkRiVmFsdWVTZXQoZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLmRiLnZhbHVlc2V0OicsIGV2ZW50LmRldGFpbCk7XG5cdCAgICB2YXIgaW5mbyA9IGV2ZW50LmRldGFpbDtcblx0ICAgIGlmIChpbmZvLnR5cGUgPT09ICd1c2VySWQnKSB7XG5cdCAgICAgIF9saW1pdFN0b3JlMi5kZWZhdWx0LnB1dCgnZGIuaWRzLnVzZXJJZCcsIGluZm8uaWQpO1xuXHQgICAgICBPbmVTaWduYWwuX2NoZWNrVHJpZ2dlcl9ldmVudFN1YnNjcmlwdGlvbkNoYW5nZWQoKTtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBfb25JbnRlcm5hbFN1YnNjcmlwdGlvblNldDogZnVuY3Rpb24gX29uSW50ZXJuYWxTdWJzY3JpcHRpb25TZXQoZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLmludGVybmFsLnN1YnNjcmlwdGlvbnNldDonLCBldmVudC5kZXRhaWwpO1xuXHQgICAgdmFyIG5ld1N1YnNjcmlwdGlvblZhbHVlID0gZXZlbnQuZGV0YWlsO1xuXHQgICAgX2xpbWl0U3RvcmUyLmRlZmF1bHQucHV0KCdzdWJzY3JpcHRpb24uaW50ZXJuYWwudmFsdWUnLCBuZXdTdWJzY3JpcHRpb25WYWx1ZSk7XG5cdCAgICBPbmVTaWduYWwuX2NoZWNrVHJpZ2dlcl9ldmVudFN1YnNjcmlwdGlvbkNoYW5nZWQoKTtcblx0ICB9LFxuXHRcblx0ICBfY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZDogZnVuY3Rpb24gX2NoZWNrVHJpZ2dlcl9ldmVudFN1YnNjcmlwdGlvbkNoYW5nZWQoKSB7XG5cdCAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoJ0NhbGxlZCBfY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZCgpLicpO1xuXHQgICAgdmFyIHBlcm1pc3Npb25zID0gX2xpbWl0U3RvcmUyLmRlZmF1bHQuZ2V0KCdub3RpZmljYXRpb24ucGVybWlzc2lvbicpO1xuXHQgICAgdmFyIGxhc3RQZXJtaXNzaW9uID0gcGVybWlzc2lvbnNbcGVybWlzc2lvbnMubGVuZ3RoIC0gMl07XG5cdCAgICB2YXIgY3VycmVudFBlcm1pc3Npb24gPSBwZXJtaXNzaW9uc1twZXJtaXNzaW9ucy5sZW5ndGggLSAxXTtcblx0XG5cdCAgICB2YXIgaWRzID0gX2xpbWl0U3RvcmUyLmRlZmF1bHQuZ2V0KCdkYi5pZHMudXNlcklkJyk7XG5cdCAgICB2YXIgbGFzdElkID0gaWRzW2lkcy5sZW5ndGggLSAyXTtcblx0ICAgIHZhciBjdXJyZW50SWQgPSBpZHNbaWRzLmxlbmd0aCAtIDFdO1xuXHRcblx0ICAgIHZhciBzdWJzY3JpcHRpb25TdGF0ZXMgPSBfbGltaXRTdG9yZTIuZGVmYXVsdC5nZXQoJ3N1YnNjcmlwdGlvbi5pbnRlcm5hbC52YWx1ZScpO1xuXHQgICAgdmFyIGxhc3RTdWJzY3JpcHRpb25TdGF0ZSA9IHN1YnNjcmlwdGlvblN0YXRlc1tzdWJzY3JpcHRpb25TdGF0ZXMubGVuZ3RoIC0gMl07XG5cdCAgICB2YXIgY3VycmVudFN1YnNjcmlwdGlvblN0YXRlID0gc3Vic2NyaXB0aW9uU3RhdGVzW3N1YnNjcmlwdGlvblN0YXRlcy5sZW5ndGggLSAxXTtcblx0XG5cdCAgICB2YXIgbmV3U3Vic2NyaXB0aW9uU3RhdGUgPSAndW5jaGFuZ2VkJztcblx0XG5cdCAgICBpZiAoKGxhc3RQZXJtaXNzaW9uID09PSAnZGVmYXVsdCcgfHwgbGFzdFBlcm1pc3Npb24gPT09ICdkZW5pZWQnIHx8IGxhc3RQZXJtaXNzaW9uID09PSBudWxsKSAmJiBjdXJyZW50UGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnICYmIGN1cnJlbnRJZCAhPT0gbnVsbCAmJiBjdXJyZW50U3Vic2NyaXB0aW9uU3RhdGUgPT09IHRydWUgfHwgbGFzdFN1YnNjcmlwdGlvblN0YXRlID09PSBmYWxzZSAmJiBjdXJyZW50U3Vic2NyaXB0aW9uU3RhdGUgPT09IHRydWUgJiYgY3VycmVudElkICE9IG51bGwgJiYgY3VycmVudFBlcm1pc3Npb24gPT09ICdncmFudGVkJykge1xuXHQgICAgICBuZXdTdWJzY3JpcHRpb25TdGF0ZSA9IHRydWU7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKGxhc3RQZXJtaXNzaW9uICE9PSAnZGVuaWVkJyAmJiBjdXJyZW50UGVybWlzc2lvbiA9PT0gJ2RlbmllZCcgfHwgbGFzdFBlcm1pc3Npb24gPT09ICdncmFudGVkJyAmJiBjdXJyZW50UGVybWlzc2lvbiAhPT0gJ2dyYW50ZWQnIHx8IGxhc3RJZCAhPT0gbnVsbCAmJiBjdXJyZW50SWQgPT09IG51bGwgfHwgbGFzdFN1YnNjcmlwdGlvblN0YXRlICE9PSBmYWxzZSAmJiBjdXJyZW50U3Vic2NyaXB0aW9uU3RhdGUgPT09IGZhbHNlKSB7XG5cdCAgICAgIG5ld1N1YnNjcmlwdGlvblN0YXRlID0gZmFsc2U7XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKG5ld1N1YnNjcmlwdGlvblN0YXRlICE9PSBcInVuY2hhbmdlZFwiKSB7XG5cdCAgICAgIHZhciBsYXN0VHJpZ2dlclRpbWVzID0gX2xpbWl0U3RvcmUyLmRlZmF1bHQucHV0KCdldmVudC5zdWJzY3JpcHRpb25jaGFuZ2VkLmxhc3RyaWdnZXJlZCcsIERhdGUubm93KCkpO1xuXHQgICAgICB2YXIgY3VycmVudFRpbWUgPSBsYXN0VHJpZ2dlclRpbWVzW2xhc3RUcmlnZ2VyVGltZXMubGVuZ3RoIC0gMV07XG5cdCAgICAgIHZhciBsYXN0VHJpZ2dlclRpbWUgPSBsYXN0VHJpZ2dlclRpbWVzW2xhc3RUcmlnZ2VyVGltZXMubGVuZ3RoIC0gMl07XG5cdCAgICAgIHZhciBlbGFwc2VkVGltZVNlY29uZHMgPSAoY3VycmVudFRpbWUgLSBsYXN0VHJpZ2dlclRpbWUpIC8gMTAwMDtcblx0XG5cdCAgICAgIHZhciBsYXN0RXZlbnRTdGF0ZXMgPSBfbGltaXRTdG9yZTIuZGVmYXVsdC5wdXQoJ2V2ZW50LnN1YnNjcmlwdGlvbmNoYW5nZWQubGFzdHN0YXRlcycsIG5ld1N1YnNjcmlwdGlvblN0YXRlKTtcblx0ICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IGxhc3RFdmVudFN0YXRlc1tsYXN0RXZlbnRTdGF0ZXMubGVuZ3RoIC0gMV07XG5cdCAgICAgIHZhciBsYXN0U3RhdGUgPSBsYXN0RXZlbnRTdGF0ZXNbbGFzdEV2ZW50U3RhdGVzLmxlbmd0aCAtIDJdO1xuXHRcblx0ICAgICAgLy8gSWYgZXZlbnQgYWxyZWFkeSB0cmlnZ2VyZWQgd2l0aGluIHRoZSBsYXN0IHNlY29uZCwgZG9uJ3QgcmUtdHJpZ2dlci5cblx0ICAgICAgdmFyIHNob3VsZE5vdFRyaWdnZXJFdmVudCA9IGxhc3RUcmlnZ2VyVGltZSAhPSBudWxsICYmIGVsYXBzZWRUaW1lU2Vjb25kcyA8PSAxIHx8IGN1cnJlbnRTdGF0ZSA9PT0gbGFzdFN0YXRlO1xuXHQgICAgICBpZiAoc2hvdWxkTm90VHJpZ2dlckV2ZW50ID09PSBmYWxzZSkge1xuXHQgICAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X3N1YnNjcmlwdGlvbkNoYW5nZWQobmV3U3Vic2NyaXB0aW9uU3RhdGUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgaW5pdDogZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XG5cdCAgICBpZiAoT25lU2lnbmFsLl9pc0luaXRpYWxpemVkKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC53YXJuKCdPbmVTaWduYWwuaW5pdCgpIHdhcyBjYWxsZWQgYWdhaW4sIGJ1dCB0aGUgU0RLIGlzIGFscmVhZHkgaW5pdGlhbGl6ZWQuIFNraXBwaW5nIGluaXRpYWxpemF0aW9uLicpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdCAgICBPbmVTaWduYWwuX2luaXRPcHRpb25zID0gb3B0aW9ucztcblx0XG5cdCAgICBpZiAoT25lU2lnbmFsLkxPR0dJTkcpIF9sb2dsZXZlbDIuZGVmYXVsdC5lbmFibGVBbGwoKTtlbHNlIF9sb2dsZXZlbDIuZGVmYXVsdC5zZXRMZXZlbCgnZXJyb3InKTtcblx0XG5cdCAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuaW5mbygnT25lU2lnbmFsIFdlYiBTREsgbG9hZGVkICh2ZXJzaW9uICcgKyBPbmVTaWduYWwuX1ZFUlNJT04gKyAnKS4nKTtcblx0ICAgIGlmICghKDAsIF91dGlscy5pc1B1c2hOb3RpZmljYXRpb25zU3VwcG9ydGVkKSgpKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC53YXJuKFwiWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgcHVzaCBub3RpZmljYXRpb25zLlwiKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHQgICAgaWYgKG5hdmlnYXRvci5wZXJtaXNzaW9ucyAmJiAhKCgwLCBfdXRpbHMuaXNCcm93c2VyRmlyZWZveCkoKSAmJiAoMCwgX3V0aWxzLmdldEZpcmVmb3hWZXJzaW9uKSgpIDw9IDQ1KSkge1xuXHQgICAgICBPbmVTaWduYWwuX3VzaW5nTmF0aXZlUGVybWlzc2lvbkhvb2sgPSB0cnVlO1xuXHQgICAgICB2YXIgY3VycmVudE5vdGlmaWNhdGlvblBlcm1pc3Npb24gPSBPbmVTaWduYWwuX2dldE5vdGlmaWNhdGlvblBlcm1pc3Npb24oKTtcblx0ICAgICAgX2xpbWl0U3RvcmUyLmRlZmF1bHQucHV0KCdub3RpZmljYXRpb24ucGVybWlzc2lvbicsIGN1cnJlbnROb3RpZmljYXRpb25QZXJtaXNzaW9uKTtcblx0ICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgbmF0aXZlbHkgc3VwcG9ydHMgaG9va2luZyB0aGUgc3Vic2NyaXB0aW9uIHByb21wdCBwZXJtaXNzaW9uIGNoYW5nZSBldmVudFxuXHQgICAgICAvLyAgICAgdXNlIGl0IGluc3RlYWQgb2Ygb3VyIFNESyBtZXRob2Rcblx0ICAgICAgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogJ25vdGlmaWNhdGlvbnMnIH0pLnRoZW4oZnVuY3Rpb24gKHBlcm1pc3Npb25TdGF0dXMpIHtcblx0ICAgICAgICBwZXJtaXNzaW9uU3RhdHVzLm9uY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgdmFyIHJlY2VudFBlcm1pc3Npb25zID0gX2xpbWl0U3RvcmUyLmRlZmF1bHQuZ2V0KCdub3RpZmljYXRpb24ucGVybWlzc2lvbicpO1xuXHQgICAgICAgICAgdmFyIHBlcm1pc3Npb25CZWZvcmVQcm9tcHQgPSByZWNlbnRQZXJtaXNzaW9uc1swXTtcblx0ICAgICAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X25hdGl2ZVByb21wdFBlcm1pc3Npb25DaGFuZ2VkKHBlcm1pc3Npb25CZWZvcmVQcm9tcHQpO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICB9KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZhciBjdXJyZW50Tm90aWZpY2F0aW9uUGVybWlzc2lvbiA9IE9uZVNpZ25hbC5fZ2V0Tm90aWZpY2F0aW9uUGVybWlzc2lvbigpO1xuXHQgICAgICBfbGltaXRTdG9yZTIuZGVmYXVsdC5wdXQoJ25vdGlmaWNhdGlvbi5wZXJtaXNzaW9uJywgY3VycmVudE5vdGlmaWNhdGlvblBlcm1pc3Npb24pO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHZhbHVlIG9mIElkczpyZWdpc3RyYXRpb25JZCwgc28gdGhhdCB3ZSBjYW4gc2VlIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcblx0ICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuXHQgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBPbmVTaWduYWwuX2lzTmV3VmlzaXRvciA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgICAgdmFyIHN0b3JlVmFsdWUgPSByZXN1bHQgPyByZXN1bHQuaWQgOiBudWxsO1xuXHQgICAgICBfbGltaXRTdG9yZTIuZGVmYXVsdC5wdXQoJ2RiLmlkcy51c2VySWQnLCBzdG9yZVZhbHVlKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHZhbHVlIG9mIHN1YnNjcmlwdGlvbiwgc28gdGhhdCB3ZSBjYW4gc2VlIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcblx0ICAgIE9uZVNpZ25hbC5fZ2V0U3Vic2NyaXB0aW9uKGZ1bmN0aW9uIChjdXJyZW50U3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgIF9saW1pdFN0b3JlMi5kZWZhdWx0LnB1dCgnc3Vic2NyaXB0aW9uLmludGVybmFsLnZhbHVlJywgY3VycmVudFN1YnNjcmlwdGlvbik7XG5cdCAgICB9KTtcblx0XG5cdCAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLnByb21wdC5jdXN0b20uY2xpY2tlZCcsIE9uZVNpZ25hbC5vbkN1c3RvbVByb21wdENsaWNrZWQpO1xuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5wcm9tcHQubmF0aXZlLnBlcm1pc3Npb25jaGFuZ2VkJywgT25lU2lnbmFsLm9uTmF0aXZlUHJvbXB0Q2hhbmdlZCk7XG5cdCAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLnN1YnNjcmlwdGlvbi5jaGFuZ2VkJywgT25lU2lnbmFsLl9vblN1YnNjcmlwdGlvbkNoYW5nZWQpO1xuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5kYi52YWx1ZXJldHJpZXZlZCcsIE9uZVNpZ25hbC5fb25EYlZhbHVlUmV0cmlldmVkKTtcblx0ICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuZGIudmFsdWVzZXQnLCBPbmVTaWduYWwuX29uRGJWYWx1ZVNldCk7XG5cdCAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLmRiLnZhbHVlc2V0JywgT25lU2lnbmFsLl9vbkRiVmFsdWVTZXQpO1xuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5pbnRlcm5hbC5zdWJzY3JpcHRpb25zZXQnLCBPbmVTaWduYWwuX29uSW50ZXJuYWxTdWJzY3JpcHRpb25TZXQpO1xuXHRcblx0ICAgIE9uZVNpZ25hbC5fdXNlSHR0cE1vZGUgPSAhKDAsIF91dGlscy5pc1N1cHBvcnRlZFNhZmFyaSkoKSAmJiAoIU9uZVNpZ25hbC5fc3VwcG9ydHNEaXJlY3RQZXJtaXNzaW9uKCkgfHwgT25lU2lnbmFsLl9pbml0T3B0aW9ucy5zdWJkb21haW5OYW1lKTtcblx0XG5cdCAgICBpZiAoT25lU2lnbmFsLl91c2VIdHRwTW9kZSkgT25lU2lnbmFsLl9pbml0T25lU2lnbmFsSHR0cCA9ICdodHRwczovLycgKyBPbmVTaWduYWwuX2luaXRPcHRpb25zLnN1YmRvbWFpbk5hbWUgKyAnLm9uZXNpZ25hbC5jb20vc2Rrcy9pbml0T25lU2lnbmFsSHR0cCc7ZWxzZSBPbmVTaWduYWwuX2luaXRPbmVTaWduYWxIdHRwID0gJ2h0dHBzOi8vb25lc2lnbmFsLmNvbS9zZGtzL2luaXRPbmVTaWduYWxIdHRwcyc7XG5cdFxuXHQgICAgaWYgKHRydWUpIE9uZVNpZ25hbC5faW5pdE9uZVNpZ25hbEh0dHAgPSBfdmFycy5ERVZfSE9TVCArICcvZGV2X3Nka3MvaW5pdE9uZVNpZ25hbEh0dHAnO1xuXHRcblx0ICAgIC8vIElmIFNhZmFyaSAtIGFkZCAnZmV0Y2gnIHBvbGx5ZmlsbCBpZiBpdCBpc24ndCBhbHJlYWR5IGFkZGVkLlxuXHQgICAgaWYgKCgwLCBfdXRpbHMuaXNTdXBwb3J0ZWRTYWZhcmkpKCkgJiYgdHlwZW9mIHdpbmRvdy5mZXRjaCA9PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdCAgICAgIHMuc2V0QXR0cmlidXRlKCdzcmMnLCBcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZldGNoLzAuOS4wL2ZldGNoLmpzXCIpO1xuXHQgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIE9uZVNpZ25hbC5faW50ZXJuYWxJbml0KCk7ZWxzZSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIE9uZVNpZ25hbC5faW50ZXJuYWxJbml0KTtcblx0XG5cdCAgICBpZiAoKHRydWUpICYmICgwLCBfdXRpbHMuaXNCcm93c2VyRW52KSgpKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5pbmZvKCdTaG93aW5nIGJlbGwuJyk7XG5cdCAgICAgIE9uZVNpZ25hbC5iZWxsID0gbmV3IF9iZWxsMi5kZWZhdWx0KHtcblx0ICAgICAgICBzaXplOiAnbGFyZ2UnLFxuXHQgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tLXJpZ2h0Jyxcblx0ICAgICAgICB0aGVtZTogJ2RlZmF1bHQnXG5cdCAgICAgIH0pO1xuXHQgICAgICBPbmVTaWduYWwuYmVsbC5jcmVhdGUoKTtcblx0ICAgIH1cblx0XG5cdCAgICBPbmVTaWduYWwuX2lzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXHQgIH0sXG5cdFxuXHQgIF9pbnRlcm5hbEluaXQ6IGZ1bmN0aW9uIF9pbnRlcm5hbEluaXQoKSB7XG5cdCAgICBQcm9taXNlLmFsbChbT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAnYXBwSWQnKSwgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAncmVnaXN0cmF0aW9uSWQnKSwgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdPcHRpb25zJywgJ3N1YnNjcmlwdGlvbicpXSkudGhlbihmdW5jdGlvbiBfaW50ZXJuYWxJbml0X0dvdEFwcFJlZ2lzdHJhdGlvblN1YnNjcmlwdGlvbklkcyhyZXN1bHQpIHtcblx0ICAgICAgdmFyIGFwcElkUmVzdWx0ID0gcmVzdWx0WzBdO1xuXHQgICAgICB2YXIgcmVnaXN0cmF0aW9uSWRSZXN1bHQgPSByZXN1bHRbMV07XG5cdCAgICAgIHZhciBzdWJzY3JpcHRpb25SZXN1bHQgPSByZXN1bHRbMl07XG5cdFxuXHQgICAgICAvLyBJZiBBcHBJZCBjaGFuZ2VkIGRlbGV0ZSBwbGF5ZXJJZCBhbmQgY29udGludWUuXG5cdCAgICAgIGlmIChhcHBJZFJlc3VsdCAmJiBhcHBJZFJlc3VsdC5pZCAhPSBPbmVTaWduYWwuX2luaXRPcHRpb25zLmFwcElkKSB7XG5cdCAgICAgICAgT25lU2lnbmFsLl9kZWxldGVEYlZhbHVlKFwiSWRzXCIsIFwidXNlcklkXCIpO1xuXHQgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJPTkVfU0lHTkFMX1NFU1NJT05cIik7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIC8vIEhUVFBTIC0gT25seSByZWdpc3RlciBmb3IgcHVzaCBub3RpZmljYXRpb25zIG9uY2UgcGVyIHNlc3Npb24gb3IgaWYgdGhlIHVzZXIgY2hhbmdlcyBub3RpZmljYXRpb24gcGVybWlzc2lvbiB0byBBc2sgb3IgQWxsb3cuXG5cdCAgICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiT05FX1NJR05BTF9TRVNTSU9OXCIpICYmICFPbmVTaWduYWwuX2luaXRPcHRpb25zLnN1YmRvbWFpbk5hbWUgJiYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09IFwiZGVuaWVkXCIgfHwgc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcIk9ORV9TSUdOQUxfTk9USUZJQ0FUSU9OX1BFUk1JU1NJT05cIikgPT0gTm90aWZpY2F0aW9uLnBlcm1pc3Npb24pKSByZXR1cm47XG5cdFxuXHQgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiT05FX1NJR05BTF9OT1RJRklDQVRJT05fUEVSTUlTU0lPTlwiLCBOb3RpZmljYXRpb24ucGVybWlzc2lvbik7XG5cdFxuXHQgICAgICBpZiAoT25lU2lnbmFsLl9pbml0T3B0aW9ucy5hdXRvUmVnaXN0ZXIgPT0gZmFsc2UgJiYgIXJlZ2lzdHJhdGlvbklkUmVzdWx0ICYmIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc3ViZG9tYWluTmFtZSA9PSBudWxsKSByZXR1cm47XG5cdFxuXHQgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlICE9IFwidmlzaWJsZVwiKSB7XG5cdCAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgT25lU2lnbmFsLl92aXNpYmlsaXR5Y2hhbmdlKTtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIE9uZVNpZ25hbC5fc2Vzc2lvbkluaXQoe30pO1xuXHQgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgcmVnaXN0ZXJGb3JQdXNoTm90aWZpY2F0aW9uczogZnVuY3Rpb24gcmVnaXN0ZXJGb3JQdXNoTm90aWZpY2F0aW9ucyhvcHRpb25zKSB7XG5cdCAgICBpZiAoISgwLCBfdXRpbHMuaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCkoKSkge1xuXHQgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQud2FybihcIllvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHB1c2ggbm90aWZpY2F0aW9ucy5cIik7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIC8vIFdBUk5JTkc6IERvIE5PVCBhZGQgY2FsbGJhY2tzIHRoYXQgaGF2ZSB0byBmaXJlIHRvIGdldCBmcm9tIGhlcmUgdG8gd2luZG93Lm9wZW4gaW4gX3Nlc3Npb25Jbml0LlxuXHQgICAgLy8gICAgICAgICAgT3RoZXJ3aXNlIHRoZSBwb3AtdXAgdG8gYXNrIGZvciBwdXNoIHBlcm1pc3Npb24gb24gSFRUUCBjb25uZWN0aW9ucyB3aWxsIGJlIGJsb2NrZWQgYnkgQ2hyb21lLlxuXHQgICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cdCAgICBvcHRpb25zLmZyb21SZWdpc3RlckZvciA9IHRydWU7XG5cdCAgICBPbmVTaWduYWwuX3Nlc3Npb25Jbml0KG9wdGlvbnMpO1xuXHQgIH0sXG5cdFxuXHQgIC8vIEh0dHAgb25seSAtIE9ubHkgY2FsbGVkIGZyb20gaWZyYW1lJ3MgaW5pdC5qc1xuXHQgIF9pbml0SHR0cDogZnVuY3Rpb24gX2luaXRIdHRwKG9wdGlvbnMpIHtcblx0ICAgIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMgPSBvcHRpb25zO1xuXHRcblx0ICAgIGlmIChvcHRpb25zLmNvbnRpbnVlUHJlc3NlZCkge1xuXHQgICAgICBPbmVTaWduYWwuc2V0U3Vic2NyaXB0aW9uKHRydWUpO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBpc0lmcmFtZSA9IHBhcmVudCAhPSBudWxsICYmIHBhcmVudCAhPSB3aW5kb3c7XG5cdCAgICB2YXIgY3JlYXRvciA9IG9wZW5lciB8fCBwYXJlbnQ7XG5cdFxuXHQgICAgaWYgKCFjcmVhdG9yKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIkVSUk9SOl9pbml0SHR0cDogTm8gb3BlbmVyIG9yIHBhcmVudCBmb3VuZCFcIik7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICAgIC8vIFNldHRpbmcgdXAgbWVzc2FnZSBjaGFubmVsIHRvIHJlY2VpdmUgbWVzc2FnZSBmcm9tIGhvc3QgcGFnZS5cblx0ICAgIHZhciBtZXNzYWdlQ2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuXHQgICAgbWVzc2FnZUNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIl9pbml0SHR0cC5tZXNzYWdlQ2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2VcIiwgZXZlbnQpO1xuXHRcblx0ICAgICAgaWYgKGV2ZW50LmRhdGEuaW5pdE9wdGlvbnMpIHtcblx0ICAgICAgICBPbmVTaWduYWwuc2V0RGVmYXVsdE5vdGlmaWNhdGlvblVybChldmVudC5kYXRhLmluaXRPcHRpb25zLmRlZmF1bHRVcmwpO1xuXHQgICAgICAgIE9uZVNpZ25hbC5zZXREZWZhdWx0VGl0bGUoZXZlbnQuZGF0YS5pbml0T3B0aW9ucy5kZWZhdWx0VGl0bGUpO1xuXHQgICAgICAgIGlmIChldmVudC5kYXRhLmluaXRPcHRpb25zLmRlZmF1bHRJY29uKSBPbmVTaWduYWwuc2V0RGVmYXVsdEljb24oZXZlbnQuZGF0YS5pbml0T3B0aW9ucy5kZWZhdWx0SWNvbik7XG5cdFxuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcImRvY3VtZW50LlVSTFwiLCBldmVudC5kYXRhLmluaXRPcHRpb25zLnBhcmVudF91cmwpO1xuXHQgICAgICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZShcIk5vdGlmaWNhdGlvbk9wZW5lZFwiLCBldmVudC5kYXRhLmluaXRPcHRpb25zLnBhcmVudF91cmwpLnRoZW4oZnVuY3Rpb24gcmVnaXN0ZXJGb3JQdXNoTm90aWZpY2F0aW9uc19Hb3ROb3RpZmljYXRpb25PcGVuZWQobm90aWZpY2F0aW9uT3BlbmVkUmVzdWx0KSB7XG5cdCAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoXCJfaW5pdEh0dHAgTm90aWZpY2F0aW9uT3BlbmVkIGRiXCIsIG5vdGlmaWNhdGlvbk9wZW5lZFJlc3VsdCk7XG5cdCAgICAgICAgICBpZiAobm90aWZpY2F0aW9uT3BlbmVkUmVzdWx0KSB7XG5cdCAgICAgICAgICAgIE9uZVNpZ25hbC5fZGVsZXRlRGJWYWx1ZShcIk5vdGlmaWNhdGlvbk9wZW5lZFwiLCBldmVudC5kYXRhLmluaXRPcHRpb25zLnBhcmVudF91cmwpO1xuXHQgICAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoXCJPbmVTaWduYWwuX3NhZmVQb3N0TWVzc2FnZTp0YXJnZXRPcmlnaW46XCIsIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMub3JpZ2luKTtcblx0XG5cdCAgICAgICAgICAgIE9uZVNpZ25hbC5fc2FmZVBvc3RNZXNzYWdlKGNyZWF0b3IsIHsgb3BlbmVkTm90aWZpY2F0aW9uOiBub3RpZmljYXRpb25PcGVuZWRSZXN1bHQuZGF0YSB9LCBPbmVTaWduYWwuX2luaXRPcHRpb25zLm9yaWdpbiwgbnVsbCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICA7XG5cdCAgICAgIH0gZWxzZSBpZiAoZXZlbnQuZGF0YS5nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uKSB7XG5cdCAgICAgICAgT25lU2lnbmFsLl9nZXRTdWJkb21haW5TdGF0ZShmdW5jdGlvbiAoY3VyU3RhdGUpIHtcblx0ICAgICAgICAgIE9uZVNpZ25hbC5fc2FmZVBvc3RNZXNzYWdlKGNyZWF0b3IsIHsgY3VycmVudE5vdGlmaWNhdGlvblBlcm1pc3Npb246IGN1clN0YXRlIH0sIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMub3JpZ2luLCBudWxsKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSBlbHNlIGlmIChldmVudC5kYXRhLnNldFN1YmRvbWFpblN0YXRlKSBPbmVTaWduYWwuc2V0U3Vic2NyaXB0aW9uKGV2ZW50LmRhdGEuc2V0U3ViZG9tYWluU3RhdGUuc2V0U3Vic2NyaXB0aW9uKTtcblx0ICAgIH07XG5cdFxuXHQgICAgT25lU2lnbmFsLl9nZXRTdWJkb21haW5TdGF0ZShmdW5jdGlvbiAoY3VyU3RhdGUpIHtcblx0ICAgICAgY3VyU3RhdGVbXCJpc0lmcmFtZVwiXSA9IGlzSWZyYW1lO1xuXHQgICAgICBPbmVTaWduYWwuX3NhZmVQb3N0TWVzc2FnZShjcmVhdG9yLCB7IG9uZVNpZ25hbEluaXRQYWdlUmVhZHk6IGN1clN0YXRlIH0sIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMub3JpZ2luLCBbbWVzc2FnZUNoYW5uZWwucG9ydDJdKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIE9uZVNpZ25hbC5faW5pdFNhdmVTdGF0ZSgpO1xuXHQgICAgT25lU2lnbmFsLl9odHRwUmVnaXN0cmF0aW9uID0gdHJ1ZTtcblx0ICAgIGlmIChsb2NhdGlvbi5zZWFyY2guaW5kZXhPZihcIj9zZXNzaW9uPXRydWVcIikgPT0gMCkgcmV0dXJuO1xuXHRcblx0ICAgIE9uZVNpZ25hbC5fZ2V0UGxheWVySWQobnVsbCwgZnVuY3Rpb24gKHBsYXllcl9pZCkge1xuXHQgICAgICBpZiAoIWlzSWZyYW1lIHx8IHBsYXllcl9pZCkge1xuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIkJlZm9yZSBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlclwiKTtcblx0ICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoXCJBZnRlciBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlclwiKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgX2dldFN1YmRvbWFpblN0YXRlOiBmdW5jdGlvbiBfZ2V0U3ViZG9tYWluU3RhdGUoY2FsbGJhY2spIHtcblx0ICAgIHZhciBzdGF0ZSA9IHt9O1xuXHRcblx0ICAgIFByb21pc2UuYWxsKFtPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICd1c2VySWQnKSwgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAncmVnaXN0cmF0aW9uSWQnKSwgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdPcHRpb25zJywgJ3N1YnNjcmlwdGlvbicpXSkudGhlbihmdW5jdGlvbiBfaW50ZXJuYWxJbml0X0dvdEFwcFJlZ2lzdHJhdGlvblN1YnNjcmlwdGlvbklkcyhyZXN1bHQpIHtcblx0ICAgICAgdmFyIHVzZXJJZFJlc3VsdCA9IHJlc3VsdFswXTtcblx0ICAgICAgdmFyIHJlZ2lzdHJhdGlvbklkUmVzdWx0ID0gcmVzdWx0WzFdO1xuXHQgICAgICB2YXIgc3Vic2NyaXB0aW9uUmVzdWx0ID0gcmVzdWx0WzJdO1xuXHRcblx0ICAgICAgY2FsbGJhY2soe1xuXHQgICAgICAgIHVzZXJJZDogdXNlcklkUmVzdWx0ID8gdXNlcklkUmVzdWx0LmlkIDogbnVsbCxcblx0ICAgICAgICByZWdpc3RyYXRpb25JZDogcmVnaXN0cmF0aW9uSWRSZXN1bHQgPyByZWdpc3RyYXRpb25JZFJlc3VsdC5pZCA6IG51bGwsXG5cdCAgICAgICAgbm90aWZQZXJtc3Npb246IE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uLFxuXHQgICAgICAgIHN1YnNjcmlwdGlvblNldDogc3Vic2NyaXB0aW9uUmVzdWx0ID8gc3Vic2NyaXB0aW9uUmVzdWx0LnZhbHVlIDogbnVsbCxcblx0ICAgICAgICBpc1B1c2hFbmFibGVkOiBOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PSBcImdyYW50ZWRcIiAmJiB1c2VySWRSZXN1bHQgJiYgcmVnaXN0cmF0aW9uSWRSZXN1bHQgJiYgKHN1YnNjcmlwdGlvblJlc3VsdCAmJiBzdWJzY3JpcHRpb25SZXN1bHQudmFsdWUgfHwgc3Vic2NyaXB0aW9uUmVzdWx0ID09IG51bGwpXG5cdCAgICAgIH0pO1xuXHQgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgfSk7XG5cdCAgICA7XG5cdCAgfSxcblx0XG5cdCAgX2luaXRTYXZlU3RhdGU6IGZ1bmN0aW9uIF9pbml0U2F2ZVN0YXRlKCkge1xuXHQgICAgT25lU2lnbmFsLl9hcHBfaWQgPSBPbmVTaWduYWwuX2luaXRPcHRpb25zLmFwcElkO1xuXHQgICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiSWRzXCIsIHsgdHlwZTogXCJhcHBJZFwiLCBpZDogT25lU2lnbmFsLl9hcHBfaWQgfSk7XG5cdCAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJPcHRpb25zXCIsIHsga2V5OiBcInBhZ2VUaXRsZVwiLCB2YWx1ZTogZG9jdW1lbnQudGl0bGUgfSk7XG5cdCAgfSxcblx0XG5cdCAgX3N1cHBvcnRzRGlyZWN0UGVybWlzc2lvbjogZnVuY3Rpb24gX3N1cHBvcnRzRGlyZWN0UGVybWlzc2lvbigpIHtcblx0ICAgIHJldHVybiAoMCwgX3V0aWxzLmlzU3VwcG9ydGVkU2FmYXJpKSgpIHx8IGxvY2F0aW9uLnByb3RvY29sID09ICdodHRwczonIHx8IGxvY2F0aW9uLmhvc3QuaW5kZXhPZihcImxvY2FsaG9zdFwiKSA9PSAwIHx8IGxvY2F0aW9uLmhvc3QuaW5kZXhPZihcIjEyNy4wLjAuMVwiKSA9PSAwO1xuXHQgIH0sXG5cdFxuXHQgIF9zZXNzaW9uSW5pdDogZnVuY3Rpb24gX3Nlc3Npb25Jbml0KG9wdGlvbnMpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIkNhbGxlZCBPbmVTaWduYWwuX3Nlc3Npb25Jbml0KCk6XCIsIG9wdGlvbnMpO1xuXHQgICAgT25lU2lnbmFsLl9pbml0U2F2ZVN0YXRlKCk7XG5cdFxuXHQgICAgdmFyIGhvc3RQYWdlUHJvdG9jb2wgPSBsb2NhdGlvbi5vcmlnaW4ubWF0Y2goL15odHRwKHN8KTpcXC9cXC8od3d3XFwufCkvKVswXTtcblx0XG5cdCAgICAvLyBJZiBIVFRQIG9yIHVzaW5nIHN1YmRvbWFpbiBtb2RlXG5cdCAgICBpZiAoT25lU2lnbmFsLl91c2VIdHRwTW9kZSkge1xuXHQgICAgICBpZiAob3B0aW9ucy5mcm9tUmVnaXN0ZXJGb3IpIHtcblx0ICAgICAgICB2YXIgZHVhbFNjcmVlbkxlZnQgPSB3aW5kb3cuc2NyZWVuTGVmdCAhPSB1bmRlZmluZWQgPyB3aW5kb3cuc2NyZWVuTGVmdCA6IHNjcmVlbi5sZWZ0O1xuXHQgICAgICAgIHZhciBkdWFsU2NyZWVuVG9wID0gd2luZG93LnNjcmVlblRvcCAhPSB1bmRlZmluZWQgPyB3aW5kb3cuc2NyZWVuVG9wIDogc2NyZWVuLnRvcDtcblx0XG5cdCAgICAgICAgdmFyIHRoaXNXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoID8gd2luZG93LmlubmVyV2lkdGggOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggOiBzY3JlZW4ud2lkdGg7XG5cdCAgICAgICAgdmFyIHRoaXNIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA6IHNjcmVlbi5oZWlnaHQ7XG5cdCAgICAgICAgdmFyIGNoaWxkV2lkdGggPSBPbmVTaWduYWwuX3dpbmRvd1dpZHRoO1xuXHQgICAgICAgIHZhciBjaGlsZEhlaWdodCA9IE9uZVNpZ25hbC5fd2luZG93SGVpZ2h0O1xuXHRcblx0ICAgICAgICB2YXIgbGVmdCA9IHRoaXNXaWR0aCAvIDIgLSBjaGlsZFdpZHRoIC8gMiArIGR1YWxTY3JlZW5MZWZ0O1xuXHQgICAgICAgIHZhciB0b3AgPSB0aGlzSGVpZ2h0IC8gMiAtIGNoaWxkSGVpZ2h0IC8gMiArIGR1YWxTY3JlZW5Ub3A7XG5cdFxuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnT3BlbmluZyBwb3B1cCB3aW5kb3cuJyk7XG5cdCAgICAgICAgdmFyIG1lc3NhZ2VfbG9jYWxpemF0aW9uX29wdHMgPSBPbmVTaWduYWwuX2luaXRPcHRpb25zWydwcm9tcHRPcHRpb25zJ107XG5cdCAgICAgICAgdmFyIG1lc3NhZ2VfbG9jYWxpemF0aW9uX29wdHNfc3RyID0gJyc7XG5cdCAgICAgICAgaWYgKG1lc3NhZ2VfbG9jYWxpemF0aW9uX29wdHMpIHtcblx0ICAgICAgICAgIHZhciBtZXNzYWdlX2xvY2FsaXphdGlvbl9wYXJhbXMgPSBbJ2FjdGlvbk1lc3NhZ2UnLCAnZXhhbXBsZU5vdGlmaWNhdGlvblRpdGxlRGVza3RvcCcsICdleGFtcGxlTm90aWZpY2F0aW9uTWVzc2FnZURlc2t0b3AnLCAnZXhhbXBsZU5vdGlmaWNhdGlvblRpdGxlTW9iaWxlJywgJ2V4YW1wbGVOb3RpZmljYXRpb25NZXNzYWdlTW9iaWxlJywgJ2V4YW1wbGVOb3RpZmljYXRpb25DYXB0aW9uJywgJ2FjY2VwdEJ1dHRvblRleHQnLCAnY2FuY2VsQnV0dG9uVGV4dCddO1xuXHQgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlX2xvY2FsaXphdGlvbl9wYXJhbXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGtleSA9IG1lc3NhZ2VfbG9jYWxpemF0aW9uX3BhcmFtc1tpXTtcblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gbWVzc2FnZV9sb2NhbGl6YXRpb25fb3B0c1trZXldO1xuXHQgICAgICAgICAgICB2YXIgZW5jb2RlZF92YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cdCAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gJycpIHtcblx0ICAgICAgICAgICAgICBtZXNzYWdlX2xvY2FsaXphdGlvbl9vcHRzX3N0ciArPSAnJicgKyBrZXkgKyAnPScgKyBlbmNvZGVkX3ZhbHVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBjaGlsZFdpbmRvdyA9IHdpbmRvdy5vcGVuKE9uZVNpZ25hbC5faW5pdE9uZVNpZ25hbEh0dHAgKyBcIj9cIiArIG1lc3NhZ2VfbG9jYWxpemF0aW9uX29wdHNfc3RyICsgXCImaG9zdFBhZ2VQcm90b2NvbD1cIiArIGhvc3RQYWdlUHJvdG9jb2wsIFwiX2JsYW5rXCIsICdzY3JvbGxiYXJzPXllcywgd2lkdGg9JyArIGNoaWxkV2lkdGggKyAnLCBoZWlnaHQ9JyArIGNoaWxkSGVpZ2h0ICsgJywgdG9wPScgKyB0b3AgKyAnLCBsZWZ0PScgKyBsZWZ0KTtcblx0XG5cdCAgICAgICAgaWYgKGNoaWxkV2luZG93KSBjaGlsZFdpbmRvdy5mb2N1cygpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnT3BlbmluZyBpRnJhbWUuJyk7XG5cdCAgICAgICAgT25lU2lnbmFsLl9hZGRTZXNzaW9uSWZyYW1lKGhvc3RQYWdlUHJvdG9jb2wpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKCgwLCBfdXRpbHMuaXNTdXBwb3J0ZWRTYWZhcmkpKCkpIHtcblx0ICAgICAgaWYgKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc2FmYXJpX3dlYl9pZCkge1xuXHQgICAgICAgIHZhciBub3RpZmljYXRpb25QZXJtaXNzaW9uQmVmb3JlUmVxdWVzdCA9IE9uZVNpZ25hbC5fZ2V0Tm90aWZpY2F0aW9uUGVybWlzc2lvbihPbmVTaWduYWwuX2luaXRPcHRpb25zLnNhZmFyaV93ZWJfaWQpO1xuXHQgICAgICAgIHdpbmRvdy5zYWZhcmkucHVzaE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbihPbmVTaWduYWwuX0hPU1RfVVJMICsgJ3NhZmFyaScsIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc2FmYXJpX3dlYl9pZCwgeyBhcHBfaWQ6IE9uZVNpZ25hbC5fYXBwX2lkIH0sIGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoZGF0YSk7XG5cdCAgICAgICAgICB2YXIgbm90aWZpY2F0aW9uUGVybWlzc2lvbkFmdGVyUmVxdWVzdCA9IE9uZVNpZ25hbC5fZ2V0Tm90aWZpY2F0aW9uUGVybWlzc2lvbihPbmVTaWduYWwuX2luaXRPcHRpb25zLnNhZmFyaV93ZWJfaWQpO1xuXHQgICAgICAgICAgaWYgKGRhdGEuZGV2aWNlVG9rZW4pIHtcblx0ICAgICAgICAgICAgT25lU2lnbmFsLl9yZWdpc3RlcldpdGhPbmVTaWduYWwoT25lU2lnbmFsLl9hcHBfaWQsIGRhdGEuZGV2aWNlVG9rZW4udG9Mb3dlckNhc2UoKSwgNyk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiT05FX1NJR05BTF9TRVNTSU9OXCIsIHRydWUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgT25lU2lnbmFsLl90cmlnZ2VyRXZlbnRfbmF0aXZlUHJvbXB0UGVybWlzc2lvbkNoYW5nZWQobm90aWZpY2F0aW9uUGVybWlzc2lvbkJlZm9yZVJlcXVlc3QpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKG9wdGlvbnMubW9kYWxQcm9tcHQgJiYgb3B0aW9ucy5mcm9tUmVnaXN0ZXJGb3IpIHtcblx0ICAgICAgLy8gSWYgSFRUUFMgLSBTaG93IG1vZGFsXG5cdCAgICAgIGlmICghKDAsIF91dGlscy5pc1B1c2hOb3RpZmljYXRpb25zU3VwcG9ydGVkKSgpKSB7XG5cdCAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0Lndhcm4oJ0FuIGF0dGVtcHQgd2FzIG1hZGUgdG8gb3BlbiB0aGUgSFRUUFMgbW9kYWwgcGVybWlzc2lvbiBwcm9tcHQsIGJ1dCBwdXNoIG5vdGlmaWNhdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBicm93c2VyLiBPcGVuaW5nIGNhbmNlbGVkLicpO1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHQgICAgICBPbmVTaWduYWwuaXNQdXNoTm90aWZpY2F0aW9uc0VuYWJsZWQoZnVuY3Rpb24gKHB1c2hFbmFibGVkKSB7XG5cdCAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCAnT25lU2lnbmFsLWlmcmFtZS1tb2RhbCcpO1xuXHQgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gJzxkaXYgaWQ9XCJub3RpZi1wZXJtaXNzaW9uXCIgc3R5bGU9XCJiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNyk7IHBvc2l0aW9uOiBmaXhlZDsgdG9wOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgYm90dG9tOiAwOyB6LWluZGV4OiA5MDAwOyBkaXNwbGF5OiBibG9ja1wiPjwvZGl2Pic7XG5cdCAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XG5cdCAgICAgICAgdmFyIGlmcmFtZVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0ICAgICAgICBpZnJhbWVTdHlsZS5pbm5lckhUTUwgPSBcIkBtZWRpYSAobWF4LXdpZHRoOiA1NjBweCkgeyAuT25lU2lnbmFsLXBlcm1pc3Npb24taWZyYW1lIHsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTt9IH1cIiArIFwiQG1lZGlhIChtaW4td2lkdGg6IDU2MXB4KSB7IC5PbmVTaWduYWwtcGVybWlzc2lvbi1pZnJhbWUgeyB0b3A6IDUwJTsgbGVmdDogNTAlOyBtYXJnaW4tbGVmdDogLTI3NXB4OyBtYXJnaW4tdG9wOiAtMjQ4cHg7fSB9XCI7XG5cdCAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChpZnJhbWVTdHlsZSk7XG5cdFxuXHQgICAgICAgIHZhciBpZnJhbWVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcblx0ICAgICAgICBpZnJhbWVOb2RlLmNsYXNzTmFtZSA9IFwiT25lU2lnbmFsLXBlcm1pc3Npb24taWZyYW1lXCI7XG5cdCAgICAgICAgaWZyYW1lTm9kZS5zdHlsZS5jc3NUZXh0ID0gXCJiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpOyBwb3NpdGlvbjogZml4ZWQ7XCI7XG5cdCAgICAgICAgaWZyYW1lTm9kZS5zcmMgPSBPbmVTaWduYWwuX2luaXRPbmVTaWduYWxIdHRwICsgJz9pZD0nICsgT25lU2lnbmFsLl9hcHBfaWQgKyAnJmh0dHBzUHJvbXB0PXRydWUnICsgJyZwdXNoRW5hYmxlZD0nICsgcHVzaEVuYWJsZWQgKyAnJnBlcm1pc3Npb25CbG9ja2VkPScgKyAodHlwZW9mIE5vdGlmaWNhdGlvbiA9PT0gXCJ1bmRlZmluZWRcIiB8fCBOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PSBcImRlbmllZFwiKSArICcmaG9zdFBhZ2VQcm90b2NvbD0nICsgaG9zdFBhZ2VQcm90b2NvbDtcblx0ICAgICAgICBpZnJhbWVOb2RlLnNldEF0dHJpYnV0ZSgnZnJhbWVib3JkZXInLCAnMCcpO1xuXHQgICAgICAgIGlmcmFtZU5vZGUud2lkdGggPSBPbmVTaWduYWwuX3dpbmRvd1dpZHRoLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgaWZyYW1lTm9kZS5oZWlnaHQgPSBPbmVTaWduYWwuX3dpbmRvd0hlaWdodC50b1N0cmluZygpO1xuXHRcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoJ09wZW5pbmcgSFRUUFMgbW9kYWwgcHJvbXB0LicpO1xuXHQgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm90aWYtcGVybWlzc2lvblwiKS5hcHBlbmRDaGlsZChpZnJhbWVOb2RlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9IGVsc2UgaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIC8vIElmIEhUVFBTIC0gU2hvdyBuYXRpdmUgcHJvbXB0XG5cdCAgICAgIE9uZVNpZ25hbC5fcmVnaXN0ZXJGb3JXM0NQdXNoKG9wdGlvbnMpO2Vsc2UgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKCdTZXJ2aWNlIHdvcmtlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyLicpO1xuXHRcblx0ICAgICgwLCBfZXZlbnRzLnRyaWdnZXJFdmVudCkoJ29uZXNpZ25hbC5zZGsuaW5pdGlhbGl6ZWQnLCBudWxsKTtcblx0ICB9LFxuXHRcblx0ICBfcmVnaXN0ZXJGb3JXM0NQdXNoOiBmdW5jdGlvbiBfcmVnaXN0ZXJGb3JXM0NQdXNoKG9wdGlvbnMpIHtcblx0XG5cdCAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICdyZWdpc3RyYXRpb25JZCcpLnRoZW4oZnVuY3Rpb24gX3JlZ2lzdGVyRm9yVzNDUHVzaF9Hb3RSZWdpc3RyYXRpb25JZChyZWdpc3RyYXRpb25JZFJlc3VsdCkge1xuXHQgICAgICBpZiAoIXJlZ2lzdHJhdGlvbklkUmVzdWx0IHx8ICFvcHRpb25zLmZyb21SZWdpc3RlckZvciB8fCBOb3RpZmljYXRpb24ucGVybWlzc2lvbiAhPSBcImdyYW50ZWRcIikge1xuXHQgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmdldFJlZ2lzdHJhdGlvbigpLnRoZW4oZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICB2YXIgc3dfcGF0aCA9IFwiXCI7XG5cdFxuXHQgICAgICAgICAgaWYgKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMucGF0aCkgc3dfcGF0aCA9IE9uZVNpZ25hbC5faW5pdE9wdGlvbnMucGF0aDtcblx0XG5cdCAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInVuZGVmaW5lZFwiKSAvLyBOb3RoaW5nIHJlZ2lzdGVyZWQsIHZlcnkgZmlyc3QgcnVuXG5cdCAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKGV2ZW50LmFjdGl2ZSkge1xuXHQgICAgICAgICAgICAgIGlmIChldmVudC5hY3RpdmUuc2NyaXB0VVJMLmluZGV4T2Yoc3dfcGF0aCArIE9uZVNpZ25hbC5TRVJWSUNFX1dPUktFUl9QQVRIKSA+IC0xKSB7XG5cdFxuXHQgICAgICAgICAgICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAnV09SS0VSMV9PTkVfU0lHTkFMX1NXX1ZFUlNJT04nKS50aGVuKGZ1bmN0aW9uICh2ZXJzaW9uUmVzdWx0KSB7XG5cdCAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uUmVzdWx0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNpb25SZXN1bHQuaWQgIT0gT25lU2lnbmFsLl9WRVJTSU9OKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICBldmVudC51bnJlZ2lzdGVyKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfVVBEQVRFUl9QQVRILCBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFSQU0pLnRoZW4oT25lU2lnbmFsLl9lbmFibGVOb3RpZmljYXRpb25zLCBPbmVTaWduYWwuX3JlZ2lzdGVyRXJyb3IpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICA7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcblx0ICAgICAgICAgICAgICAgICAgfSBlbHNlIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcblx0ICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgO1xuXHQgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuYWN0aXZlLnNjcmlwdFVSTC5pbmRleE9mKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfVVBEQVRFUl9QQVRIKSA+IC0xKSB7XG5cdFxuXHQgICAgICAgICAgICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAnV09SS0VSMV9PTkVfU0lHTkFMX1NXX1ZFUlNJT04nKS50aGVuKGZ1bmN0aW9uICh2ZXJzaW9uUmVzdWx0KSB7XG5cdCAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uUmVzdWx0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNpb25SZXN1bHQuaWQgIT0gT25lU2lnbmFsLl9WRVJTSU9OKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICBldmVudC51bnJlZ2lzdGVyKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcblx0ICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcihzd19wYXRoICsgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1VQREFURVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcblx0ICAgICAgICAgICAgICAgICAgfSBlbHNlIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfVVBEQVRFUl9QQVRILCBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFSQU0pLnRoZW4oT25lU2lnbmFsLl9lbmFibGVOb3RpZmljYXRpb25zLCBPbmVTaWduYWwuX3JlZ2lzdGVyRXJyb3IpO1xuXHQgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICA7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50Lmluc3RhbGxpbmcgPT0gbnVsbCkgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoc3dfcGF0aCArIE9uZVNpZ25hbC5TRVJWSUNFX1dPUktFUl9QQVRILCBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFSQU0pLnRoZW4oT25lU2lnbmFsLl9lbmFibGVOb3RpZmljYXRpb25zLCBPbmVTaWduYWwuX3JlZ2lzdGVyRXJyb3IpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgIH0pO1xuXHQgICAgO1xuXHQgIH0sXG5cdFxuXHQgIF9hZGRTZXNzaW9uSWZyYW1lOiBmdW5jdGlvbiBfYWRkU2Vzc2lvbklmcmFtZShob3N0UGFnZVByb3RvY29sKSB7XG5cdFxuXHQgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuXHQgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdCAgICBub2RlLnNyYyA9IE9uZVNpZ25hbC5faW5pdE9uZVNpZ25hbEh0dHAgKyBcIklmcmFtZVwiO1xuXHQgICAgaWYgKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJPTkVfU0lHTkFMX1NFU1NJT05cIikpIG5vZGUuc3JjICs9IFwiP3Nlc3Npb249dHJ1ZVwiICsgXCImaG9zdFBhZ2VQcm90b2NvbD1cIiArIGhvc3RQYWdlUHJvdG9jb2w7ZWxzZSBub2RlLnNyYyArPSBcIj9ob3N0UGFnZVByb3RvY29sPVwiICsgaG9zdFBhZ2VQcm90b2NvbDtcblx0ICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG5cdCAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoJ0FkZGluZyBzZXNzaW9uIGlGcmFtZS4nKTtcblx0XG5cdCAgICBPbmVTaWduYWwuX3Nlc3Npb25JZnJhbWVBZGRlZCA9IHRydWU7XG5cdCAgfSxcblx0XG5cdCAgX3JlZ2lzdGVyRXJyb3I6IGZ1bmN0aW9uIF9yZWdpc3RlckVycm9yKGVycikge1xuXHQgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKFwibmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXI6RVJST1I6IFwiICsgZXJyKTtcblx0ICB9LFxuXHRcblx0ICBfZW5hYmxlTm90aWZpY2F0aW9uczogZnVuY3Rpb24gX2VuYWJsZU5vdGlmaWNhdGlvbnMoZXhpc3RpbmdTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKSB7XG5cdCAgICAvLyBpcyBTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uIHR5cGVcblx0ICAgIGlmIChleGlzdGluZ1NlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnVGhlcmUgaXMgYW4gb2xkZXIgU2VydmljZVdvcmtlcjonLCBleGlzdGluZ1NlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pO1xuXHQgICAgaWYgKCEoJ1B1c2hNYW5hZ2VyJyBpbiB3aW5kb3cpKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIlB1c2ggbWVzc2FnaW5nIGlzIG5vdCBzdXBwb3J0ZWQuIE5vIFB1c2hNYW5hZ2VyLlwiKTtcblx0ICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIk9ORV9TSUdOQUxfU0VTU0lPTlwiLCB0cnVlKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmICghKCdzaG93Tm90aWZpY2F0aW9uJyBpbiBTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnByb3RvdHlwZSkpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKFwiTm90aWZpY2F0aW9ucyBhcmUgbm90IHN1cHBvcnRlZC4gc2hvd05vdGlmaWNhdGlvbiBub3QgYXZhaWxhYmxlIGluIFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24uXCIpO1xuXHQgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiT05FX1NJR05BTF9TRVNTSU9OXCIsIHRydWUpO1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9XG5cdFxuXHQgICAgaWYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZGVuaWVkJykge1xuXHQgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQud2FybihcIlRoZSB1c2VyIGhhcyBkaXNhYmxlZCBub3RpZmljYXRpb25zLlwiKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oZnVuY3Rpb24gKHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmluZm8oJ1NlcnZpY2Ugd29ya2VyIGFjdGl2ZTonLCBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKTtcblx0XG5cdCAgICAgIE9uZVNpZ25hbC5fc3Vic2NyaWJlRm9yUHVzaChzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKTtcblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgIH0pO1xuXHQgICAgO1xuXHQgIH0sXG5cdFxuXHQgIC8qXG5cdCAgIFJldHVybnMgdGhlIGN1cnJlbnQgYnJvd3Nlci1hZ25vc3RpYyBub3RpZmljYXRpb24gcGVybWlzc2lvbiBhcyBcImRlZmF1bHRcIiwgXCJncmFudGVkXCIsIFwiZGVuaWVkXCIuXG5cdCAgIHNhZmFyaVdlYklkOiBVc2VkIG9ubHkgdG8gZ2V0IHRoZSBjdXJyZW50IG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9uIHN0YXRlIGluIFNhZmFyaSAocmVxdWlyZWQgYXMgcGFydCBvZiB0aGUgc3BlYykuXG5cdCAgICovXG5cdCAgX2dldE5vdGlmaWNhdGlvblBlcm1pc3Npb246IGZ1bmN0aW9uIF9nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uKHNhZmFyaVdlYklkKSB7XG5cdCAgICBpZiAod2luZG93LnNhZmFyaSkge1xuXHQgICAgICAvLyBUaGUgdXNlciBpcyBvbiBTYWZhcmlcblx0ICAgICAgLy8gQSB3ZWIgSUQgaXMgcmVxdWlyZWQgdG8gZGV0ZXJtaW5lIHRoZSBjdXJyZW50IG5vdGlmaWNpYXRpb24gcGVybWlzc2lvblxuXHQgICAgICBpZiAoc2FmYXJpV2ViSWQpIHtcblx0ICAgICAgICByZXR1cm4gd2luZG93LnNhZmFyaS5wdXNoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24oc2FmYXJpV2ViSWQpLnBlcm1pc3Npb247XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgLy8gVGhlIHVzZXIgZGlkbid0IHNldCB1cCBTYWZhcmkgd2ViIHB1c2ggcHJvcGVybHk7IG5vdGlmaWNhdGlvbnMgYXJlIHVubGlrZWx5IHRvIGJlIGVuYWJsZWRcblx0ICAgICAgICByZXR1cm4gXCJkZWZhdWx0XCI7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIElkZW50aWNhbCBBUEkgb24gRmlyZWZveCBhbmQgQ2hyb21lXG5cdCAgICAgIHJldHVybiBOb3RpZmljYXRpb24ucGVybWlzc2lvbjtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBfdHJpZ2dlckV2ZW50X2N1c3RvbVByb21wdENsaWNrZWQ6IGZ1bmN0aW9uIF90cmlnZ2VyRXZlbnRfY3VzdG9tUHJvbXB0Q2xpY2tlZChjbGlja1Jlc3VsdCkge1xuXHQgICAgdmFyIHJlY2VudFBlcm1pc3Npb25zID0gX2xpbWl0U3RvcmUyLmRlZmF1bHQucHV0KCdub3RpZmljYXRpb24ucGVybWlzc2lvbicsIGNsaWNrUmVzdWx0KTtcblx0ICAgICgwLCBfZXZlbnRzLnRyaWdnZXJFdmVudCkoJ29uZXNpZ25hbC5wcm9tcHQuY3VzdG9tLmNsaWNrZWQnLCB7XG5cdCAgICAgIHJlc3VsdDogY2xpY2tSZXN1bHRcblx0ICAgIH0pO1xuXHQgIH0sXG5cdFxuXHQgIF90cmlnZ2VyRXZlbnRfbmF0aXZlUHJvbXB0UGVybWlzc2lvbkNoYW5nZWQ6IGZ1bmN0aW9uIF90cmlnZ2VyRXZlbnRfbmF0aXZlUHJvbXB0UGVybWlzc2lvbkNoYW5nZWQoZnJvbSwgdG8pIHtcblx0ICAgIGlmICh0byA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHRvID0gT25lU2lnbmFsLl9nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc2FmYXJpX3dlYl9pZCk7XG5cdCAgICB9XG5cdCAgICBpZiAoZnJvbSAhPT0gdG8pIHtcblx0ICAgICAgdmFyIHJlY2VudFBlcm1pc3Npb25zID0gX2xpbWl0U3RvcmUyLmRlZmF1bHQucHV0KCdub3RpZmljYXRpb24ucGVybWlzc2lvbicsIHRvKTtcblx0ICAgICAgKDAsIF9ldmVudHMudHJpZ2dlckV2ZW50KSgnb25lc2lnbmFsLnByb21wdC5uYXRpdmUucGVybWlzc2lvbmNoYW5nZWQnLCB7XG5cdCAgICAgICAgZnJvbTogZnJvbSxcblx0ICAgICAgICB0bzogdG9cblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgX3RyaWdnZXJFdmVudF9zdWJzY3JpcHRpb25DaGFuZ2VkOiBmdW5jdGlvbiBfdHJpZ2dlckV2ZW50X3N1YnNjcmlwdGlvbkNoYW5nZWQodG8pIHtcblx0ICAgICgwLCBfZXZlbnRzLnRyaWdnZXJFdmVudCkoJ29uZXNpZ25hbC5zdWJzY3JpcHRpb24uY2hhbmdlZCcsIHRvKTtcblx0ICB9LFxuXHRcblx0ICBfdHJpZ2dlckV2ZW50X2RiVmFsdWVSZXRyaWV2ZWQ6IGZ1bmN0aW9uIF90cmlnZ2VyRXZlbnRfZGJWYWx1ZVJldHJpZXZlZCh2YWx1ZSkge1xuXHQgICAgKDAsIF9ldmVudHMudHJpZ2dlckV2ZW50KSgnb25lc2lnbmFsLmRiLnZhbHVlcmV0cmlldmVkJywgdmFsdWUpO1xuXHQgIH0sXG5cdFxuXHQgIF90cmlnZ2VyRXZlbnRfZGJWYWx1ZVNldDogZnVuY3Rpb24gX3RyaWdnZXJFdmVudF9kYlZhbHVlU2V0KHZhbHVlKSB7XG5cdCAgICAoMCwgX2V2ZW50cy50cmlnZ2VyRXZlbnQpKCdvbmVzaWduYWwuZGIudmFsdWVzZXQnLCB2YWx1ZSk7XG5cdCAgfSxcblx0XG5cdCAgX3RyaWdnZXJFdmVudF9pbnRlcm5hbFN1YnNjcmlwdGlvblNldDogZnVuY3Rpb24gX3RyaWdnZXJFdmVudF9pbnRlcm5hbFN1YnNjcmlwdGlvblNldCh2YWx1ZSkge1xuXHQgICAgKDAsIF9ldmVudHMudHJpZ2dlckV2ZW50KSgnb25lc2lnbmFsLmludGVybmFsLnN1YnNjcmlwdGlvbnNldCcsIHZhbHVlKTtcblx0ICB9LFxuXHRcblx0ICBfc3Vic2NyaWJlRm9yUHVzaDogZnVuY3Rpb24gX3N1YnNjcmliZUZvclB1c2goc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikge1xuXHQgICAgdmFyIG5vdGlmaWNhdGlvblBlcm1pc3Npb25CZWZvcmVSZXF1ZXN0ID0gT25lU2lnbmFsLl9nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc2FmYXJpX3dlYl9pZCk7XG5cdCAgICBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLnN1YnNjcmliZSh7IHVzZXJWaXNpYmxlT25seTogdHJ1ZSB9KS50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIk9ORV9TSUdOQUxfTk9USUZJQ0FUSU9OX1BFUk1JU1NJT05cIiwgTm90aWZpY2F0aW9uLnBlcm1pc3Npb24pO1xuXHRcblx0ICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAnYXBwSWQnKS50aGVuKGZ1bmN0aW9uIF9zdWJzY3JpYmVGb3JQdXNoX0dvdEFwcElkKGFwcElkUmVzdWx0KSB7XG5cdCAgICAgICAgdmFyIGFwcElkID0gYXBwSWRSZXN1bHQuaWQ7XG5cdCAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKFwiQ2FsbGVkIE9uZVNpZ25hbC5fc3Vic2NyaWJlRm9yUHVzaCgpIC0+IHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuc3Vic2NyaWJlKCkuXCIpO1xuXHRcblx0ICAgICAgICB2YXIgcmVnaXN0cmF0aW9uSWQgPSBudWxsO1xuXHQgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcblx0ICAgICAgICAgIGlmICh0eXBlb2Ygc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbklkICE9IFwidW5kZWZpbmVkXCIpIC8vIENocm9tZSA0MyAmIDQyXG5cdCAgICAgICAgICAgIHJlZ2lzdHJhdGlvbklkID0gc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbklkO2Vsc2UgLy8gQ2hyb21lIDQ0KyBhbmQgRmlyZUZveFxuXHQgICAgICAgICAgICByZWdpc3RyYXRpb25JZCA9IHN1YnNjcmlwdGlvbi5lbmRwb2ludC5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeKGh0dHBzOi8vYW5kcm9pZC5nb29nbGVhcGlzLmNvbS9nY20vc2VuZC98aHR0cHM6Ly91cGRhdGVzLnB1c2guc2VydmljZXMubW96aWxsYS5jb20vcHVzaC8pXCIpLCBcIlwiKTtcblx0ICAgICAgICB9IGVsc2UgX2xvZ2xldmVsMi5kZWZhdWx0Lndhcm4oJ0NvdWxkIG5vdCBzdWJzY3JpYmUgeW91ciBicm93c2VyIGZvciBwdXNoIG5vdGlmaWNhdGlvbnMuJyk7XG5cdFxuXHQgICAgICAgIE9uZVNpZ25hbC5fcmVnaXN0ZXJXaXRoT25lU2lnbmFsKGFwcElkLCByZWdpc3RyYXRpb25JZCwgKDAsIF91dGlscy5pc1N1cHBvcnRlZEZpcmVGb3gpKCkgPyA4IDogNSk7XG5cdFxuXHQgICAgICAgIGlmICghT25lU2lnbmFsLl91c2luZ05hdGl2ZVBlcm1pc3Npb25Ib29rKSB7XG5cdCAgICAgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9uYXRpdmVQcm9tcHRQZXJtaXNzaW9uQ2hhbmdlZChub3RpZmljYXRpb25QZXJtaXNzaW9uQmVmb3JlUmVxdWVzdCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoJ0Vycm9yIHdoaWxlIHN1YnNjcmliaW5nIGZvciBwdXNoOicsIGUpO1xuXHRcblx0ICAgICAgaWYgKCFPbmVTaWduYWwuX3VzaW5nTmF0aXZlUGVybWlzc2lvbkhvb2spIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X25hdGl2ZVByb21wdFBlcm1pc3Npb25DaGFuZ2VkKG5vdGlmaWNhdGlvblBlcm1pc3Npb25CZWZvcmVSZXF1ZXN0KTtcblx0XG5cdCAgICAgIGlmIChlLmNvZGUgPT0gMjAgJiYgb3BlbmVyICYmIE9uZVNpZ25hbC5faHR0cFJlZ2lzdHJhdGlvbikgd2luZG93LmNsb3NlKCk7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBzZW5kVGFnOiBmdW5jdGlvbiBzZW5kVGFnKGtleSwgdmFsdWUpIHtcblx0ICAgIHZhciBqc29uS2V5VmFsdWUgPSB7fTtcblx0ICAgIGpzb25LZXlWYWx1ZVtrZXldID0gdmFsdWU7XG5cdCAgICBPbmVTaWduYWwuc2VuZFRhZ3MoanNvbktleVZhbHVlKTtcblx0ICB9LFxuXHRcblx0ICBzZW5kVGFnczogZnVuY3Rpb24gc2VuZFRhZ3MoanNvblBhaXIpIHtcblx0ICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpLnRoZW4oZnVuY3Rpb24gc2VuZFRhZ3NfR290VXNlcklkKHVzZXJJZFJlc3VsdCkge1xuXHQgICAgICBpZiAodXNlcklkUmVzdWx0KSBPbmVTaWduYWwuX3NlbmRUb09uZVNpZ25hbEFwaShcInBsYXllcnMvXCIgKyB1c2VySWRSZXN1bHQuaWQsIFwiUFVUXCIsIHtcblx0ICAgICAgICBhcHBfaWQ6IE9uZVNpZ25hbC5fYXBwX2lkLFxuXHQgICAgICAgIHRhZ3M6IGpzb25QYWlyXG5cdCAgICAgIH0pO2Vsc2Uge1xuXHQgICAgICAgIGlmIChPbmVTaWduYWwuX3RhZ3NUb1NlbmRPblJlZ2lzdGVyID09IG51bGwpIE9uZVNpZ25hbC5fdGFnc1RvU2VuZE9uUmVnaXN0ZXIgPSBqc29uUGFpcjtlbHNlIHtcblx0ICAgICAgICAgIHZhciByZXN1bHRPYmogPSB7fTtcblx0ICAgICAgICAgIGZvciAodmFyIF9vYmogaW4gT25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3Rlcikge1xuXHQgICAgICAgICAgICByZXN1bHRPYmpbX29ial0gPSBPbmVTaWduYWwuX3RhZ3NUb1NlbmRPblJlZ2lzdGVyW19vYmpdO1xuXHQgICAgICAgICAgfWZvciAodmFyIF9vYmogaW4ganNvblBhaXIpIHtcblx0ICAgICAgICAgICAgcmVzdWx0T2JqW19vYmpdID0ganNvblBhaXJbX29ial07XG5cdCAgICAgICAgICB9T25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3RlciA9IHJlc3VsdE9iajtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcignc2VuZFRhZ3M6JywgZSk7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBkZWxldGVUYWc6IGZ1bmN0aW9uIGRlbGV0ZVRhZyhrZXkpIHtcblx0ICAgIE9uZVNpZ25hbC5kZWxldGVUYWdzKFtrZXldKTtcblx0ICB9LFxuXHRcblx0ICBkZWxldGVUYWdzOiBmdW5jdGlvbiBkZWxldGVUYWdzKGtleUFycmF5KSB7XG5cdCAgICB2YXIganNvblBhaXIgPSB7fTtcblx0ICAgIHZhciBsZW5ndGggPSBrZXlBcnJheS5sZW5ndGg7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGpzb25QYWlyW2tleUFycmF5W2ldXSA9IFwiXCI7XG5cdCAgICB9T25lU2lnbmFsLnNlbmRUYWdzKGpzb25QYWlyKTtcblx0ICB9LFxuXHRcblx0ICBfaGFuZGxlTm90aWZpY2F0aW9uT3BlbmVkOiBmdW5jdGlvbiBfaGFuZGxlTm90aWZpY2F0aW9uT3BlbmVkKGV2ZW50KSB7XG5cdCAgICB2YXIgbm90aWZpY2F0aW9uRGF0YSA9IEpTT04ucGFyc2UoZXZlbnQubm90aWZpY2F0aW9uLnRhZyk7XG5cdCAgICBldmVudC5ub3RpZmljYXRpb24uY2xvc2UoKTtcblx0XG5cdCAgICBQcm9taXNlLmFsbChbT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAnYXBwSWQnKSwgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJyldKS50aGVuKGZ1bmN0aW9uIF9oYW5kbGVOb3RpZmljYXRpb25PcGVuZWRfR290QXBwVXNlcklkcyhyZXN1bHRzKSB7XG5cdCAgICAgIHZhciBhcHBJZFJlc3VsdCA9IHJlc3VsdHNbMF07XG5cdCAgICAgIHZhciB1c2VySWRSZXN1bHQgPSByZXN1bHRzWzFdO1xuXHQgICAgICBpZiAoYXBwSWRSZXN1bHQgJiYgdXNlcklkUmVzdWx0KSB7XG5cdCAgICAgICAgT25lU2lnbmFsLl9zZW5kVG9PbmVTaWduYWxBcGkoXCJub3RpZmljYXRpb25zL1wiICsgbm90aWZpY2F0aW9uRGF0YS5pZCwgXCJQVVRcIiwge1xuXHQgICAgICAgICAgYXBwX2lkOiBhcHBJZFJlc3VsdC5pZCxcblx0ICAgICAgICAgIHBsYXllcl9pZDogdXNlcklkUmVzdWx0LmlkLFxuXHQgICAgICAgICAgb3BlbmVkOiB0cnVlXG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgIH0pO1xuXHQgICAgO1xuXHRcblx0ICAgIGV2ZW50LndhaXRVbnRpbChjbGllbnRzLm1hdGNoQWxsKHsgdHlwZTogXCJ3aW5kb3dcIiB9KS50aGVuKGZ1bmN0aW9uIChjbGllbnRMaXN0KSB7XG5cdCAgICAgIHZhciBsYXVuY2hVUkwgPSByZWdpc3RyYXRpb24uc2NvcGU7XG5cdCAgICAgIGlmIChPbmVTaWduYWwuX2RlZmF1bHRMYXVuY2hVUkwpIGxhdW5jaFVSTCA9IE9uZVNpZ25hbC5fZGVmYXVsdExhdW5jaFVSTDtcblx0ICAgICAgaWYgKG5vdGlmaWNhdGlvbkRhdGEubGF1bmNoVVJMKSBsYXVuY2hVUkwgPSBub3RpZmljYXRpb25EYXRhLmxhdW5jaFVSTDtcblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xpZW50TGlzdC5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBjbGllbnQgPSBjbGllbnRMaXN0W2ldO1xuXHQgICAgICAgIGlmICgnZm9jdXMnIGluIGNsaWVudCAmJiBjbGllbnQudXJsID09IGxhdW5jaFVSTCkge1xuXHQgICAgICAgICAgY2xpZW50LmZvY3VzKCk7XG5cdFxuXHQgICAgICAgICAgLy8gdGFyZ2V0T3JpZ2luIG5vdCB2YWxpZCBoZXJlIGFzIHRoZSBzZXJ2aWNlIHdvcmtlciBvd25zIHRoZSBwYWdlLlxuXHQgICAgICAgICAgY2xpZW50LnBvc3RNZXNzYWdlKG5vdGlmaWNhdGlvbkRhdGEpO1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgaWYgKGxhdW5jaFVSTCAhPT0gJ2phdmFzY3JpcHQ6dm9pZCgwKTsnICYmIGxhdW5jaFVSTCAhPT0gJ2RvX25vdF9vcGVuJykge1xuXHQgICAgICAgIE9uZVNpZ25hbC5fcHV0RGJWYWx1ZShcIk5vdGlmaWNhdGlvbk9wZW5lZFwiLCB7IHVybDogbGF1bmNoVVJMLCBkYXRhOiBub3RpZmljYXRpb25EYXRhIH0pO1xuXHQgICAgICAgIGNsaWVudHMub3BlbldpbmRvdyhsYXVuY2hVUkwpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgICAgICAgLy8gU2hvdWxkIG9ubHkgZmFsbCBpbnRvIGhlcmUgaWYgZ29pbmcgdG8gYW4gZXh0ZXJuYWwgVVJMIG9uIENocm9tZSBvbGRlciB0aGFuIDQzLlxuXHQgICAgICAgICAgY2xpZW50cy5vcGVuV2luZG93KHJlZ2lzdHJhdGlvbi5zY29wZSArIFwicmVkaXJlY3Rvci5odG1sP3VybD1cIiArIGxhdW5jaFVSTCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgIH0pKTtcblx0ICB9LFxuXHRcblx0ICBfZ2V0VGl0bGU6IGZ1bmN0aW9uIF9nZXRUaXRsZShpbmNvbWluZ1RpdGxlLCBjYWxsYmFjaykge1xuXHQgICAgaWYgKGluY29taW5nVGl0bGUgIT0gbnVsbCkge1xuXHQgICAgICBjYWxsYmFjayhpbmNvbWluZ1RpdGxlKTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIFByb21pc2UuYWxsKFtPbmVTaWduYWwuX2dldERiVmFsdWUoJ09wdGlvbnMnLCAnZGVmYXVsdFRpdGxlJyksIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnT3B0aW9ucycsICdwYWdlVGl0bGUnKV0pLnRoZW4oZnVuY3Rpb24gX2dldFRpdGxlX0dvdERlZmF1bHRQYWdlVGl0bGVzKHJlc3VsdHMpIHtcblx0ICAgICAgdmFyIGRlZmF1bHRUaXRsZVJlc3VsdCA9IHJlc3VsdHNbMF07XG5cdCAgICAgIHZhciBwYWdlVGl0bGVSZXN1bHQgPSByZXN1bHRzWzFdO1xuXHRcblx0ICAgICAgaWYgKGRlZmF1bHRUaXRsZVJlc3VsdCkge1xuXHQgICAgICAgIGNhbGxiYWNrKGRlZmF1bHRUaXRsZVJlc3VsdC52YWx1ZSk7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9IGVsc2UgaWYgKHBhZ2VUaXRsZVJlc3VsdCAmJiBwYWdlVGl0bGVSZXN1bHQudmFsdWUgIT0gbnVsbCkge1xuXHQgICAgICAgIGNhbGxiYWNrKHBhZ2VUaXRsZVJlc3VsdC52YWx1ZSk7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNhbGxiYWNrKCcnKTtcblx0ICAgICAgfVxuXHQgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0XG5cdCAgLy8gRGlzcGxheXMgbm90aWZpY2F0aW9uIGZyb20gY29udGVudCByZWNlaXZlZCBmcm9tIE9uZVNpZ25hbC5cblx0ICAvLyBUaGlzIG1ldGhvZCBpcyBvbmx5IGNhbGxlZCBieSBTZXJ2aWNlV29ya2VyXG5cdCAgX2hhbmRsZUdDTU1lc3NhZ2U6IGZ1bmN0aW9uIF9oYW5kbGVHQ01NZXNzYWdlKHNlcnZpY2VXb3JrZXIsIGV2ZW50KSB7XG5cdCAgICAvLyBUT0RPOiBSZWFkIGRhdGEgZnJvbSB0aGUgR0NNIHBheWxvYWQgd2hlbiBDaHJvbWUgbm8gbG9uZ2VyIHJlcXVpcmVzIHRoZSBiZWxvdyBjb21tYW5kIGxpbmUgcGFyYW1ldGVyLlxuXHQgICAgLy8gLS1lbmFibGUtcHVzaC1tZXNzYWdlLXBheWxvYWRcblx0ICAgIC8vIFRoZSBjb21tYW5kIGxpbmUgcGFyYW0gaXMgcmVxdWlyZWQgZXZlbiBvbiBDaHJvbWUgNDMgbmlnaHRseSBidWlsZCAyMDE1LzAzLzE3LlxuXHQgICAgaWYgKGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YS50ZXh0KClbMF0gPT0gXCJ7XCIpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKCdSZWNlaXZlZCBkYXRhLnRleHQ6ICcsIGV2ZW50LmRhdGEudGV4dCgpKTtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKCdSZWNlaXZlZCBkYXRhLmpzb246ICcsIGV2ZW50LmRhdGEuanNvbigpKTtcblx0ICAgIH1cblx0XG5cdCAgICBldmVudC53YWl0VW50aWwobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICBPbmVTaWduYWwuX2dldFRpdGxlKG51bGwsIGZ1bmN0aW9uICh0aXRsZSkge1xuXHQgICAgICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnT3B0aW9ucycsICdkZWZhdWx0SWNvbicpLnRoZW4oZnVuY3Rpb24gX2hhbmRsZUdDTU1lc3NhZ2VfR290RGVmYXVsdEljb24oZGVmYXVsdEljb25SZXN1bHQpIHtcblx0ICAgICAgICAgIE9uZVNpZ25hbC5fZ2V0TGFzdE5vdGlmaWNhdGlvbnMoZnVuY3Rpb24gKHJlc3BvbnNlLCBhcHBJZCkge1xuXHQgICAgICAgICAgICB2YXIgbm90aWZpY2F0aW9uRGF0YSA9IHtcblx0ICAgICAgICAgICAgICBpZDogcmVzcG9uc2UuY3VzdG9tLmksXG5cdCAgICAgICAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UuYWxlcnQsXG5cdCAgICAgICAgICAgICAgYWRkaXRpb25hbERhdGE6IHJlc3BvbnNlLmN1c3RvbS5hXG5cdCAgICAgICAgICAgIH07XG5cdFxuXHQgICAgICAgICAgICBpZiAocmVzcG9uc2UudGl0bGUpIG5vdGlmaWNhdGlvbkRhdGEudGl0bGUgPSByZXNwb25zZS50aXRsZTtlbHNlIG5vdGlmaWNhdGlvbkRhdGEudGl0bGUgPSB0aXRsZTtcblx0XG5cdCAgICAgICAgICAgIGlmIChyZXNwb25zZS5jdXN0b20udSkgbm90aWZpY2F0aW9uRGF0YS5sYXVuY2hVUkwgPSByZXNwb25zZS5jdXN0b20udTtcblx0XG5cdCAgICAgICAgICAgIGlmIChyZXNwb25zZS5pY29uKSBub3RpZmljYXRpb25EYXRhLmljb24gPSByZXNwb25zZS5pY29uO2Vsc2UgaWYgKGRlZmF1bHRJY29uUmVzdWx0KSBub3RpZmljYXRpb25EYXRhLmljb24gPSBkZWZhdWx0SWNvblJlc3VsdC52YWx1ZTtcblx0XG5cdCAgICAgICAgICAgIC8vIE5ldmVyIG5lc3QgdGhlIGZvbGxvd2luZyBsaW5lIGluIGEgY2FsbGJhY2sgZnJvbSB0aGUgcG9pbnQgb2YgZW50ZXJpbmcgZnJvbSBfZ2V0TGFzdE5vdGlmaWNhdGlvbnNcblx0ICAgICAgICAgICAgc2VydmljZVdvcmtlci5yZWdpc3RyYXRpb24uc2hvd05vdGlmaWNhdGlvbihub3RpZmljYXRpb25EYXRhLnRpdGxlLCB7XG5cdCAgICAgICAgICAgICAgYm9keTogcmVzcG9uc2UuYWxlcnQsXG5cdCAgICAgICAgICAgICAgaWNvbjogbm90aWZpY2F0aW9uRGF0YS5pY29uLFxuXHQgICAgICAgICAgICAgIHRhZzogSlNPTi5zdHJpbmdpZnkobm90aWZpY2F0aW9uRGF0YSlcblx0ICAgICAgICAgICAgfSkudGhlbihyZXNvbHZlKS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ09wdGlvbnMnLCAnZGVmYXVsdFVybCcpLnRoZW4oZnVuY3Rpb24gKGRlZmF1bHRVcmxSZXN1bHQpIHtcblx0ICAgICAgICAgICAgICBpZiAoZGVmYXVsdFVybFJlc3VsdCkgT25lU2lnbmFsLl9kZWZhdWx0TGF1bmNoVVJMID0gZGVmYXVsdFVybFJlc3VsdC52YWx1ZTtcblx0ICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICA7XG5cdCAgICAgICAgICB9LCByZXNvbHZlKTtcblx0ICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9KTtcblx0ICAgIH0pKTtcblx0ICB9LFxuXHRcblx0ICBfZ2V0TGFzdE5vdGlmaWNhdGlvbnM6IGZ1bmN0aW9uIF9nZXRMYXN0Tm90aWZpY2F0aW9ucyhpdGVtQ2FsbGJhY2ssIGNvbXBsZXRlQ2FsbGJhY2spIHtcblx0ICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpLnRoZW4oZnVuY3Rpb24gX2dldExhc3ROb3RpZmljYXRpb25zX0dvdFVzZXJJZCh1c2VySWRSZXN1bHQpIHtcblx0ICAgICAgaWYgKHVzZXJJZFJlc3VsdCkge1xuXHQgICAgICAgIE9uZVNpZ25hbC5fc2VuZFRvT25lU2lnbmFsQXBpKFwicGxheWVycy9cIiArIHVzZXJJZFJlc3VsdC5pZCArIFwiL2Nocm9tZXdlYl9ub3RpZmljYXRpb25cIiwgXCJHRVRcIiwgbnVsbCwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGl0ZW1DYWxsYmFjayhKU09OLnBhcnNlKHJlc3BvbnNlW2ldKSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgY29tcGxldGVDYWxsYmFjaygpO1xuXHQgICAgICAgIH0pOyAvLyBGYWlsZWQgY2FsbGJhY2tcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIkVycm9yOiBjb3VsZCBub3QgZ2V0IG5vdGlmaWNhdGlvbklkXCIpO1xuXHQgICAgICAgICAgY29tcGxldGVDYWxsYmFjaygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgIH0pO1xuXHQgICAgO1xuXHQgIH0sXG5cdFxuXHQgIC8vIEhUVFAgJiBIVFRQUyAtIFJ1bnMgb24gbWFpbiBwYWdlXG5cdCAgX2xpc3RlbmVyX3JlY2VpdmVNZXNzYWdlOiBmdW5jdGlvbiByZWNlaXZlTWVzc2FnZShldmVudCkge1xuXHQgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKFwiX2xpc3RlbmVyX3JlY2VpdmVNZXNzYWdlOiBcIiwgZXZlbnQpO1xuXHRcblx0ICAgIGlmIChPbmVTaWduYWwuX2luaXRPcHRpb25zID09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXHRcblx0ICAgIGlmIChmYWxzZSkgcmV0dXJuO1xuXHRcblx0ICAgIGlmIChldmVudC5kYXRhLm9uZVNpZ25hbEluaXRQYWdlUmVhZHkpIHtcblx0ICAgICAgLy8gT25seSBjYWxsZWQgb24gSFRUUCBwYWdlcy5cblx0ICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlcyhcIk9wdGlvbnNcIikudGhlbihmdW5jdGlvbiBfbGlzdGVuZXJfcmVjZWl2ZU1lc3NhZ2Uob3B0aW9ucykge1xuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcImN1cnJlbnQgb3B0aW9uc1wiLCBvcHRpb25zKTtcblx0ICAgICAgICBpZiAoIW9wdGlvbnMuZGVmYXVsdFVybCkgb3B0aW9ucy5kZWZhdWx0VXJsID0gZG9jdW1lbnQuVVJMO1xuXHQgICAgICAgIGlmICghb3B0aW9ucy5kZWZhdWx0VGl0bGUpIG9wdGlvbnMuZGVmYXVsdFRpdGxlID0gZG9jdW1lbnQudGl0bGU7XG5cdFxuXHQgICAgICAgIG9wdGlvbnMucGFyZW50X3VybCA9IGRvY3VtZW50LlVSTDtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZGVidWcoXCJQb3N0aW5nIG1lc3NhZ2UgdG8gcG9ydFswXVwiLCBldmVudC5wb3J0c1swXSk7XG5cdCAgICAgICAgZXZlbnQucG9ydHNbMF0ucG9zdE1lc3NhZ2UoeyBpbml0T3B0aW9uczogb3B0aW9ucyB9KTtcblx0ICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoJ19saXN0ZW5lcl9yZWNlaXZlTWVzc2FnZTonLCBlKTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICB2YXIgZXZlbnREYXRhID0gZXZlbnQuZGF0YS5vbmVTaWduYWxJbml0UGFnZVJlYWR5O1xuXHRcblx0ICAgICAgaWYgKGV2ZW50RGF0YS5pc0lmcmFtZSkgT25lU2lnbmFsLl9pZnJhbWVQb3J0ID0gZXZlbnQucG9ydHNbMF07XG5cdFxuXHQgICAgICBpZiAoZXZlbnREYXRhLnVzZXJJZCkgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiSWRzXCIsIHsgdHlwZTogXCJ1c2VySWRcIiwgaWQ6IGV2ZW50RGF0YS51c2VySWQgfSk7XG5cdCAgICAgIGlmIChldmVudERhdGEucmVnaXN0cmF0aW9uSWQpIE9uZVNpZ25hbC5fcHV0RGJWYWx1ZShcIklkc1wiLCB7IHR5cGU6IFwicmVnaXN0cmF0aW9uSWRcIiwgaWQ6IGV2ZW50RGF0YS5yZWdpc3RyYXRpb25JZCB9KTtcblx0XG5cdCAgICAgIE9uZVNpZ25hbC5fZmlyZU5vdGlmaWNhdGlvbkVuYWJsZWRDYWxsYmFjayhldmVudERhdGEuaXNQdXNoRW5hYmxlZCk7XG5cdCAgICAgIE9uZVNpZ25hbC5fc2VuZFVuc2VudFRhZ3MoKTtcblx0ICAgIH0gZWxzZSBpZiAoZXZlbnQuZGF0YS5jdXJyZW50Tm90aWZpY2F0aW9uUGVybWlzc2lvbikgLy8gU3ViZG9tYWluIE9ubHlcblx0ICAgICAgT25lU2lnbmFsLl9maXJlTm90aWZpY2F0aW9uRW5hYmxlZENhbGxiYWNrKGV2ZW50LmRhdGEuY3VycmVudE5vdGlmaWNhdGlvblBlcm1pc3Npb24uaXNQdXNoRW5hYmxlZCk7ZWxzZSBpZiAoZXZlbnQuZGF0YS5pZHNBdmFpbGFibGUpIHtcblx0ICAgICAgLy8gT25seSBjYWxsZWQgb24gSFRUUCBwYWdlcy5cblx0ICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIk9ORV9TSUdOQUxfU0VTU0lPTlwiLCB0cnVlKTtcblx0ICAgICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiSWRzXCIsIHsgdHlwZTogXCJ1c2VySWRcIiwgaWQ6IGV2ZW50LmRhdGEuaWRzQXZhaWxhYmxlLnVzZXJJZCB9KTtcblx0ICAgICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiSWRzXCIsIHsgdHlwZTogXCJyZWdpc3RyYXRpb25JZFwiLCBpZDogZXZlbnQuZGF0YS5pZHNBdmFpbGFibGUucmVnaXN0cmF0aW9uSWQgfSk7XG5cdFxuXHQgICAgICBpZiAoT25lU2lnbmFsLl9pZHNBdmFpbGFibGVfY2FsbGJhY2subGVuZ3RoID4gMCkge1xuXHQgICAgICAgIHdoaWxlIChPbmVTaWduYWwuX2lkc0F2YWlsYWJsZV9jYWxsYmFjay5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICB2YXIgY3Vycl9jYWxsYmFjayA9IE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLnBvcCgpO1xuXHQgICAgICAgICAgY3Vycl9jYWxsYmFjayh7XG5cdCAgICAgICAgICAgIHVzZXJJZDogZXZlbnQuZGF0YS5pZHNBdmFpbGFibGUudXNlcklkLFxuXHQgICAgICAgICAgICByZWdpc3RyYXRpb25JZDogZXZlbnQuZGF0YS5pZHNBdmFpbGFibGUucmVnaXN0cmF0aW9uSWRcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICBPbmVTaWduYWwuX3NlbmRVbnNlbnRUYWdzKCk7XG5cdCAgICB9IGVsc2UgaWYgKGV2ZW50LmRhdGEuaHR0cHNQcm9tcHRBY2NlcHRlZCkge1xuXHQgICAgICAvLyBIVFRQUyBPbmx5XG5cdCAgICAgIE9uZVNpZ25hbC5yZWdpc3RlckZvclB1c2hOb3RpZmljYXRpb25zKCk7XG5cdCAgICAgIE9uZVNpZ25hbC5zZXRTdWJzY3JpcHRpb24odHJ1ZSk7XG5cdCAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09uZVNpZ25hbC1pZnJhbWUtbW9kYWwnKTtcblx0ICAgICAgZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW0pO1xuXHQgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9jdXN0b21Qcm9tcHRDbGlja2VkKCdncmFudGVkJyk7XG5cdCAgICB9IGVsc2UgaWYgKGV2ZW50LmRhdGEuaHR0cHNQcm9tcHRDYW5jZWxlZCkge1xuXHQgICAgICAvLyBIVFRQUyBPbmx5XG5cdCAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09uZVNpZ25hbC1pZnJhbWUtbW9kYWwnKTtcblx0ICAgICAgZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW0pO1xuXHQgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9jdXN0b21Qcm9tcHRDbGlja2VkKCdkZW5pZWQnKTtcblx0ICAgIH0gZWxzZSBpZiAoZXZlbnQuZGF0YS5odHRwUHJvbXB0QWNjZXB0ZWQpIHtcblx0ICAgICAgLy8gSFRUUCBPbmx5XG5cdCAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X2N1c3RvbVByb21wdENsaWNrZWQoJ2dyYW50ZWQnKTtcblx0ICAgIH0gZWxzZSBpZiAoZXZlbnQuZGF0YS5odHRwUHJvbXB0Q2FuY2VsZWQpIHtcblx0ICAgICAgLy8gSFRUUCBPbmx5XG5cdCAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X2N1c3RvbVByb21wdENsaWNrZWQoJ2RlbmllZCcpO1xuXHQgICAgfSBlbHNlIGlmIChPbmVTaWduYWwuX25vdGlmaWNhdGlvbk9wZW5lZF9jYWxsYmFjaykgLy8gSFRUUCBhbmQgSFRUUFNcblx0ICAgICAgT25lU2lnbmFsLl9ub3RpZmljYXRpb25PcGVuZWRfY2FsbGJhY2soZXZlbnQuZGF0YSk7XG5cdCAgfSxcblx0XG5cdCAgYWRkTGlzdGVuZXJGb3JOb3RpZmljYXRpb25PcGVuZWQ6IGZ1bmN0aW9uIGFkZExpc3RlbmVyRm9yTm90aWZpY2F0aW9uT3BlbmVkKGNhbGxiYWNrKSB7XG5cdCAgICBPbmVTaWduYWwuX25vdGlmaWNhdGlvbk9wZW5lZF9jYWxsYmFjayA9IGNhbGxiYWNrO1xuXHQgICAgaWYgKHdpbmRvdykge1xuXHQgICAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoXCJOb3RpZmljYXRpb25PcGVuZWRcIiwgZG9jdW1lbnQuVVJMKS50aGVuKGZ1bmN0aW9uIChub3RpZmljYXRpb25PcGVuZWRSZXN1bHQpIHtcblx0ICAgICAgICBpZiAobm90aWZpY2F0aW9uT3BlbmVkUmVzdWx0KSB7XG5cdCAgICAgICAgICBPbmVTaWduYWwuX2RlbGV0ZURiVmFsdWUoXCJOb3RpZmljYXRpb25PcGVuZWRcIiwgZG9jdW1lbnQuVVJMKTtcblx0ICAgICAgICAgIE9uZVNpZ25hbC5fbm90aWZpY2F0aW9uT3BlbmVkX2NhbGxiYWNrKG5vdGlmaWNhdGlvbk9wZW5lZFJlc3VsdC5kYXRhKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICB9KTtcblx0ICAgICAgO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIC8vIFN1YmRvbWFpbiAtIEZpcmVkIGZyb20gbWVzc2FnZSByZWNlaXZlZCBmcm9tIGlmcmFtZS5cblx0ICBfZmlyZU5vdGlmaWNhdGlvbkVuYWJsZWRDYWxsYmFjazogZnVuY3Rpb24gX2ZpcmVOb3RpZmljYXRpb25FbmFibGVkQ2FsbGJhY2sobm90aWZQZXJtc3Npb24pIHtcblx0ICAgIGlmIChPbmVTaWduYWwuX2lzTm90aWZpY2F0aW9uRW5hYmxlZENhbGxiYWNrKSB7XG5cdCAgICAgIE9uZVNpZ25hbC5faXNOb3RpZmljYXRpb25FbmFibGVkQ2FsbGJhY2sobm90aWZQZXJtc3Npb24pO1xuXHQgICAgICBPbmVTaWduYWwuX2lzTm90aWZpY2F0aW9uRW5hYmxlZENhbGxiYWNrID0gbnVsbDtcblx0ICAgIH1cblx0ICB9LFxuXHRcblx0ICBnZXRJZHNBdmFpbGFibGU6IGZ1bmN0aW9uIGdldElkc0F2YWlsYWJsZShjYWxsYmFjaykge1xuXHQgICAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHJldHVybjtcblx0XG5cdCAgICBPbmVTaWduYWwuX2lkc0F2YWlsYWJsZV9jYWxsYmFjay5wdXNoKGNhbGxiYWNrKTtcblx0XG5cdCAgICBQcm9taXNlLmFsbChbT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJyksIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3JlZ2lzdHJhdGlvbklkJyldKS50aGVuKGZ1bmN0aW9uIGdldElkc0F2YWlsYWJsZV9Hb3RVc2VyUmVnaXN0cmF0aW9uSWRzKHJlc3VsdHMpIHtcblx0ICAgICAgdmFyIHVzZXJJZFJlc3VsdCA9IHJlc3VsdHNbMF07XG5cdCAgICAgIHZhciByZWdpc3RyYXRpb25JZFJlc3VsdCA9IHJlc3VsdHNbMV07XG5cdFxuXHQgICAgICBpZiAodXNlcklkUmVzdWx0KSB7XG5cdCAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbklkUmVzdWx0KSB7XG5cdCAgICAgICAgICB3aGlsZSAoT25lU2lnbmFsLl9pZHNBdmFpbGFibGVfY2FsbGJhY2subGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICB2YXIgY3Vycl9jYWxsYmFjayA9IE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLnBvcCgpO1xuXHQgICAgICAgICAgICBjdXJyX2NhbGxiYWNrKHtcblx0ICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZFJlc3VsdC5pZCxcblx0ICAgICAgICAgICAgICByZWdpc3RyYXRpb25JZDogcmVnaXN0cmF0aW9uSWRSZXN1bHQuaWRcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHdoaWxlIChPbmVTaWduYWwuX2lkc0F2YWlsYWJsZV9jYWxsYmFjay5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICB2YXIgY3Vycl9jYWxsYmFjayA9IE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLnBvcCgpO1xuXHQgICAgICAgICAgY3Vycl9jYWxsYmFjayh7IHVzZXJJZDogdXNlcklkUmVzdWx0LmlkLCByZWdpc3RyYXRpb25JZDogbnVsbCB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgIH0pO1xuXHQgICAgO1xuXHQgIH0sXG5cdFxuXHQgIGdldFRhZ3M6IGZ1bmN0aW9uIGdldFRhZ3MoY2FsbGJhY2spIHtcblx0ICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpLnRoZW4oZnVuY3Rpb24gKHVzZXJJZFJlc3VsdCkge1xuXHQgICAgICBpZiAodXNlcklkUmVzdWx0KSB7XG5cdCAgICAgICAgT25lU2lnbmFsLl9zZW5kVG9PbmVTaWduYWxBcGkoXCJwbGF5ZXJzL1wiICsgdXNlcklkUmVzdWx0LmlkLCAnR0VUJywgbnVsbCwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZS50YWdzKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgfSk7XG5cdCAgICA7XG5cdCAgfSxcblx0XG5cdCAgaXNQdXNoTm90aWZpY2F0aW9uc0VuYWJsZWQ6IGZ1bmN0aW9uIGlzUHVzaE5vdGlmaWNhdGlvbnNFbmFibGVkKGNhbGxiYWNrKSB7XG5cdCAgICBpZiAoISgwLCBfdXRpbHMuaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCkoKSkge1xuXHQgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQud2FybihcIllvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHB1c2ggbm90aWZpY2F0aW9ucy5cIik7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0XG5cdCAgICAvLyBJZiBTdWJkb21haW5cblx0ICAgIGlmIChPbmVTaWduYWwuX2luaXRPcHRpb25zLnN1YmRvbWFpbk5hbWUgJiYgISgwLCBfdXRpbHMuaXNCcm93c2VyU2FmYXJpKSgpKSB7XG5cdCAgICAgIE9uZVNpZ25hbC5faXNOb3RpZmljYXRpb25FbmFibGVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0ICAgICAgaWYgKE9uZVNpZ25hbC5faWZyYW1lUG9ydCkgT25lU2lnbmFsLl9pZnJhbWVQb3J0LnBvc3RNZXNzYWdlKHsgZ2V0Tm90aWZpY2F0aW9uUGVybWlzc2lvbjogdHJ1ZSB9KTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIElmIEhUVFBTXG5cdFxuXHQgICAgUHJvbWlzZS5hbGwoW09uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3JlZ2lzdHJhdGlvbklkJyksIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnT3B0aW9ucycsICdzdWJzY3JpcHRpb24nKV0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcblx0ICAgICAgdmFyIHJlZ2lzdHJhdGlvbklkUmVzdWx0ID0gcmVzdWx0c1swXTtcblx0ICAgICAgdmFyIHN1YnNjcmlwdGlvblJlc3VsdCA9IHJlc3VsdHNbMV07XG5cdFxuXHQgICAgICBpZiAocmVnaXN0cmF0aW9uSWRSZXN1bHQpIHtcblx0ICAgICAgICBpZiAoc3Vic2NyaXB0aW9uUmVzdWx0ICYmICFzdWJzY3JpcHRpb25SZXN1bHQudmFsdWUpIHJldHVybiBjYWxsYmFjayhmYWxzZSk7XG5cdFxuXHQgICAgICAgIGNhbGxiYWNrKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09IFwiZ3JhbnRlZFwiKTtcblx0ICAgICAgfSBlbHNlIGNhbGxiYWNrKGZhbHNlKTtcblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgIH0pO1xuXHQgIH0sXG5cdFxuXHQgIF9nZXROb3RpZmljYXRpb25UeXBlczogZnVuY3Rpb24gX2dldE5vdGlmaWNhdGlvblR5cGVzKGNhbGxiYWNrKSB7XG5cdCAgICBPbmVTaWduYWwuX2dldFN1YnNjcmlwdGlvbihmdW5jdGlvbiAoZGJfc3Vic2NyaXB0aW9uU2V0KSB7XG5cdCAgICAgIGNhbGxiYWNrKGRiX3N1YnNjcmlwdGlvblNldCA/IDEgOiAtMik7XG5cdCAgICB9KTtcblx0ICB9LFxuXHRcblx0ICBzZXRTdWJzY3JpcHRpb246IGZ1bmN0aW9uIHNldFN1YnNjcmlwdGlvbihuZXdTdWJzY3JpcHRpb24pIHtcblx0ICAgIGlmIChPbmVTaWduYWwuX2lmcmFtZVBvcnQpIE9uZVNpZ25hbC5faWZyYW1lUG9ydC5wb3N0TWVzc2FnZSh7IHNldFN1YmRvbWFpblN0YXRlOiB7IHNldFN1YnNjcmlwdGlvbjogbmV3U3Vic2NyaXB0aW9uIH0gfSk7ZWxzZSB7XG5cdCAgICAgIE9uZVNpZ25hbC5fZ2V0U3Vic2NyaXB0aW9uKGZ1bmN0aW9uIChjdXJyZW50U3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgICAgaWYgKGN1cnJlbnRTdWJzY3JpcHRpb24gIT0gbmV3U3Vic2NyaXB0aW9uKSB7XG5cdCAgICAgICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJPcHRpb25zXCIsIHsga2V5OiBcInN1YnNjcmlwdGlvblwiLCB2YWx1ZTogbmV3U3Vic2NyaXB0aW9uIH0pO1xuXHQgICAgICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJykudGhlbihmdW5jdGlvbiAodXNlcklkUmVzdWx0KSB7XG5cdCAgICAgICAgICAgIGlmICh1c2VySWRSZXN1bHQpIE9uZVNpZ25hbC5fc2VuZFRvT25lU2lnbmFsQXBpKFwicGxheWVycy9cIiArIHVzZXJJZFJlc3VsdC5pZCwgXCJQVVRcIiwge1xuXHQgICAgICAgICAgICAgIGFwcF9pZDogT25lU2lnbmFsLl9hcHBfaWQsXG5cdCAgICAgICAgICAgICAgbm90aWZpY2F0aW9uX3R5cGVzOiBuZXdTdWJzY3JpcHRpb24gPyAxIDogLTJcblx0ICAgICAgICAgICAgfSwgZnVuY3Rpb24gc2V0U3Vic2NyaXB0aW9uU2V0Q2FsbGJhY2soKSB7XG5cdCAgICAgICAgICAgICAgT25lU2lnbmFsLl90cmlnZ2VyRXZlbnRfaW50ZXJuYWxTdWJzY3JpcHRpb25TZXQobmV3U3Vic2NyaXB0aW9uKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sXG5cdFxuXHQgIF9nZXRTdWJzY3JpcHRpb246IGZ1bmN0aW9uIF9nZXRTdWJzY3JpcHRpb24oY2FsbGJhY2spIHtcblx0ICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnT3B0aW9ucycsICdzdWJzY3JpcHRpb24nKS50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb25SZXN1bHQpIHtcblx0ICAgICAgY2FsbGJhY2soIShzdWJzY3JpcHRpb25SZXN1bHQgJiYgc3Vic2NyaXB0aW9uUmVzdWx0LnZhbHVlID09IGZhbHNlKSk7XG5cdCAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICB9KTtcblx0ICAgIDtcblx0ICB9LFxuXHRcblx0ICBfc2FmZVBvc3RNZXNzYWdlOiBmdW5jdGlvbiBfc2FmZVBvc3RNZXNzYWdlKGNyZWF0b3IsIGRhdGEsIHRhcmdldE9yaWdpbiwgcmVjZWl2ZXIpIHtcblx0ICAgIHZhciB0T3JpZ2luID0gdGFyZ2V0T3JpZ2luLnRvTG93ZXJDYXNlKCk7XG5cdFxuXHQgICAgLy8gSWYgd2UgYXJlIHRyeWluZyB0byB0YXJnZXQgYSBodHRwIHNpdGUgYWxsb3cgdGhlIGh0dHBzIHZlcnNpb24uICh3LyBvciB3L28gJ3d3d3cuJyB0b28pXG5cdCAgICBpZiAodE9yaWdpbi5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSkge1xuXHQgICAgICB2YXIgcXVlcnlEaWN0ID0ge307XG5cdCAgICAgIGxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkuc3BsaXQoXCImXCIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICBxdWVyeURpY3RbaXRlbS5zcGxpdChcIj1cIilbMF1dID0gaXRlbS5zcGxpdChcIj1cIilbMV07XG5cdCAgICAgIH0pO1xuXHQgICAgICB2YXIgdmFsaWRQcmVVUkxSZWdleCA9IC9eaHR0cChzfCk6XFwvXFwvKHd3d1xcLnwpLztcblx0ICAgICAgdE9yaWdpbiA9IHRPcmlnaW4ucmVwbGFjZSh2YWxpZFByZVVSTFJlZ2V4LCBxdWVyeURpY3RbXCJob3N0UGFnZVByb3RvY29sXCJdKTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAocmVjZWl2ZXIpIGNyZWF0b3IucG9zdE1lc3NhZ2UoZGF0YSwgdE9yaWdpbiwgcmVjZWl2ZXIpO2Vsc2UgY3JlYXRvci5wb3N0TWVzc2FnZShkYXRhLCB0T3JpZ2luKTtcblx0ICB9LFxuXHRcblx0ICBfcHJvY2Vzc19wdXNoZXM6IGZ1bmN0aW9uIF9wcm9jZXNzX3B1c2hlcyhhcnJheSkge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuXHQgICAgICBPbmVTaWduYWwucHVzaChhcnJheVtpXSk7XG5cdCAgICB9XG5cdCAgfSxcblx0XG5cdCAgcHVzaDogZnVuY3Rpb24gcHVzaChpdGVtKSB7XG5cdCAgICBpZiAodHlwZW9mIGl0ZW0gPT0gXCJmdW5jdGlvblwiKSBpdGVtKCk7ZWxzZSB7XG5cdCAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBpdGVtLnNoaWZ0KCk7XG5cdCAgICAgIE9uZVNpZ25hbFtmdW5jdGlvbk5hbWVdLmFwcGx5KG51bGwsIGl0ZW0pO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdC8vIElmIGltcG9ydGVkIG9uIHlvdXIgcGFnZS5cblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBPbmVTaWduYWwuX2xpc3RlbmVyX3JlY2VpdmVNZXNzYWdlLCBmYWxzZSk7ZWxzZSB7XG5cdCAgLy8gaWYgaW1wb3J0ZWQgZnJvbSB0aGUgc2VydmljZSB3b3JrZXIuXG5cdCAgaW1wb3J0U2NyaXB0cygnaHR0cHM6Ly9jZG4ub25lc2lnbmFsLmNvbS9zZGtzL3NlcnZpY2V3b3JrZXItY2FjaGUtcG9seWZpbGwuanMnKTtcblx0XG5cdCAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdwdXNoJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICBPbmVTaWduYWwuX2hhbmRsZUdDTU1lc3NhZ2Uoc2VsZiwgZXZlbnQpOyAvLyBDYW4gaGFuZGxlIG1lc3NhZ2VzIGZyb20gYW55IGJyb3dzZXIgKGV4Y2VwdCBTYWZhcmkpLCByZW5hbWUgbWV0aG9kXG5cdCAgfSk7XG5cdCAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdub3RpZmljYXRpb25jbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgLy8gQWxzbyBvbmx5IGJ5IFNXXG5cdCAgICBPbmVTaWduYWwuX2hhbmRsZU5vdGlmaWNhdGlvbk9wZW5lZChldmVudCk7XG5cdCAgfSk7XG5cdFxuXHQgIHZhciBpc1NXb25TdWJkb21haW4gPSBsb2NhdGlvbi5ocmVmLm1hdGNoKC9odHRwc1xcOlxcL1xcLy4qXFwub25lc2lnbmFsLmNvbVxcL3Nka3NcXC8vKSAhPSBudWxsO1xuXHQgIGlmICh0cnVlKSBpc1NXb25TdWJkb21haW4gPSB0cnVlO1xuXHRcblx0ICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZyhcIk9uZVNpZ25hbCBJbnN0YWxsZWQgc2VydmljZSB3b3JrZXI6IFwiICsgT25lU2lnbmFsLl9WRVJTSU9OKTtcblx0ICAgIGlmIChzZWxmLmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoXCJPbmVTaWduYWxTREtXb3JrZXIuanNcIikgPiAtMSkgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiSWRzXCIsIHsgdHlwZTogXCJXT1JLRVIxX09ORV9TSUdOQUxfU1dfVkVSU0lPTlwiLCBpZDogT25lU2lnbmFsLl9WRVJTSU9OIH0pO2Vsc2UgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiSWRzXCIsIHsgdHlwZTogXCJXT1JLRVIyX09ORV9TSUdOQUxfU1dfVkVSU0lPTlwiLCBpZDogT25lU2lnbmFsLl9WRVJTSU9OIH0pO1xuXHRcblx0ICAgIGlmIChpc1NXb25TdWJkb21haW4pIHtcblx0ICAgICAgZXZlbnQud2FpdFVudGlsKGNhY2hlcy5vcGVuKFwiT25lU2lnbmFsX1wiICsgT25lU2lnbmFsLl9WRVJTSU9OKS50aGVuKGZ1bmN0aW9uIChjYWNoZSkge1xuXHQgICAgICAgIHJldHVybiBjYWNoZS5hZGRBbGwoWycvc2Rrcy9pbml0T25lU2lnbmFsSHR0cElmcmFtZScsICcvc2Rrcy9pbml0T25lU2lnbmFsSHR0cElmcmFtZT9zZXNzaW9uPSonLCAnL3Nka3MvbWFuaWZlc3RfanNvbiddKTtcblx0ICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgIH0pKTtcblx0ICAgIH1cblx0ICB9KTtcblx0XG5cdCAgaWYgKGlzU1dvblN1YmRvbWFpbikge1xuXHQgICAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICBldmVudC5yZXNwb25kV2l0aChjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgICAvLyBDYWNoZSBoaXQgLSByZXR1cm4gcmVzcG9uc2Vcblx0ICAgICAgICBpZiAocmVzcG9uc2UpIHJldHVybiByZXNwb25zZTtcblx0XG5cdCAgICAgICAgcmV0dXJuIGZldGNoKGV2ZW50LnJlcXVlc3QpO1xuXHQgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgICAgfSkpO1xuXHQgICAgfSk7XG5cdCAgfVxuXHR9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IE9uZVNpZ25hbDtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMykpKVxuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cblx0KGZ1bmN0aW9uKCkge1xuXHRcblx0KGZ1bmN0aW9uKCkge1xuXHQgICd1c2Ugc3RyaWN0Jztcblx0XG5cdCAgaWYgKHNlbGYuZmV0Y2gpIHtcblx0ICAgIHJldHVyblxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG5cdCAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG5cdCAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcblx0ICAgIH1cblx0ICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGNoYXJhY3RlciBpbiBoZWFkZXIgZmllbGQgbmFtZScpXG5cdCAgICB9XG5cdCAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuXHQgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcblx0ICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG5cdCAgICB9XG5cdCAgICByZXR1cm4gdmFsdWVcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIEhlYWRlcnMoaGVhZGVycykge1xuXHQgICAgdGhpcy5tYXAgPSB7fVxuXHRcblx0ICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuXHQgICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcblx0ICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcblx0ICAgICAgfSwgdGhpcylcblx0XG5cdCAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcblx0ICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcblx0ICAgICAgfSwgdGhpcylcblx0ICAgIH1cblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cdCAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuXHQgICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcblx0ICAgIHZhciBsaXN0ID0gdGhpcy5tYXBbbmFtZV1cblx0ICAgIGlmICghbGlzdCkge1xuXHQgICAgICBsaXN0ID0gW11cblx0ICAgICAgdGhpcy5tYXBbbmFtZV0gPSBsaXN0XG5cdCAgICB9XG5cdCAgICBsaXN0LnB1c2godmFsdWUpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuXHQgICAgcmV0dXJuIHZhbHVlcyA/IHZhbHVlc1swXSA6IG51bGxcblx0ICB9XG5cdFxuXHQgIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgIHJldHVybiB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSB8fCBbXVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuXHQgICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG5cdCAgfVxuXHRcblx0ICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuXHQgICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBbbm9ybWFsaXplVmFsdWUodmFsdWUpXVxuXHQgIH1cblx0XG5cdCAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG5cdCAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLm1hcCkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcblx0ICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBuYW1lLCB0aGlzKVxuXHQgICAgICB9LCB0aGlzKVxuXHQgICAgfSwgdGhpcylcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcblx0ICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XG5cdCAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcblx0ICAgIH1cblx0ICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG5cdCAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG5cdCAgICAgIH1cblx0ICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuXHQgICAgICB9XG5cdCAgICB9KVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcblx0ICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG5cdCAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcblx0ICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuXHQgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcblx0ICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG5cdCAgICByZXR1cm4gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcblx0ICB9XG5cdFxuXHQgIHZhciBzdXBwb3J0ID0ge1xuXHQgICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIG5ldyBCbG9iKCk7XG5cdCAgICAgICAgcmV0dXJuIHRydWVcblx0ICAgICAgfSBjYXRjaChlKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlXG5cdCAgICAgIH1cblx0ICAgIH0pKCksXG5cdCAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuXHQgICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuXHQgIH1cblx0XG5cdCAgZnVuY3Rpb24gQm9keSgpIHtcblx0ICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXHRcblx0XG5cdCAgICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcblx0ICAgICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG5cdCAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcblx0ICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuXHQgICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuXHQgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcblx0ICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG5cdCAgICAgIH0gZWxzZSBpZiAoIWJvZHkpIHtcblx0ICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG5cdCAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuXHQgICAgICAgIC8vIE9ubHkgc3VwcG9ydCBBcnJheUJ1ZmZlcnMgZm9yIFBPU1QgbWV0aG9kLlxuXHQgICAgICAgIC8vIFJlY2VpdmluZyBBcnJheUJ1ZmZlcnMgaGFwcGVucyB2aWEgQmxvYnMsIGluc3RlYWQuXG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcblx0ICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcblx0ICAgICAgICBpZiAocmVqZWN0ZWQpIHtcblx0ICAgICAgICAgIHJldHVybiByZWplY3RlZFxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG5cdCAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuXHQgICAgICAgIGlmIChyZWplY3RlZCkge1xuXHQgICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcblx0ICAgICAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcblx0ICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcblx0ICAgICAgICByZXR1cm4gcmVqZWN0ZWQgPyByZWplY3RlZCA6IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG5cdCAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gdGhpc1xuXHQgIH1cblx0XG5cdCAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG5cdCAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblx0XG5cdCAgZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuXHQgICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuXHQgICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG5cdCAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXHQgICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblx0ICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSkge1xuXHQgICAgICBpZiAoaW5wdXQuYm9keVVzZWQpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuXHQgICAgICB9XG5cdCAgICAgIHRoaXMudXJsID0gaW5wdXQudXJsXG5cdCAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuXHQgICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuXHQgICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpXG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2Rcblx0ICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZVxuXHQgICAgICBpZiAoIWJvZHkpIHtcblx0ICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG5cdCAgICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRoaXMudXJsID0gaW5wdXRcblx0ICAgIH1cblx0XG5cdCAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuXHQgICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XG5cdCAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcblx0ICAgIH1cblx0ICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKVxuXHQgICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG5cdCAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXHRcblx0ICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuXHQgICAgfVxuXHQgICAgdGhpcy5faW5pdEJvZHkoYm9keSlcblx0ICB9XG5cdFxuXHQgIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcylcblx0ICB9XG5cdFxuXHQgIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG5cdCAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG5cdCAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcblx0ICAgICAgaWYgKGJ5dGVzKSB7XG5cdCAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuXHQgICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuXHQgICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuXHQgICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcblx0ICAgICAgfVxuXHQgICAgfSlcblx0ICAgIHJldHVybiBmb3JtXG5cdCAgfVxuXHRcblx0ICBmdW5jdGlvbiBoZWFkZXJzKHhocikge1xuXHQgICAgdmFyIGhlYWQgPSBuZXcgSGVhZGVycygpXG5cdCAgICB2YXIgcGFpcnMgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkudHJpbSgpLnNwbGl0KCdcXG4nKVxuXHQgICAgcGFpcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcblx0ICAgICAgdmFyIHNwbGl0ID0gaGVhZGVyLnRyaW0oKS5zcGxpdCgnOicpXG5cdCAgICAgIHZhciBrZXkgPSBzcGxpdC5zaGlmdCgpLnRyaW0oKVxuXHQgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc6JykudHJpbSgpXG5cdCAgICAgIGhlYWQuYXBwZW5kKGtleSwgdmFsdWUpXG5cdCAgICB9KVxuXHQgICAgcmV0dXJuIGhlYWRcblx0ICB9XG5cdFxuXHQgIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblx0XG5cdCAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcblx0ICAgIGlmICghb3B0aW9ucykge1xuXHQgICAgICBvcHRpb25zID0ge31cblx0ICAgIH1cblx0XG5cdCAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcblx0ICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuXHQgICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1c1xuXHQgICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuXHQgICAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0XG5cdCAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzID8gb3B0aW9ucy5oZWFkZXJzIDogbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuXHQgICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuXHQgIH1cblx0XG5cdCAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblx0XG5cdCAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG5cdCAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG5cdCAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcblx0ICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcblx0ICAgICAgdXJsOiB0aGlzLnVybFxuXHQgICAgfSlcblx0ICB9XG5cdFxuXHQgIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdCAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuXHQgICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcblx0ICAgIHJldHVybiByZXNwb25zZVxuXHQgIH1cblx0XG5cdCAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cdFxuXHQgIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcblx0ICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcblx0ICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuXHQgIH1cblx0XG5cdCAgc2VsZi5IZWFkZXJzID0gSGVhZGVycztcblx0ICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0O1xuXHQgIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZTtcblx0XG5cdCAgc2VsZi5mZXRjaCA9IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG5cdCAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgIHZhciByZXF1ZXN0XG5cdCAgICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSAmJiAhaW5pdCkge1xuXHQgICAgICAgIHJlcXVlc3QgPSBpbnB1dFxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cdFxuXHQgICAgICBmdW5jdGlvbiByZXNwb25zZVVSTCgpIHtcblx0ICAgICAgICBpZiAoJ3Jlc3BvbnNlVVJMJyBpbiB4aHIpIHtcblx0ICAgICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VVUkxcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8vIEF2b2lkIHNlY3VyaXR5IHdhcm5pbmdzIG9uIGdldFJlc3BvbnNlSGVhZGVyIHdoZW4gbm90IGFsbG93ZWQgYnkgQ09SU1xuXHQgICAgICAgIGlmICgvXlgtUmVxdWVzdC1VUkw6L20udGVzdCh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKSB7XG5cdCAgICAgICAgICByZXR1cm4geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVJlcXVlc3QtVVJMJylcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBzdGF0dXMgPSAoeGhyLnN0YXR1cyA9PT0gMTIyMykgPyAyMDQgOiB4aHIuc3RhdHVzXG5cdCAgICAgICAgaWYgKHN0YXR1cyA8IDEwMCB8fCBzdGF0dXMgPiA1OTkpIHtcblx0ICAgICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG5cdCAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG5cdCAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcblx0ICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuXHQgICAgICAgICAgaGVhZGVyczogaGVhZGVycyh4aHIpLFxuXHQgICAgICAgICAgdXJsOiByZXNwb25zZVVSTCgpXG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuXHQgICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuXHQgICAgICB9XG5cdFxuXHQgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblx0XG5cdCAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcblx0ICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuXHQgICAgICB9XG5cdFxuXHQgICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuXHQgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcblx0ICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcblx0ICAgICAgfSlcblx0XG5cdCAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG5cdCAgICB9KVxuXHQgIH1cblx0ICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXHR9KSgpO1xuXHRcblx0XG5cdC8qKiogRVhQT1JUUyBGUk9NIGV4cG9ydHMtbG9hZGVyICoqKi9cblx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZmV0Y2hcblx0fS5jYWxsKGdsb2JhbCkpO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpXG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5IT1NUX1VSTCA9IGV4cG9ydHMuUFJPRF9IT1NUID0gZXhwb3J0cy5ERVZfSE9TVCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIERFVl9IT1NUID0gZXhwb3J0cy5ERVZfSE9TVCA9ICdodHRwczovLzE5Mi4xNjguMS4yMDY6MzAwMCc7XG5cdHZhciBQUk9EX0hPU1QgPSBleHBvcnRzLlBST0RfSE9TVCA9ICdodHRwczovL29uZXNpZ25hbC5jb20nO1xuXHR2YXIgSE9TVF9VUkwgPSBleHBvcnRzLkhPU1RfVVJMID0gKCgwLCBfdXRpbHMuaXNEZXYpKCkgPyBERVZfSE9TVCA6IFBST0RfSE9TVCkgKyAnL2FwaS92MS8nO1xuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cdGV4cG9ydHMuZ2V0SHVtYW5pemVkVGltZUR1cmF0aW9uID0gZ2V0SHVtYW5pemVkVGltZUR1cmF0aW9uO1xuXHRleHBvcnRzLmlzQnJvd3NlckVudiA9IGlzQnJvd3NlckVudjtcblx0ZXhwb3J0cy5pc0RldiA9IGlzRGV2O1xuXHRleHBvcnRzLmlzUHVzaE5vdGlmaWNhdGlvbnNTdXBwb3J0ZWQgPSBpc1B1c2hOb3RpZmljYXRpb25zU3VwcG9ydGVkO1xuXHRleHBvcnRzLmlzQnJvd3NlclNhZmFyaSA9IGlzQnJvd3NlclNhZmFyaTtcblx0ZXhwb3J0cy5pc1N1cHBvcnRlZEZpcmVGb3ggPSBpc1N1cHBvcnRlZEZpcmVGb3g7XG5cdGV4cG9ydHMuaXNCcm93c2VyRmlyZWZveCA9IGlzQnJvd3NlckZpcmVmb3g7XG5cdGV4cG9ydHMuZ2V0RmlyZWZveFZlcnNpb24gPSBnZXRGaXJlZm94VmVyc2lvbjtcblx0ZXhwb3J0cy5pc1N1cHBvcnRlZFNhZmFyaSA9IGlzU3VwcG9ydGVkU2FmYXJpO1xuXHRleHBvcnRzLnJlbW92ZURvbUVsZW1lbnQgPSByZW1vdmVEb21FbGVtZW50O1xuXHRleHBvcnRzLmFkZERvbUVsZW1lbnQgPSBhZGREb21FbGVtZW50O1xuXHRleHBvcnRzLmFkZENzc0NsYXNzID0gYWRkQ3NzQ2xhc3M7XG5cdGV4cG9ydHMucmVtb3ZlQ3NzQ2xhc3MgPSByZW1vdmVDc3NDbGFzcztcblx0ZXhwb3J0cy5vbiA9IG9uO1xuXHRleHBvcnRzLm9uY2UgPSBvbmNlO1xuXHRleHBvcnRzLm9mZiA9IG9mZjtcblx0XG5cdHZhciBfbG9nbGV2ZWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0dmFyIF9sb2dsZXZlbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2dsZXZlbCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH1cblx0XG5cdGZ1bmN0aW9uIGlzQXJyYXkodmFyaWFibGUpIHtcblx0ICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhcmlhYmxlKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcblx0fVxuXHRcblx0ZnVuY3Rpb24gZ2V0SHVtYW5pemVkVGltZUR1cmF0aW9uKHRpbWVEdXJhdGlvbkluTWlsbGlzZWNvbmRzKSB7XG5cdCAgZnVuY3Rpb24gYWRkUGx1cmFsU3VmZml4KG51bWJlcikge1xuXHQgICAgcmV0dXJuIG51bWJlciA+IDEgPyAncycgOiAnJztcblx0ICB9XG5cdCAgdmFyIGR1cmF0aW9uID0gTWF0aC5mbG9vcih0aW1lRHVyYXRpb25Jbk1pbGxpc2Vjb25kcyAvIDEwMDApO1xuXHRcblx0ICB2YXIgeWVhcnMgPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gMzE1MzYwMDApO1xuXHQgIGlmICh5ZWFycykgcmV0dXJuIHllYXJzICsgJyB5ZWFyJyArIGFkZFBsdXJhbFN1ZmZpeCh5ZWFycyk7XG5cdFxuXHQgIHZhciBkYXlzID0gTWF0aC5mbG9vcigoZHVyYXRpb24gJT0gMzE1MzYwMDApIC8gODY0MDApO1xuXHQgIGlmIChkYXlzKSByZXR1cm4gZGF5cyArICcgZGF5JyArIGFkZFBsdXJhbFN1ZmZpeChkYXlzKTtcblx0XG5cdCAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcigoZHVyYXRpb24gJT0gODY0MDApIC8gMzYwMCk7XG5cdCAgaWYgKGhvdXJzKSByZXR1cm4gaG91cnMgKyAnIGhvdXInICsgYWRkUGx1cmFsU3VmZml4KGhvdXJzKTtcblx0XG5cdCAgdmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKChkdXJhdGlvbiAlPSAzNjAwKSAvIDYwKTtcblx0ICBpZiAobWludXRlcykgcmV0dXJuIG1pbnV0ZXMgKyAnIG1pbnV0ZScgKyBhZGRQbHVyYWxTdWZmaXgobWludXRlcyk7XG5cdFxuXHQgIHZhciBzZWNvbmRzID0gZHVyYXRpb24gJSA2MDtcblx0ICBpZiAoc2Vjb25kcykgcmV0dXJuIHNlY29uZHMgKyAnIHNlY29uZCcgKyBhZGRQbHVyYWxTdWZmaXgoc2Vjb25kcyk7XG5cdFxuXHQgIHJldHVybiAnanVzdCBub3cnO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc0Jyb3dzZXJFbnYoKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCI7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzRGV2KCkge1xuXHQgIHJldHVybiAodHJ1ZSk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzUHVzaE5vdGlmaWNhdGlvbnNTdXBwb3J0ZWQoKSB7XG5cdCAgdmFyIGNocm9tZVZlcnNpb24gPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvQ2hyb21lXFwvKC4qPykgLyk7XG5cdFxuXHQgIGlmIChpc1N1cHBvcnRlZEZpcmVGb3goKSkgcmV0dXJuIHRydWU7XG5cdFxuXHQgIGlmIChpc1N1cHBvcnRlZFNhZmFyaSgpKSByZXR1cm4gdHJ1ZTtcblx0XG5cdCAgLy8gQ2hyb21lIGlzIG5vdCBmb3VuZCBpbiBhcHBWZXJzaW9uLlxuXHQgIGlmICghY2hyb21lVmVyc2lvbikgcmV0dXJuIGZhbHNlO1xuXHRcblx0ICAvLyBNaWNyb3NvZnQgRWRnZVxuXHQgIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvRWRnZS8pKSByZXR1cm4gZmFsc2U7XG5cdFxuXHQgIC8vIEFuZHJvaWQgQ2hyb21lIFdlYlZpZXdcblx0ICBpZiAobmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goLyB3di8pKSByZXR1cm4gZmFsc2U7XG5cdFxuXHQgIC8vIE9wZXJhXG5cdCAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9PUFJcXC8vKSkgcmV0dXJuIGZhbHNlO1xuXHRcblx0ICAvLyBUaGUgdXNlciBpcyBvbiBpT1Ncblx0ICBpZiAoL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkgcmV0dXJuIGZhbHNlO1xuXHRcblx0ICByZXR1cm4gcGFyc2VJbnQoY2hyb21lVmVyc2lvblsxXS5zdWJzdHJpbmcoMCwgMikpID4gNDE7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGlzQnJvd3NlclNhZmFyaSgpIHtcblx0ICB2YXIgc2FmYXJpVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKFwiVmVyc2lvbi8oWzAtOV0/KS4qIFNhZmFyaVwiKTtcblx0ICByZXR1cm4gc2FmYXJpVmVyc2lvbiAhPSBudWxsO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc1N1cHBvcnRlZEZpcmVGb3goKSB7XG5cdCAgdmFyIGZpcmVGb3hWZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKEZpcmVmb3hcXC8pKFswLTldezIsfVxcLlswLTldezEsfSkvKTtcblx0ICBpZiAoZmlyZUZveFZlcnNpb24pIHJldHVybiBwYXJzZUludChmaXJlRm94VmVyc2lvblsyXS5zdWJzdHJpbmcoMCwgMikpID4gNDM7XG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc0Jyb3dzZXJGaXJlZm94KCkge1xuXHQgIHZhciBmaXJlRm94VmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhGaXJlZm94XFwvKShbMC05XXsyLH1cXC5bMC05XXsxLH0pLyk7XG5cdCAgcmV0dXJuIGZpcmVGb3hWZXJzaW9uICE9IG51bGw7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldEZpcmVmb3hWZXJzaW9uKCkge1xuXHQgIHZhciBmaXJlRm94VmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhGaXJlZm94XFwvKShbMC05XXsyLH1cXC5bMC05XXsxLH0pLyk7XG5cdCAgaWYgKGZpcmVGb3hWZXJzaW9uKSByZXR1cm4gcGFyc2VJbnQoZmlyZUZveFZlcnNpb25bMl0uc3Vic3RyaW5nKDAsIDIpKTtlbHNlIHJldHVybiAtMTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gaXNTdXBwb3J0ZWRTYWZhcmkoKSB7XG5cdCAgdmFyIHNhZmFyaVZlcnNpb24gPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaChcIlZlcnNpb24vKFswLTldPykuKiBTYWZhcmlcIik7XG5cdCAgaWYgKHNhZmFyaVZlcnNpb24gPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHQgIGlmICgvaVBob25lfGlQYWR8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHJldHVybiBmYWxzZTtcblx0ICByZXR1cm4gcGFyc2VJbnQoc2FmYXJpVmVyc2lvblsxXSkgPiA2O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiByZW1vdmVEb21FbGVtZW50KHNlbGVjdG9yKSB7XG5cdCAgdmFyIGVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHQgIGlmIChlbHMubGVuZ3RoID4gMCkge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgZWxzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxzW2ldKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGFkZERvbUVsZW1lbnQodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQsIGFkZE9yZGVyLCBlbGVtZW50SHRtbCkge1xuXHQgIGlmICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgPT09ICdzdHJpbmcnKSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50KS5pbnNlcnRBZGphY2VudEhUTUwoYWRkT3JkZXIsIGVsZW1lbnRIdG1sKTtlbHNlIGlmICgodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkpID09PSAnb2JqZWN0JykgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKGFkZE9yZGVyLCBlbGVtZW50SHRtbCk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgKyAnIG11c3QgYmUgYSBDU1Mgc2VsZWN0b3Igc3RyaW5nIG9yIERPTSBFbGVtZW50IG9iamVjdC4nKTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gYWRkQ3NzQ2xhc3ModGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQsIGNzc0NsYXNzKSB7XG5cdCAgaWYgKHR5cGVvZiB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCA9PT0gJ3N0cmluZycpIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQpLmNsYXNzTGlzdC5hZGQoY3NzQ2xhc3MpO2Vsc2UgaWYgKCh0eXBlb2YgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50KSkgPT09ICdvYmplY3QnKSB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTtlbHNlIHRocm93IG5ldyBFcnJvcih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCArICcgbXVzdCBiZSBhIENTUyBzZWxlY3RvciBzdHJpbmcgb3IgRE9NIEVsZW1lbnQgb2JqZWN0LicpO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiByZW1vdmVDc3NDbGFzcyh0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCwgY3NzQ2xhc3MpIHtcblx0ICBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAnc3RyaW5nJykgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkuY2xhc3NMaXN0LnJlbW92ZShjc3NDbGFzcyk7ZWxzZSBpZiAoKHR5cGVvZiB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQpKSA9PT0gJ29iamVjdCcpIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY3NzQ2xhc3MpO2Vsc2UgdGhyb3cgbmV3IEVycm9yKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ICsgJyBtdXN0IGJlIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBET00gRWxlbWVudCBvYmplY3QuJyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG9uKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LCBldmVudCwgdGFzaykge1xuXHQgIGlmICghZXZlbnQpIHtcblx0ICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcignQ2Fubm90IGNhbGwgb24oKSB3aXRoIG5vIGV2ZW50OiAnLCBldmVudCk7XG5cdCAgfVxuXHQgIGlmICghdGFzaykge1xuXHQgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKCdDYW5ub3QgY2FsbCBvbigpIHdpdGggbm8gdGFzazogJywgdGFzayk7XG5cdCAgfVxuXHQgIF9sb2dsZXZlbDIuZGVmYXVsdC5kZWJ1ZygnRGVidWcgbWUgaGVyZS4nKTtcblx0ICBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAnc3RyaW5nJykge1xuXHQgICAgdmFyIGVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHQgICAgaWYgKGVscy5sZW5ndGggPiAwKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgb24oZWxzW2ldLCB0YXNrKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAoaXNBcnJheSh0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgb24odGFyZ2V0U2VsZWN0b3JPckVsZW1lbnRbaV0sIHRhc2spO1xuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAoKHR5cGVvZiB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQpKSA9PT0gJ29iamVjdCcpIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRhc2spO2Vsc2UgdGhyb3cgbmV3IEVycm9yKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ICsgJyBtdXN0IGJlIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBET00gRWxlbWVudCBvYmplY3QuJyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIG9uY2UodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQsIGV2ZW50LCB0YXNrKSB7XG5cdCAgdmFyIG1hbnVhbERlc3Ryb3kgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1szXTtcblx0XG5cdCAgaWYgKCFldmVudCkge1xuXHQgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKCdDYW5ub3QgY2FsbCBvbigpIHdpdGggbm8gZXZlbnQ6ICcsIGV2ZW50KTtcblx0ICB9XG5cdCAgaWYgKCF0YXNrKSB7XG5cdCAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoJ0Nhbm5vdCBjYWxsIG9uKCkgd2l0aCBubyB0YXNrOiAnLCB0YXNrKTtcblx0ICB9XG5cdCAgaWYgKHR5cGVvZiB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCA9PT0gJ3N0cmluZycpIHtcblx0ICAgIHZhciBlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblx0ICAgIGlmIChlbHMubGVuZ3RoID4gMCkge1xuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIG9uY2UoZWxzW2ldLCB0YXNrKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gZWxzZSBpZiAoaXNBcnJheSh0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgb25jZSh0YXJnZXRTZWxlY3Rvck9yRWxlbWVudFtpXSwgdGFzayk7XG5cdCAgICB9XG5cdCAgfSBlbHNlIGlmICgodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkpID09PSAnb2JqZWN0Jykge1xuXHQgICAgdmFyIHRhc2tXcmFwcGVyID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGludGVybmFsVGFza0Z1bmN0aW9uID0gZnVuY3Rpb24gaW50ZXJuYWxUYXNrRnVuY3Rpb24oZSkge1xuXHQgICAgICAgIHZhciBkZXN0cm95RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGRlc3Ryb3lFdmVudExpc3RlbmVyKCkge1xuXHQgICAgICAgICAgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLnR5cGUsIHRhc2tXcmFwcGVyKTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIGlmICghbWFudWFsRGVzdHJveSkge1xuXHQgICAgICAgICAgZGVzdHJveUV2ZW50TGlzdGVuZXIoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGFzayhlLCBkZXN0cm95RXZlbnRMaXN0ZW5lcik7XG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiBpbnRlcm5hbFRhc2tGdW5jdGlvbjtcblx0ICAgIH0pKCk7XG5cdCAgICB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0YXNrV3JhcHBlcik7XG5cdCAgfSBlbHNlIHRocm93IG5ldyBFcnJvcih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCArICcgbXVzdCBiZSBhIENTUyBzZWxlY3RvciBzdHJpbmcgb3IgRE9NIEVsZW1lbnQgb2JqZWN0LicpO1xuXHR9XG5cdFxuXHQvKipcblx0ICogUmVtb3ZlcyBldmVudCBoYW5kbGVyIGZyb20gc2VsZWN0b3IuXG5cdCAqIEBwYXJhbSB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCBTZWxlY3RvciB0byB0YXJnZXQgb25lIG9yIG11bHRpcGxlIGVsZW1lbnRzLCBvciBhIHNpbmdsZSBvciBhcnJheSBvZiBET01FbGVtZW50LlxuXHQgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHRhcmdldCAoZS5nLiAndHJhbnNpdGlvbmVuZCcpXG5cdCAqIEBwYXJhbSB0YXNrIEEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxiYWNrIHRvIHVuYmluZCwgb3IgbGVhdmUgZW1wdHkgdG8gcmVtb3ZlIGFsbCBldmVudCBoYW5kbGVycy5cblx0ICovXG5cdGZ1bmN0aW9uIG9mZih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCwgZXZlbnQsIHRhc2spIHtcblx0ICBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAnc3RyaW5nJykge1xuXHQgICAgdmFyIGVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHQgICAgaWYgKGVscy5sZW5ndGggPiAwKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgb2ZmKGVsc1tpXSwgdGFzayk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKGlzQXJyYXkodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQpKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhcmdldFNlbGVjdG9yT3JFbGVtZW50Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIG9mZih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudFtpXSwgdGFzayk7XG5cdCAgICB9XG5cdCAgfSBlbHNlIGlmICgodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkpID09PSAnb2JqZWN0Jykge1xuXHQgICAgaWYgKHRhc2spIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHRhc2spO2Vsc2UgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCk7XG5cdCAgfSBlbHNlIHRocm93IG5ldyBFcnJvcih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCArICcgbXVzdCBiZSBhIENTUyBzZWxlY3RvciBzdHJpbmcgb3IgRE9NIEVsZW1lbnQgb2JqZWN0LicpO1xuXHR9XG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKlxyXG5cdCogbG9nbGV2ZWwgLSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWxcclxuXHQqXHJcblx0KiBDb3B5cmlnaHQgKGMpIDIwMTMgVGltIFBlcnJ5XHJcblx0KiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXHJcblx0Ki9cclxuXHQoZnVuY3Rpb24gKHJvb3QsIGRlZmluaXRpb24pIHtcclxuXHQgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblx0ICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyAmJiBcImZ1bmN0aW9uXCIgPT09ICdmdW5jdGlvbicpIHtcclxuXHQgICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xyXG5cdCAgICB9IGVsc2UgaWYgKHRydWUpIHtcclxuXHQgICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGRlZmluaXRpb24pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID8gKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIGV4cG9ydHMsIG1vZHVsZSkpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xyXG5cdCAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgcm9vdC5sb2cgPSBkZWZpbml0aW9uKCk7XHJcblx0ICAgIH1cclxuXHR9KHRoaXMsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblx0ICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcclxuXHQgICAgdmFyIHVuZGVmaW5lZFR5cGUgPSBcInVuZGVmaW5lZFwiO1xyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHtcclxuXHQgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gdW5kZWZpbmVkVHlwZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gV2UgY2FuJ3QgYnVpbGQgYSByZWFsIG1ldGhvZCB3aXRob3V0IGEgY29uc29sZSB0byBsb2cgdG9cclxuXHQgICAgICAgIH0gZWxzZSBpZiAoY29uc29sZVttZXRob2ROYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgbWV0aG9kTmFtZSk7XHJcblx0ICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGUubG9nICE9PSB1bmRlZmluZWQpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCAnbG9nJyk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBub29wO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIGZ1bmN0aW9uIGJpbmRNZXRob2Qob2JqLCBtZXRob2ROYW1lKSB7XHJcblx0ICAgICAgICB2YXIgbWV0aG9kID0gb2JqW21ldGhvZE5hbWVdO1xyXG5cdCAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBtZXRob2QuYmluZChvYmopO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChtZXRob2QsIG9iaik7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkobWV0aG9kLCBbb2JqLCBhcmd1bWVudHNdKTtcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgLy8gdGhlc2UgcHJpdmF0ZSBmdW5jdGlvbnMgYWx3YXlzIG5lZWQgYHRoaXNgIHRvIGJlIHNldCBwcm9wZXJseVxyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzKG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XHJcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkVHlwZSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbCh0aGlzLCBsZXZlbCwgbG9nZ2VyTmFtZSk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIGZ1bmN0aW9uIHJlcGxhY2VMb2dnaW5nTWV0aG9kcyhsZXZlbCwgbG9nZ2VyTmFtZSkge1xyXG5cdCAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9nTWV0aG9kcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gbG9nTWV0aG9kc1tpXTtcclxuXHQgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdID0gKGkgPCBsZXZlbCkgP1xyXG5cdCAgICAgICAgICAgICAgICBub29wIDpcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5tZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiBkZWZhdWx0TWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSkge1xyXG5cdCAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cclxuXHQgICAgICAgIHJldHVybiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHx8XHJcblx0ICAgICAgICAgICAgICAgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgICB9XHJcblx0XHJcblx0ICAgIHZhciBsb2dNZXRob2RzID0gW1xyXG5cdCAgICAgICAgXCJ0cmFjZVwiLFxyXG5cdCAgICAgICAgXCJkZWJ1Z1wiLFxyXG5cdCAgICAgICAgXCJpbmZvXCIsXHJcblx0ICAgICAgICBcIndhcm5cIixcclxuXHQgICAgICAgIFwiZXJyb3JcIlxyXG5cdCAgICBdO1xyXG5cdFxyXG5cdCAgICBmdW5jdGlvbiBMb2dnZXIobmFtZSwgZGVmYXVsdExldmVsLCBmYWN0b3J5KSB7XHJcblx0ICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cdCAgICAgIHZhciBjdXJyZW50TGV2ZWw7XHJcblx0ICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBcImxvZ2xldmVsXCI7XHJcblx0ICAgICAgaWYgKG5hbWUpIHtcclxuXHQgICAgICAgIHN0b3JhZ2VLZXkgKz0gXCI6XCIgKyBuYW1lO1xyXG5cdCAgICAgIH1cclxuXHRcclxuXHQgICAgICBmdW5jdGlvbiBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsTnVtKSB7XHJcblx0ICAgICAgICAgIHZhciBsZXZlbE5hbWUgPSAobG9nTWV0aG9kc1tsZXZlbE51bV0gfHwgJ3NpbGVudCcpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHJcblx0ICAgICAgICAgIC8vIFVzZSBsb2NhbFN0b3JhZ2UgaWYgYXZhaWxhYmxlXHJcblx0ICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldID0gbGV2ZWxOYW1lO1xyXG5cdCAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XHJcblx0XHJcblx0ICAgICAgICAgIC8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFja1xyXG5cdCAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmNvb2tpZSA9XHJcblx0ICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiICsgbGV2ZWxOYW1lICsgXCI7XCI7XHJcblx0ICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAgICAgZnVuY3Rpb24gZ2V0UGVyc2lzdGVkTGV2ZWwoKSB7XHJcblx0ICAgICAgICAgIHZhciBzdG9yZWRMZXZlbDtcclxuXHRcclxuXHQgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XTtcclxuXHQgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxyXG5cdFxyXG5cdCAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZExldmVsID09PSB1bmRlZmluZWRUeXBlKSB7XHJcblx0ICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgIHZhciBjb29raWUgPSB3aW5kb3cuZG9jdW1lbnQuY29va2llO1xyXG5cdCAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNvb2tpZS5pbmRleE9mKFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIik7XHJcblx0ICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gL14oW147XSspLy5leGVjKGNvb2tpZS5zbGljZShsb2NhdGlvbikpWzFdO1xyXG5cdCAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuXHQgICAgICAgICAgfVxyXG5cdFxyXG5cdCAgICAgICAgICAvLyBJZiB0aGUgc3RvcmVkIGxldmVsIGlzIG5vdCB2YWxpZCwgdHJlYXQgaXQgYXMgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxyXG5cdCAgICAgICAgICBpZiAoc2VsZi5sZXZlbHNbc3RvcmVkTGV2ZWxdID09PSB1bmRlZmluZWQpIHtcclxuXHQgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gdW5kZWZpbmVkO1xyXG5cdCAgICAgICAgICB9XHJcblx0XHJcblx0ICAgICAgICAgIHJldHVybiBzdG9yZWRMZXZlbDtcclxuXHQgICAgICB9XHJcblx0XHJcblx0ICAgICAgLypcclxuXHQgICAgICAgKlxyXG5cdCAgICAgICAqIFB1YmxpYyBBUElcclxuXHQgICAgICAgKlxyXG5cdCAgICAgICAqL1xyXG5cdFxyXG5cdCAgICAgIHNlbGYubGV2ZWxzID0geyBcIlRSQUNFXCI6IDAsIFwiREVCVUdcIjogMSwgXCJJTkZPXCI6IDIsIFwiV0FSTlwiOiAzLFxyXG5cdCAgICAgICAgICBcIkVSUk9SXCI6IDQsIFwiU0lMRU5UXCI6IDV9O1xyXG5cdFxyXG5cdCAgICAgIHNlbGYubWV0aG9kRmFjdG9yeSA9IGZhY3RvcnkgfHwgZGVmYXVsdE1ldGhvZEZhY3Rvcnk7XHJcblx0XHJcblx0ICAgICAgc2VsZi5nZXRMZXZlbCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgcmV0dXJuIGN1cnJlbnRMZXZlbDtcclxuXHQgICAgICB9O1xyXG5cdFxyXG5cdCAgICAgIHNlbGYuc2V0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwsIHBlcnNpc3QpIHtcclxuXHQgICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJzdHJpbmdcIiAmJiBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgICAgICAgICAgICBsZXZlbCA9IHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldO1xyXG5cdCAgICAgICAgICB9XHJcblx0ICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwibnVtYmVyXCIgJiYgbGV2ZWwgPj0gMCAmJiBsZXZlbCA8PSBzZWxmLmxldmVscy5TSUxFTlQpIHtcclxuXHQgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IGxldmVsO1xyXG5cdCAgICAgICAgICAgICAgaWYgKHBlcnNpc3QgIT09IGZhbHNlKSB7ICAvLyBkZWZhdWx0cyB0byB0cnVlXHJcblx0ICAgICAgICAgICAgICAgICAgcGVyc2lzdExldmVsSWZQb3NzaWJsZShsZXZlbCk7XHJcblx0ICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbChzZWxmLCBsZXZlbCwgbmFtZSk7XHJcblx0ICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUgJiYgbGV2ZWwgPCBzZWxmLmxldmVscy5TSUxFTlQpIHtcclxuXHQgICAgICAgICAgICAgICAgICByZXR1cm4gXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wiO1xyXG5cdCAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgdGhyb3cgXCJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiBcIiArIGxldmVsO1xyXG5cdCAgICAgICAgICB9XHJcblx0ICAgICAgfTtcclxuXHRcclxuXHQgICAgICBzZWxmLnNldERlZmF1bHRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xyXG5cdCAgICAgICAgICBpZiAoIWdldFBlcnNpc3RlZExldmVsKCkpIHtcclxuXHQgICAgICAgICAgICAgIHNlbGYuc2V0TGV2ZWwobGV2ZWwsIGZhbHNlKTtcclxuXHQgICAgICAgICAgfVxyXG5cdCAgICAgIH07XHJcblx0XHJcblx0ICAgICAgc2VsZi5lbmFibGVBbGwgPSBmdW5jdGlvbihwZXJzaXN0KSB7XHJcblx0ICAgICAgICAgIHNlbGYuc2V0TGV2ZWwoc2VsZi5sZXZlbHMuVFJBQ0UsIHBlcnNpc3QpO1xyXG5cdCAgICAgIH07XHJcblx0XHJcblx0ICAgICAgc2VsZi5kaXNhYmxlQWxsID0gZnVuY3Rpb24ocGVyc2lzdCkge1xyXG5cdCAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlNJTEVOVCwgcGVyc2lzdCk7XHJcblx0ICAgICAgfTtcclxuXHRcclxuXHQgICAgICAvLyBJbml0aWFsaXplIHdpdGggdGhlIHJpZ2h0IGxldmVsXHJcblx0ICAgICAgdmFyIGluaXRpYWxMZXZlbCA9IGdldFBlcnNpc3RlZExldmVsKCk7XHJcblx0ICAgICAgaWYgKGluaXRpYWxMZXZlbCA9PSBudWxsKSB7XHJcblx0ICAgICAgICAgIGluaXRpYWxMZXZlbCA9IGRlZmF1bHRMZXZlbCA9PSBudWxsID8gXCJXQVJOXCIgOiBkZWZhdWx0TGV2ZWw7XHJcblx0ICAgICAgfVxyXG5cdCAgICAgIHNlbGYuc2V0TGV2ZWwoaW5pdGlhbExldmVsLCBmYWxzZSk7XHJcblx0ICAgIH1cclxuXHRcclxuXHQgICAgLypcclxuXHQgICAgICpcclxuXHQgICAgICogUGFja2FnZS1sZXZlbCBBUElcclxuXHQgICAgICpcclxuXHQgICAgICovXHJcblx0XHJcblx0ICAgIHZhciBkZWZhdWx0TG9nZ2VyID0gbmV3IExvZ2dlcigpO1xyXG5cdFxyXG5cdCAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcclxuXHQgICAgZGVmYXVsdExvZ2dlci5nZXRMb2dnZXIgPSBmdW5jdGlvbiBnZXRMb2dnZXIobmFtZSkge1xyXG5cdCAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUgPT09IFwiXCIpIHtcclxuXHQgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7XHJcblx0ICAgICAgICB9XHJcblx0XHJcblx0ICAgICAgICB2YXIgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV07XHJcblx0ICAgICAgICBpZiAoIWxvZ2dlcikge1xyXG5cdCAgICAgICAgICBsb2dnZXIgPSBfbG9nZ2Vyc0J5TmFtZVtuYW1lXSA9IG5ldyBMb2dnZXIoXHJcblx0ICAgICAgICAgICAgbmFtZSwgZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpLCBkZWZhdWx0TG9nZ2VyLm1ldGhvZEZhY3RvcnkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGxvZ2dlcjtcclxuXHQgICAgfTtcclxuXHRcclxuXHQgICAgLy8gR3JhYiB0aGUgY3VycmVudCBnbG9iYWwgbG9nIHZhcmlhYmxlIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXHJcblx0ICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcclxuXHQgICAgZGVmYXVsdExvZ2dlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSAmJlxyXG5cdCAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcclxuXHQgICAgICAgICAgICB3aW5kb3cubG9nID0gX2xvZztcclxuXHQgICAgICAgIH1cclxuXHRcclxuXHQgICAgICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xyXG5cdCAgICB9O1xyXG5cdFxyXG5cdCAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcclxuXHR9KSk7XHJcblxuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGZldGNoKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuYXBpQ2FsbCA9IGFwaUNhbGw7XG5cdGV4cG9ydHMuc2VuZE5vdGlmaWNhdGlvbiA9IHNlbmROb3RpZmljYXRpb247XG5cdFxuXHR2YXIgX3ZhcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0dmFyIF9sb2dsZXZlbCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHR2YXIgX2xvZ2xldmVsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZ2xldmVsKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBhcGlDYWxsKGFjdGlvbiwgbWV0aG9kLCBkYXRhKSB7XG5cdCAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuXHQgIGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG5cdFxuXHQgIHZhciBjb250ZW50cyA9IHtcblx0ICAgIG1ldGhvZDogbWV0aG9kIHx8ICdOT19NRVRIT0RfU1BFQ0lGSUVEJyxcblx0ICAgIGhlYWRlcnM6IGhlYWRlcnMsXG5cdCAgICBjYWNoZTogJ25vLWNhY2hlJyxcblx0ICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgIGZldGNoKF92YXJzLkhPU1RfVVJMICsgYWN0aW9uLCBjb250ZW50cykudGhlbihmdW5jdGlvbiBzdGF0dXMocmVzcG9uc2UpIHtcblx0ICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKSByZXNvbHZlKHJlc3BvbnNlLmpzb24oKSk7ZWxzZSByZWplY3QobmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpKTtcblx0ICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgIHJlamVjdChlKTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBzZW5kTm90aWZpY2F0aW9uKGFwcElkLCBwbGF5ZXJJZHMsIHRpdGxlcywgY29udGVudHMpIHtcblx0ICB2YXIgcGFyYW1zID0ge1xuXHQgICAgJ2FwcF9pZCc6IGFwcElkLFxuXHQgICAgJ2hlYWRpbmdzJzogdGl0bGVzLFxuXHQgICAgJ2NvbnRlbnRzJzogY29udGVudHMsXG5cdCAgICAnaW5jbHVkZV9wbGF5ZXJfaWRzJzogcGxheWVySWRzLFxuXHQgICAgJ2lzQW55V2ViJzogdHJ1ZSxcblx0ICAgICd1cmwnOiAnamF2YXNjcmlwdDp2b2lkKDApOydcblx0ICB9O1xuXHQgIHJldHVybiBhcGlDYWxsKCdub3RpZmljYXRpb25zJywgJ1BPU1QnLCBwYXJhbXMpO1xuXHR9XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpKSlcblxuLyoqKi8gfSxcbi8qIDggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdC8qXG5cdCBMaW1pdFN0b3JlLnB1dCgnY29sb3JhZG8nLCAncm9ja3knKTtcblx0IFtcInJvY2t5XCJdXG5cdCBMaW1pdFN0b3JlLnB1dCgnY29sb3JhZG8nLCAnbW91bnRhaW4nKTtcblx0IFtcInJvY2t5XCIsIFwibW91bnRhaW5cIl1cblx0IExpbWl0U3RvcmUucHV0KCdjb2xvcmFkbycsICduYXRpb25hbCcpO1xuXHQgW1wibW91bnRhaW5cIiwgXCJuYXRpb25hbFwiXVxuXHQgTGltaXRTdG9yZS5wdXQoJ2NvbG9yYWRvJywgJ3BhcmsnKTtcblx0IFtcIm5hdGlvbmFsXCIsIFwicGFya1wiXVxuXHQgKi9cblx0ZnVuY3Rpb24gTGltaXRTdG9yZSgpIHt9XG5cdFxuXHRMaW1pdFN0b3JlLnN0b3JlID0ge307XG5cdExpbWl0U3RvcmUuTElNSVQgPSAyO1xuXHRcblx0TGltaXRTdG9yZS5wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgIGlmIChMaW1pdFN0b3JlLnN0b3JlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHQgICAgTGltaXRTdG9yZS5zdG9yZVtrZXldID0gW251bGwsIG51bGxdO1xuXHQgIH1cblx0ICBMaW1pdFN0b3JlLnN0b3JlW2tleV0ucHVzaCh2YWx1ZSk7XG5cdCAgaWYgKExpbWl0U3RvcmUuc3RvcmVba2V5XS5sZW5ndGggPT0gTGltaXRTdG9yZS5MSU1JVCArIDEpIHtcblx0ICAgIExpbWl0U3RvcmUuc3RvcmVba2V5XS5zaGlmdCgpO1xuXHQgIH1cblx0ICByZXR1cm4gTGltaXRTdG9yZS5zdG9yZVtrZXldO1xuXHR9O1xuXHRcblx0TGltaXRTdG9yZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdCAgcmV0dXJuIExpbWl0U3RvcmUuc3RvcmVba2V5XTtcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IExpbWl0U3RvcmU7XG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdCAgKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpIHtcblx0ICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWxzOiB1bmRlZmluZWQgfTtcblx0ICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuXHQgICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWxzKTtcblx0ICAgICAgcmV0dXJuIGV2dDtcblx0ICAgIH1cblx0XG5cdCAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuXHRcblx0ICAgIHdpbmRvdy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50O1xuXHQgIH0pKCk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy50cmlnZ2VyRXZlbnQgPSB0cmlnZ2VyRXZlbnQ7XG5cdFxuXHR2YXIgX2xvZ2xldmVsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBfbG9nbGV2ZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nbGV2ZWwpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudE5hbWUsIGRhdGEpIHtcblx0ICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHQgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmRlYnVnKCdTa2lwcGluZyB0cmlnZ2VyaW5nIG9mIGV2ZW50OicsIGV2ZW50TmFtZSwgJ2JlY2F1c2Ugd2UgYXJlIHJ1bm5pbmcgaW4gYSBTZXJ2aWNlV29ya2VyIGNvbnRleHQuJyk7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIHtcblx0ICAgIGJ1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IHRydWUsIGRldGFpbHM6IGRhdGFcblx0ICB9KTtcblx0ICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDExICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cdFxuXHR2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBfbGltaXRTdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdFxuXHR2YXIgX2xpbWl0U3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGltaXRTdG9yZSk7XG5cdFxuXHR2YXIgX2xvZ2xldmVsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBfbG9nbGV2ZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nbGV2ZWwpO1xuXHRcblx0dmFyIF9ldmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0aWYgKCgwLCBfdXRpbHMuaXNCcm93c2VyRW52KSgpKSB7XG5cdCAgX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdCAgdmFyIGxvZ29TdmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0XG5cdCAgLypcblx0ICAgIHtcblx0ICAgICAgc2l6ZSA9IFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10sXG5cdCAgICAgIHBvc2l0aW9uID0gJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCddLFxuXHQgICAgICBvZmZzZXQgPSAnMTVweCAxNXB4Jyxcblx0ICAgICAgdGhlbWUgPSBbJ3JlZC13aGl0ZScsICd3aGl0ZS1yZWQnXSxcblx0ICAgICAgaW5hY3RpdmVPcGFjaXR5OiAwLjc1LFxuXHQgICAgICBzaG93TGF1bmNoZXJBZnRlcjogMTAwMCxcblx0ICAgICAgbWVzc2FnZXM6IHtcblx0ICAgICAgICAgICd1bnN1YnNjcmliZWQnOiAnU3Vic2NyaWJlIHRvIG5vdGlmaWNhdGlvbnMnLFxuXHQgICAgICAgICAgJ3N1YnNjcmliZWQnOiAnWW91J3JlIHN1YnNjcmliZWQgdG8gbm90aWZpY2F0aW9ucydcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICovXG5cdFxuXHQgIHZhciBCZWxsID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEJlbGwoKSB7XG5cdCAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXHRcblx0ICAgICAgdmFyIF9yZWYkc2l6ZSA9IF9yZWYuc2l6ZTtcblx0ICAgICAgdmFyIHNpemUgPSBfcmVmJHNpemUgPT09IHVuZGVmaW5lZCA/ICdzbWFsbCcgOiBfcmVmJHNpemU7XG5cdCAgICAgIHZhciBfcmVmJHBvc2l0aW9uID0gX3JlZi5wb3NpdGlvbjtcblx0ICAgICAgdmFyIHBvc2l0aW9uID0gX3JlZiRwb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gJ2JvdHRvbS1sZWZ0JyA6IF9yZWYkcG9zaXRpb247XG5cdCAgICAgIHZhciBfcmVmJHRoZW1lID0gX3JlZi50aGVtZTtcblx0ICAgICAgdmFyIHRoZW1lID0gX3JlZiR0aGVtZSA9PT0gdW5kZWZpbmVkID8gJ3JlZC13aGl0ZScgOiBfcmVmJHRoZW1lO1xuXHQgICAgICB2YXIgX3JlZiRzaG93TGF1bmNoZXJBZnRlID0gX3JlZi5zaG93TGF1bmNoZXJBZnRlcjtcblx0ICAgICAgdmFyIHNob3dMYXVuY2hlckFmdGVyID0gX3JlZiRzaG93TGF1bmNoZXJBZnRlID09PSB1bmRlZmluZWQgPyAxMCA6IF9yZWYkc2hvd0xhdW5jaGVyQWZ0ZTtcblx0ICAgICAgdmFyIF9yZWYkc2hvd0JhZGdlQWZ0ZXIgPSBfcmVmLnNob3dCYWRnZUFmdGVyO1xuXHQgICAgICB2YXIgc2hvd0JhZGdlQWZ0ZXIgPSBfcmVmJHNob3dCYWRnZUFmdGVyID09PSB1bmRlZmluZWQgPyAzMDAgOiBfcmVmJHNob3dCYWRnZUFmdGVyO1xuXHQgICAgICB2YXIgX3JlZiRtZXNzYWdlcyA9IF9yZWYubWVzc2FnZXM7XG5cdCAgICAgIHZhciBtZXNzYWdlcyA9IF9yZWYkbWVzc2FnZXMgPT09IHVuZGVmaW5lZCA/IHtcblx0ICAgICAgICAndW5zdWJzY3JpYmVkJzogJ1N1YnNjcmliZSB0byBub3RpZmljYXRpb25zJyxcblx0ICAgICAgICAnc3Vic2NyaWJlZCc6IFwiWW91J3JlIHN1YnNjcmliZWQgdG8gbm90aWZpY2F0aW9uc1wiXG5cdCAgICAgIH0gOiBfcmVmJG1lc3NhZ2VzO1xuXHQgICAgICB2YXIgX3JlZiRwcmVub3RpZnkgPSBfcmVmLnByZW5vdGlmeTtcblx0ICAgICAgdmFyIHByZW5vdGlmeSA9IF9yZWYkcHJlbm90aWZ5ID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRwcmVub3RpZnk7XG5cdFxuXHQgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmVsbCk7XG5cdFxuXHQgICAgICB0aGlzLm9wdGlvbnMgPSB7XG5cdCAgICAgICAgc2l6ZTogc2l6ZSxcblx0ICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG5cdCAgICAgICAgdGhlbWU6IHRoZW1lLFxuXHQgICAgICAgIHNob3dMYXVuY2hlckFmdGVyOiBzaG93TGF1bmNoZXJBZnRlcixcblx0ICAgICAgICBzaG93QmFkZ2VBZnRlcjogc2hvd0JhZGdlQWZ0ZXIsXG5cdCAgICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzLFxuXHQgICAgICAgIHByZW5vdGlmeTogcHJlbm90aWZ5XG5cdCAgICAgIH07XG5cdCAgICAgIHRoaXMuc2l6ZSA9IHRoaXMub3B0aW9ucy5zaXplO1xuXHQgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuXHQgICAgICB0aGlzLm1lc3NhZ2VzID0gdGhpcy5vcHRpb25zLm1lc3NhZ2VzO1xuXHQgICAgICB0aGlzLm1lc3NhZ2VzLnF1ZXVlZCA9IFtdO1xuXHQgICAgICBpZiAoIXRoaXMubWVzc2FnZXMudW5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgdGhpcy5tZXNzYWdlcy51bnN1YnNjcmliZWQgPSAnU3Vic2NyaWJlIHRvIG5vdGlmaWNhdGlvbnMnO1xuXHQgICAgICB9XG5cdCAgICAgIGlmICghdGhpcy5tZXNzYWdlcy5zdWJzY3JpYmVkKSB7XG5cdCAgICAgICAgdGhpcy5tZXNzYWdlcy5zdWJzY3JpYmVkID0gXCJZb3UncmUgc3Vic2NyaWJlZCB0byBub3RpZmljYXRpb25zXCI7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy5zdGF0ZXMgPSB7XG5cdCAgICAgICAgJ3VuaW5pdGlhbGl6ZWQnOiAnVGhlIGJlbGwgaXMgbG9hZGluZy4nLFxuXHQgICAgICAgICdzdWJzY3JpYmVkJzogJ1RoZSB1c2VyIGlzIHN1YnNjcmliZWQnLFxuXHQgICAgICAgICd1bnN1YnNjcmliZWQnOiAnVGhlIHVzZXIgaXMgdW5zdWJzY3JpYmVkJ1xuXHQgICAgICB9O1xuXHQgICAgICB0aGlzLnN0YXRlID0gJ3VuaW5pdGlhbGl6ZWQnO1xuXHRcblx0ICAgICAgLy8gSW5zdGFsbCBldmVudCBob29rc1xuXHQgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLmJlbGwuc3RhdGUuY2hhbmdlZCcsIGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgICAgIGNvbnNvbGUuaW5mbygnb25lc2lnbmFsLmJlbGwuc3RhdGUuY2hhbmdlZCcsIHN0YXRlLmRldGFpbCk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5iZWxsLmNsaWNrJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBvcmlnaW5hbENhbGwgPSBmdW5jdGlvbiBvcmlnaW5hbENhbGwoKSB7XG5cdCAgICAgICAgICBfdGhpcy5oaWRlTWVzc2FnZSgpO1xuXHQgICAgICAgICAgaWYgKF90aGlzLnN0YXRlID09PSAndW5zdWJzY3JpYmVkJykge1xuXHQgICAgICAgICAgICBPbmVTaWduYWwucmVnaXN0ZXJGb3JQdXNoTm90aWZpY2F0aW9ucygpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0RpYWxvZ09wZW5lZCgpKSB7XG5cdCAgICAgICAgICAgICAgX3RoaXMuc2hvd0RpYWxvZygpLnRoZW4oZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzZWxmID0gX3RoaXM7XG5cdCAgICAgICAgICAgICAgICAoMCwgX3V0aWxzLm9uY2UpKGRvY3VtZW50LCAnY2xpY2snLCBmdW5jdGlvbiAoZSwgZGVzdHJveUV2ZW50TGlzdGVuZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgdmFyIHdhc0RpYWxvZ0NsaWNrZWQgPSBzZWxmLmxhdW5jaGVyRGlhbG9nLmNvbnRhaW5zKGUudGFyZ2V0KTtcblx0ICAgICAgICAgICAgICAgICAgaWYgKHdhc0RpYWxvZ0NsaWNrZWQpIHt9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGRlc3Ryb3lFdmVudExpc3RlbmVyKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgc2VsZi5oaWRlRGlhbG9nKCkudGhlbihmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLndhc0luYWN0aXZlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldEluYWN0aXZlKHRydWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy53YXNJbmFjdGl2ZSA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9LCB0cnVlKTtcblx0ICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBpZiAoX3RoaXMuaXNJbmFjdGl2ZSgpKSB7XG5cdCAgICAgICAgICBfdGhpcy53YXNJbmFjdGl2ZSA9IHRydWU7XG5cdCAgICAgICAgICBfdGhpcy5zZXRJbmFjdGl2ZShmYWxzZSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIG9yaWdpbmFsQ2FsbCgpO1xuXHQgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG9yaWdpbmFsQ2FsbCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLmJlbGwuaG92ZXJpbmcnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKF90aGlzLmlzSW5hY3RpdmUoKSkge1xuXHQgICAgICAgICAgX3RoaXMud2FzSW5hY3RpdmUgPSB0cnVlO1xuXHQgICAgICAgICAgX3RoaXMuc2V0SW5hY3RpdmUoZmFsc2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBJZiB0aGVyZSdzIGFscmVhZHkgYSBtZXNzYWdlIGJlaW5nIGZvcmNlIHNob3duLCBkbyBub3Qgb3ZlcnJpZGVcblx0ICAgICAgICBpZiAoX3RoaXMuaXNNZXNzYWdlT3BlbmVkKCkgfHwgX3RoaXMuaXNEaWFsb2dPcGVuZWQoKSkge1xuXHQgICAgICAgICAgY29uc29sZS5kZWJ1ZygnVGhlcmUgaXMgYWxyZWFkeSBhIG1lc3NhZ2UgYmVpbmcgZGlzcGxheWVkOyB3YWl0IHVudGlsIGl0IGlzIGhpZGRlbiBhZ2Fpbi4nKTtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG1lc3NhZ2VzLnF1ZXVlZC5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICB2YXIgZGVxdWV1ZWRNZXNzYWdlID0gX3RoaXMuZGVxdWV1ZU1lc3NhZ2UoKTtcblx0ICAgICAgICAgIF90aGlzLnNldE1lc3NhZ2UoZGVxdWV1ZWRNZXNzYWdlKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgX3RoaXMuc2V0TWVzc2FnZShfdGhpcy5tZXNzYWdlc1tfdGhpcy5zdGF0ZV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBfdGhpcy5zaG93TWVzc2FnZSgpO1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuYmVsbC5ob3ZlcmVkJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChfdGhpcy5pc01lc3NhZ2VPcGVuZWQoKSkge1xuXHQgICAgICAgICAgX3RoaXMuaGlkZU1lc3NhZ2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgX3RoaXMuc2V0TWVzc2FnZShfdGhpcy5tZXNzYWdlc1tfdGhpcy5zdGF0ZV0pO1xuXHQgICAgICAgICAgICBpZiAoX3RoaXMud2FzSW5hY3RpdmUgJiYgIV90aGlzLmlzRGlhbG9nT3BlbmVkKCkpIHtcblx0ICAgICAgICAgICAgICBfdGhpcy5zZXRJbmFjdGl2ZSh0cnVlKTtcblx0ICAgICAgICAgICAgICBfdGhpcy53YXNJbmFjdGl2ZSA9IHVuZGVmaW5lZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuc3Vic2NyaXB0aW9uLmNoYW5nZWQnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgIF90aGlzLnNldFN0YXRlKGUuZGV0YWlsID8gJ3N1YnNjcmliZWQnIDogJ3Vuc3Vic2NyaWJlZCcpO1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuYWN0aW9ucy53ZWxjb21lbm90aWZpY2F0aW9uc2VudCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgX3RoaXMuZGlzcGxheU1lc3NhZ2UoXCJUaGFua3MgZm9yIHN1YnNjcmliaW5nIVwiLCAyNTAwKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIF90aGlzLnNldEluYWN0aXZlKHRydWUpO1xuXHQgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICBfbG9nbGV2ZWwyLmRlZmF1bHQuZXJyb3IoZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhCZWxsLCBbe1xuXHQgICAgICBrZXk6ICdjcmVhdGUnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuXHQgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXHRcblx0ICAgICAgICBpZiAoISgwLCBfdXRpbHMuaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCkoKSkgcmV0dXJuO1xuXHRcblx0ICAgICAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGJlbGxcblx0ICAgICAgICBpZiAodGhpcy5jb250YWluZXIpIHtcblx0ICAgICAgICAgICgwLCBfdXRpbHMucmVtb3ZlRG9tRWxlbWVudCkoJ29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lcicpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgd2luZG93LmFkZERvbUVsZW1lbnQgPSBfdXRpbHMuYWRkRG9tRWxlbWVudDtcblx0ICAgICAgICAvLyBJbnNlcnQgdGhlIGJlbGwgY29udGFpbmVyXG5cdCAgICAgICAgKDAsIF91dGlscy5hZGREb21FbGVtZW50KSgnYm9keScsICdiZWZvcmVlbmQnLCAnPGRpdiBpZD1cIm9uZXNpZ25hbC1iZWxsLWNvbnRhaW5lclwiIGNsYXNzPVwib25lc2lnbmFsLWJlbGwtY29udGFpbmVyIG9uZXNpZ25hbC1yZXNldFwiPjwvZGl2PicpO1xuXHQgICAgICAgIC8vIEluc2VydCB0aGUgYmVsbCBsYXVuY2hlclxuXHQgICAgICAgICgwLCBfdXRpbHMuYWRkRG9tRWxlbWVudCkodGhpcy5jb250YWluZXIsICdiZWZvcmVlbmQnLCAnPGRpdiBpZD1cIm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyXCIgY2xhc3M9XCJvbmVzaWduYWwtYmVsbC1sYXVuY2hlclwiPjwvZGl2PicpO1xuXHQgICAgICAgIC8vIEluc2VydCB0aGUgYmVsbCBsYXVuY2hlciBidXR0b25cblx0ICAgICAgICAoMCwgX3V0aWxzLmFkZERvbUVsZW1lbnQpKHRoaXMubGF1bmNoZXIsICdiZWZvcmVlbmQnLCAnPGRpdiBjbGFzcz1cIm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvblwiPjwvZGl2PicpO1xuXHQgICAgICAgIC8vIEluc2VydCB0aGUgYmVsbCBsYXVuY2hlciBiYWRnZVxuXHQgICAgICAgICgwLCBfdXRpbHMuYWRkRG9tRWxlbWVudCkodGhpcy5sYXVuY2hlciwgJ2JlZm9yZWVuZCcsICc8ZGl2IGNsYXNzPVwib25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2VcIj48L2Rpdj4nKTtcblx0ICAgICAgICAvLyBJbnNlcnQgdGhlIGJlbGwgbGF1bmNoZXIgbWVzc2FnZVxuXHQgICAgICAgICgwLCBfdXRpbHMuYWRkRG9tRWxlbWVudCkodGhpcy5sYXVuY2hlciwgJ2JlZm9yZWVuZCcsICc8ZGl2IGNsYXNzPVwib25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZVwiPjwvZGl2PicpO1xuXHQgICAgICAgICgwLCBfdXRpbHMuYWRkRG9tRWxlbWVudCkodGhpcy5sYXVuY2hlck1lc3NhZ2UsICdiZWZvcmVlbmQnLCAnPGRpdiBjbGFzcz1cIm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UtYm9keVwiPjwvZGl2PicpO1xuXHQgICAgICAgIC8vIEluc2VydCB0aGUgYmVsbCBsYXVuY2hlciBkaWFsb2dcblx0ICAgICAgICAoMCwgX3V0aWxzLmFkZERvbUVsZW1lbnQpKHRoaXMubGF1bmNoZXIsICdiZWZvcmVlbmQnLCAnPGRpdiBjbGFzcz1cIm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ1wiPjwvZGl2PicpO1xuXHQgICAgICAgICgwLCBfdXRpbHMuYWRkRG9tRWxlbWVudCkodGhpcy5sYXVuY2hlckRpYWxvZywgJ2JlZm9yZWVuZCcsICc8ZGl2IGNsYXNzPVwib25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHlcIj48L2Rpdj4nKTtcblx0XG5cdCAgICAgICAgKDAsIF91dGlscy5hZGREb21FbGVtZW50KSh0aGlzLmxhdW5jaGVyRGlhbG9nQm9keSwgJ2JlZm9yZWVuZCcsICdcXG4gICAgICAgIDxoMT5NYW5hZ2UgU2l0ZSBOb3RpZmljYXRpb25zPC9oMT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLW5vdGlmaWNhdGlvblwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicHVzaC1ub3RpZmljYXRpb24taWNvblwiPjwvZGl2PlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicHVzaC1ub3RpZmljYXRpb24tdGV4dC1jb250YWluZXJcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHVzaC1ub3RpZmljYXRpb24tdGV4dC1zaG9ydFwiPjwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLW5vdGlmaWNhdGlvbi10ZXh0XCI+PC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1c2gtbm90aWZpY2F0aW9uLXRleHRcIj48L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhY3Rpb24tY29udGFpbmVyXCI+XFxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwiYWN0aW9uLWJ1dHRvblwiPlVuc3Vic2NyaWJlPC9idXR0b24+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkaXZpZGVyXCI+PC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwia2lja2JhY2tcIj5Qb3dlcmVkIGJ5IE9uZVNpZ25hbDwvZGl2PlxcbiAgICAgICAgJyk7XG5cdFxuXHQgICAgICAgIC8vIEluc3RhbGwgZXZlbnRzXG5cdCAgICAgICAgdGhpcy5sYXVuY2hlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgaXNIb3ZlcmluZ0RhdGEgPSBfbGltaXRTdG9yZTIuZGVmYXVsdC5nZXQoJ2JlbGwubGF1bmNoZXJCdXR0b24ubW91c2UnLCAnb3ZlcicpO1xuXHQgICAgICAgICAgaWYgKGlzSG92ZXJpbmdEYXRhID09PSB1bmRlZmluZWQgfHwgaXNIb3ZlcmluZ0RhdGFbaXNIb3ZlcmluZ0RhdGEubGVuZ3RoIC0gMV0gPT09ICdvdXQnKSB7XG5cdCAgICAgICAgICAgICgwLCBfZXZlbnRzLnRyaWdnZXJFdmVudCkoJ29uZXNpZ25hbC5iZWxsLmhvdmVyaW5nJyk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBfbGltaXRTdG9yZTIuZGVmYXVsdC5wdXQoJ2JlbGwubGF1bmNoZXJCdXR0b24ubW91c2UnLCAnb3ZlcicpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICB0aGlzLmxhdW5jaGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBfbGltaXRTdG9yZTIuZGVmYXVsdC5wdXQoJ2JlbGwubGF1bmNoZXJCdXR0b24ubW91c2UnLCAnb3V0Jyk7XG5cdCAgICAgICAgICAoMCwgX2V2ZW50cy50cmlnZ2VyRXZlbnQpKCdvbmVzaWduYWwuYmVsbC5ob3ZlcmVkJyk7XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIHRoaXMubGF1bmNoZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgKDAsIF91dGlscy5yZW1vdmVEb21FbGVtZW50KSgnLnB1bHNlLXJpbmcnKTtcblx0ICAgICAgICAgICgwLCBfdXRpbHMuYWRkRG9tRWxlbWVudCkoX3RoaXMyLmxhdW5jaGVyQnV0dG9uLCAnYmVmb3JlZW5kJywgJzxkaXYgY2xhc3M9XCJwdWxzZS1yaW5nXCI+PC9kaXY+Jyk7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKShfdGhpczIubGF1bmNoZXJCdXR0b24sICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24tYWN0aXZlJyk7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKShfdGhpczIubGF1bmNoZXJCYWRnZSwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLWFjdGl2ZScpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICB0aGlzLmxhdW5jaGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLnJlbW92ZUNzc0NsYXNzKShfdGhpczIubGF1bmNoZXJCdXR0b24sICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24tYWN0aXZlJyk7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLnJlbW92ZUNzc0NsYXNzKShfdGhpczIubGF1bmNoZXJCYWRnZSwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLWFjdGl2ZScpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICB0aGlzLmxhdW5jaGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgKDAsIF9ldmVudHMudHJpZ2dlckV2ZW50KSgnb25lc2lnbmFsLmJlbGwuYnV0dG9uLmNsaWNrJyk7XG5cdCAgICAgICAgICAoMCwgX2V2ZW50cy50cmlnZ2VyRXZlbnQpKCdvbmVzaWduYWwuYmVsbC5jbGljaycpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAvLyBBZGQgdmlzdWFsIGVsZW1lbnRzXG5cdCAgICAgICAgKDAsIF91dGlscy5hZGREb21FbGVtZW50KSh0aGlzLmxhdW5jaGVyQnV0dG9uLCAnYmVmb3JlRW5kJywgbG9nb1N2Zyk7XG5cdFxuXHQgICAgICAgIC8vIEFkZCBkZWZhdWx0IGNsYXNzZXNcblx0ICAgICAgICB0aGlzLnNldFNpemUodGhpcy5vcHRpb25zLnNpemUpO1xuXHRcblx0ICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAnYm90dG9tLWxlZnQnKSB7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKSh0aGlzLmNvbnRhaW5lciwgJ29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci1ib3R0b20tbGVmdCcpO1xuXHQgICAgICAgICAgKDAsIF91dGlscy5hZGRDc3NDbGFzcykodGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Jyk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20tcmlnaHQnKSB7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKSh0aGlzLmNvbnRhaW5lciwgJ29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci1ib3R0b20tcmlnaHQnKTtcblx0ICAgICAgICAgICgwLCBfdXRpbHMuYWRkQ3NzQ2xhc3MpKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQnKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIE9uZVNpZ25hbCBiZWxsIHBvc2l0aW9uICcgKyB0aGlzLm9wdGlvbnMucG9zaXRpb24pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50aGVtZSA9PT0gJ2RlZmF1bHQnKSB7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKSh0aGlzLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtZGVmYXVsdCcpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnRoZW1lID09PSAnaW52ZXJzZScpIHtcblx0ICAgICAgICAgICgwLCBfdXRpbHMuYWRkQ3NzQ2xhc3MpKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1pbnZlcnNlJyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBPbmVTaWduYWwgYmVsbCB0aGVtZSAnICsgdGhpcy5vcHRpb25zLnRoZW1lKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIE9uZVNpZ25hbC5pc1B1c2hOb3RpZmljYXRpb25zRW5hYmxlZChmdW5jdGlvbiAoaXNQdXNoRW5hYmxlZCkge1xuXHQgICAgICAgICAgaWYgKGlzUHVzaEVuYWJsZWQpIHtcblx0ICAgICAgICAgICAgY29uc29sZS5sb2coJ2lzUHVzaEVuYWJsZWQnLCBpc1B1c2hFbmFibGVkKTtcblx0ICAgICAgICAgICAgdmFyIHByb21pc2UgPSBfdGhpczIuc2V0SW5hY3RpdmUodHJ1ZSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpOyAvLyBEbyBub3RoaW5nLCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGV4ZWN1dGVzIGltbWVkaWF0ZWx5XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgX3RoaXMyLl9zY2hlZHVsZUV2ZW50KF90aGlzMi5vcHRpb25zLnNob3dMYXVuY2hlckFmdGVyLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgX3RoaXMyLnNob3dMYXVuY2hlcigpO1xuXHQgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9zY2hlZHVsZUV2ZW50KF90aGlzMi5vcHRpb25zLnNob3dCYWRnZUFmdGVyLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMucHJlbm90aWZ5KSB7XG5cdCAgICAgICAgICAgICAgICAgIGlmICghaXNQdXNoRW5hYmxlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMi5lbnF1ZXVlTWVzc2FnZSgnQ2xpY2sgdG8gc3Vic2NyaWJlIHRvIG5vdGlmaWNhdGlvbnMnKTtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIuc2hvd0JhZGdlKCk7XG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIF90aGlzMi5pbml0aWFsaXplZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ19zY2hlZHVsZUV2ZW50Jyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zY2hlZHVsZUV2ZW50KG1zSW5GdXR1cmUsIHRhc2spIHtcblx0ICAgICAgICBpZiAodHlwZW9mIHRhc2sgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignVGFzayB0byBiZSBzY2hlZHVsZWQgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuXHQgICAgICAgIGlmIChtc0luRnV0dXJlIDw9IDApIHtcblx0ICAgICAgICAgIHRhc2soKTtcblx0ICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0YXNrKCk7XG5cdCAgICAgICAgICAgIHJlc29sdmUoKTtcblx0ICAgICAgICAgIH0sIG1zSW5GdXR1cmUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvKipcblx0ICAgICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBzdGF0ZSB0byB0aGUgY29ycmVjdCBuZXcgY3VycmVudCBzdGF0ZS4gUmV0dXJucyBhIHByb21pc2UuXG5cdCAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAndXBkYXRlU3RhdGUnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlU3RhdGUoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cdFxuXHQgICAgICAgIE9uZVNpZ25hbC5pc1B1c2hOb3RpZmljYXRpb25zRW5hYmxlZChmdW5jdGlvbiAoaXNFbmFibGVkKSB7XG5cdCAgICAgICAgICBfdGhpczMuc2V0U3RhdGUoaXNFbmFibGVkID8gJ3N1YnNjcmliZWQnIDogJ3Vuc3Vic2NyaWJlZCcpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICAvKipcblx0ICAgICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBzdGF0ZSB0byB0aGUgc3BlY2lmaWVkIG5ldyBzdGF0ZS5cblx0ICAgICAgICogQHBhcmFtIG5ld1N0YXRlIE9uZSBvZiBbJ3N1YnNjcmliZWQnLCAndW5zdWJzY3JpYmVkJ10uXG5cdCAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnc2V0U3RhdGUnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3RhdGUobmV3U3RhdGUpIHtcblx0ICAgICAgICBpZiAodGhpcy5zdGF0ZXMuaGFzT3duUHJvcGVydHkobmV3U3RhdGUpKSB7XG5cdCAgICAgICAgICB2YXIgbGFzdFN0YXRlID0gdGhpcy5zdGF0ZTtcblx0ICAgICAgICAgIHRoaXMuc3RhdGUgPSBuZXdTdGF0ZTtcblx0ICAgICAgICAgIGlmIChsYXN0U3RhdGUgIT09IG5ld1N0YXRlKSB7XG5cdCAgICAgICAgICAgICgwLCBfZXZlbnRzLnRyaWdnZXJFdmVudCkoJ29uZXNpZ25hbC5iZWxsLnN0YXRlLmNoYW5nZWQnLCB7IGZyb206IGxhc3RTdGF0ZSwgdG86IG5ld1N0YXRlIH0pO1xuXHQgICAgICAgICAgICAvLyBVcGRhdGUgYW55dGhpbmcgdGhhdCBzaG91bGQgYmUgY2hhbmdlZCBoZXJlIGluIHRoZSBuZXcgc3RhdGVcblx0ICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAvLyBVcGRhdGUgYW55dGhpbmcgdGhhdCBzaG91bGQgYmUgcmVzZXQgdG8gdGhlIHNhbWUgc3RhdGVcblx0ICAgICAgICAgIHRoaXMuc2V0TWVzc2FnZSh0aGlzLm1lc3NhZ2VzW25ld1N0YXRlXSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcignQ2Fubm90IHVwZGF0ZSB0byBpbnZhbGlkIG5ldyBzdGF0ZScsIG5ld1N0YXRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnZW5xdWV1ZU1lc3NhZ2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gZW5xdWV1ZU1lc3NhZ2UobWVzc2FnZSkge1xuXHQgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXHRcblx0ICAgICAgICB2YXIgbm90aWZ5ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBhcmd1bWVudHNbMV07XG5cdFxuXHQgICAgICAgIHRoaXMubWVzc2FnZXMucXVldWVkLnB1c2gobWVzc2FnZSk7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNCYWRnZU9wZW4oKSkge1xuXHQgICAgICAgICAgdGhpcy5oaWRlQmFkZ2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgX3RoaXM0LmluY3JlbWVudEJhZGdlKCk7XG5cdCAgICAgICAgICAgIF90aGlzNC5zaG93QmFkZ2UoKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0aGlzLmluY3JlbWVudEJhZGdlKCk7XG5cdCAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc28gdGhlIGJhZGdlIGRvZXNuJ3QgaW1tZWRpYXRlbHkgcmVuZGVyXG5cdCAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuXHQgICAgICAgICAgICB0aGlzLnNob3dCYWRnZSgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdkZXF1ZXVlTWVzc2FnZScsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXF1ZXVlTWVzc2FnZShtZXNzYWdlKSB7XG5cdCAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cdFxuXHQgICAgICAgIHZhciBkZXF1ZXVlZE1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzLnF1ZXVlZC5wb3AobWVzc2FnZSk7XG5cdCAgICAgICAgaWYgKHRoaXMuaXNCYWRnZU9wZW4oKSkge1xuXHQgICAgICAgICAgdGhpcy5oaWRlQmFkZ2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgX3RoaXM1LmRlY3JlbWVudEJhZGdlKCk7XG5cdCAgICAgICAgICAgIF90aGlzNS5zaG93QmFkZ2UoKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgbmV3QmFkZ2VOdW1iZXIgPSB0aGlzLmRlY3JlbWVudEJhZGdlKCk7XG5cdCAgICAgICAgICBpZiAobmV3QmFkZ2VOdW1iZXIgPD0gMCkge1xuXHQgICAgICAgICAgICB0aGlzLmhpZGVCYWRnZSgpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZGVxdWV1ZWRNZXNzYWdlO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ3Nob3dEaWFsb2cnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0RpYWxvZygpIHtcblx0ICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblx0XG5cdCAgICAgICAgKDAsIF91dGlscy5hZGRDc3NDbGFzcykodGhpcy5sYXVuY2hlckRpYWxvZywgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZy1vcGVuZWQnKTtcblx0ICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgKDAsIF91dGlscy5vbmNlKShfdGhpczYubGF1bmNoZXJEaWFsb2csICd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpczYubGF1bmNoZXJEaWFsb2cpIHtcblx0ICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdoaWRlRGlhbG9nJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVEaWFsb2coKSB7XG5cdCAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cdFxuXHQgICAgICAgICgwLCBfdXRpbHMucmVtb3ZlQ3NzQ2xhc3MpKHRoaXMubGF1bmNoZXJEaWFsb2csICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctb3BlbmVkJyk7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICgwLCBfdXRpbHMub25jZSkoX3RoaXM3LmxhdW5jaGVyRGlhbG9nLCAndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXM3LmxhdW5jaGVyRGlhbG9nKSB7XG5cdCAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0ICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnaXNEaWFsb2dPcGVuZWQnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNEaWFsb2dPcGVuZWQoKSB7XG5cdCAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctb3BlbmVkJyk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnc2hvd0xhdW5jaGVyJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dMYXVuY2hlcigpIHtcblx0ICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKSh0aGlzLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYWN0aXZlJyk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnaGlkZUxhdW5jaGVyJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVMYXVuY2hlcigpIHtcblx0ICAgICAgICAoMCwgX3V0aWxzLnJlbW92ZUNzc0NsYXNzKSh0aGlzLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYWN0aXZlJyk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnc2V0TWVzc2FnZScsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNZXNzYWdlKG1lc3NhZ2UpIHtcblx0ICAgICAgICB0aGlzLmxhdW5jaGVyTWVzc2FnZUJvZHkuaW5uZXJIVE1MID0gbWVzc2FnZTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdzaG93TWVzc2FnZScsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93TWVzc2FnZSgpIHtcblx0ICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKSh0aGlzLmxhdW5jaGVyTWVzc2FnZSwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2Utb3BlbmVkJyk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnaGlkZU1lc3NhZ2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZU1lc3NhZ2UoKSB7XG5cdCAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cdFxuXHQgICAgICAgICgwLCBfdXRpbHMucmVtb3ZlQ3NzQ2xhc3MpKHRoaXMubGF1bmNoZXJNZXNzYWdlLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1vcGVuZWQnKTtcblx0ICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgKDAsIF91dGlscy5vbmNlKShfdGhpczgubGF1bmNoZXJNZXNzYWdlLCAndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXM4LmxhdW5jaGVyTWVzc2FnZSkge1xuXHQgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2lzTWVzc2FnZU9wZW5lZCcsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc01lc3NhZ2VPcGVuZWQoKSB7XG5cdCAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlLW9wZW5lZCcpO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2Rpc3BsYXlNZXNzYWdlJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BsYXlNZXNzYWdlKGNvbnRlbnQpIHtcblx0ICAgICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblx0XG5cdCAgICAgICAgdmFyIGhpZGVBZnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IDAgOiBhcmd1bWVudHNbMV07XG5cdFxuXHQgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5pbmZvKCdEaXNwbGF5aW5nIG1lc3NhZ2UuJyk7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgIGlmIChfdGhpczkuaXNNZXNzYWdlT3BlbmVkKCkpIHtcblx0ICAgICAgICAgICAgX3RoaXM5LmhpZGVNZXNzYWdlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgX3RoaXM5LnNldE1lc3NhZ2UoY29udGVudCk7XG5cdCAgICAgICAgICAgICAgX3RoaXM5LnNob3dNZXNzYWdlKCk7XG5cdCAgICAgICAgICAgICAgaWYgKGhpZGVBZnRlcikge1xuXHQgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgIF90aGlzOS5oaWRlTWVzc2FnZSgpO1xuXHQgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuXHQgICAgICAgICAgICAgICAgfSwgaGlkZUFmdGVyKTtcblx0ICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIF90aGlzOS5zZXRNZXNzYWdlKGNvbnRlbnQpO1xuXHQgICAgICAgICAgICBfdGhpczkuc2hvd01lc3NhZ2UoKTtcblx0ICAgICAgICAgICAgaWYgKGhpZGVBZnRlcikge1xuXHQgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgX3RoaXM5LmhpZGVNZXNzYWdlKCk7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuXHQgICAgICAgICAgICAgIH0sIGhpZGVBZnRlcik7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ3NldEJhZGdlJyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJhZGdlKGNvbnRlbnQpIHtcblx0ICAgICAgICB0aGlzLmxhdW5jaGVyQmFkZ2UuaW5uZXJIVE1MID0gY29udGVudDtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdzaG93QmFkZ2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0JhZGdlKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmJhZGdlSGFzQ29udGVudCgpKSB7XG5cdCAgICAgICAgICAoMCwgX3V0aWxzLmFkZENzc0NsYXNzKSh0aGlzLmxhdW5jaGVyQmFkZ2UsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZS1vcGVuZWQnKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnaXNCYWRnZU9wZW4nLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNCYWRnZU9wZW4oKSB7XG5cdCAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1iYWRnZS1vcGVuZWQnKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdiYWRnZUhhc0NvbnRlbnQnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gYmFkZ2VIYXNDb250ZW50KCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmxhdW5jaGVyQmFkZ2UuaW5uZXJIVE1MLmxlbmd0aCA+IDA7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnZ2V0QmFkZ2VDb250ZW50Jyxcblx0ICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJhZGdlQ29udGVudCgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5sYXVuY2hlckJhZGdlLmlubmVySFRNTDtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdpbmNyZW1lbnRCYWRnZScsXG5cdCAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbmNyZW1lbnRCYWRnZSgpIHtcblx0ICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuZ2V0QmFkZ2VDb250ZW50KCk7XG5cdCAgICAgICAgLy8gSWYgaXQgSVMgYSBudW1iZXIgKGlzIG5vdCBub3QgYSBudW1iZXIpXG5cdCAgICAgICAgaWYgKCFpc05hTihjb250ZW50KSkge1xuXHQgICAgICAgICAgdmFyIGJhZGdlTnVtYmVyID0gK2NvbnRlbnQ7IC8vIENvZXJjZSB0byBpbnRcblx0ICAgICAgICAgIGJhZGdlTnVtYmVyICs9IDE7XG5cdCAgICAgICAgICB0aGlzLnNldEJhZGdlKGJhZGdlTnVtYmVyKTtcblx0ICAgICAgICAgIHJldHVybiBiYWRnZU51bWJlcjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnZGVjcmVtZW50QmFkZ2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVjcmVtZW50QmFkZ2UoKSB7XG5cdCAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldEJhZGdlQ29udGVudCgpO1xuXHQgICAgICAgIC8vIElmIGl0IElTIGEgbnVtYmVyIChpcyBub3Qgbm90IGEgbnVtYmVyKVxuXHQgICAgICAgIGlmICghaXNOYU4oY29udGVudCkpIHtcblx0ICAgICAgICAgIHZhciBiYWRnZU51bWJlciA9ICtjb250ZW50OyAvLyBDb2VyY2UgdG8gaW50XG5cdCAgICAgICAgICBiYWRnZU51bWJlciAtPSAxO1xuXHQgICAgICAgICAgaWYgKGJhZGdlTnVtYmVyID4gMCkgdGhpcy5zZXRCYWRnZShiYWRnZU51bWJlcik7ZWxzZSB0aGlzLnNldEJhZGdlKFwiXCIpO1xuXHQgICAgICAgICAgcmV0dXJuIGJhZGdlTnVtYmVyO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdoaWRlQmFkZ2UnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZUJhZGdlKCkge1xuXHQgICAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblx0XG5cdCAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICgwLCBfdXRpbHMucmVtb3ZlQ3NzQ2xhc3MpKF90aGlzMTAubGF1bmNoZXJCYWRnZSwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLW9wZW5lZCcpO1xuXHQgICAgICAgICAgKDAsIF91dGlscy5vbmNlKShfdGhpczEwLmxhdW5jaGVyQmFkZ2UsICd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpczEwLmxhdW5jaGVyQmFkZ2UpIHtcblx0ICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgcmVqZWN0KGUpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2lzSW5hY3RpdmUnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNJbmFjdGl2ZSgpIHtcblx0ICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWluYWN0aXZlJyk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnc2V0SW5hY3RpdmUnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SW5hY3RpdmUoaXNJbmFjdGl2ZSkge1xuXHQgICAgICAgIHZhciBfdGhpczExID0gdGhpcztcblx0XG5cdCAgICAgICAgaWYgKGlzSW5hY3RpdmUpIHtcblx0ICAgICAgICAgIHRoaXMuaGlkZU1lc3NhZ2UoKTtcblx0ICAgICAgICAgIGlmICh0aGlzLmJhZGdlSGFzQ29udGVudCgpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmhpZGVCYWRnZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICgwLCBfdXRpbHMuYWRkQ3NzQ2xhc3MpKF90aGlzMTEubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1pbmFjdGl2ZScpO1xuXHQgICAgICAgICAgICAgIF90aGlzMTEuc2V0U2l6ZSgnc21hbGwnKTs7XG5cdCAgICAgICAgICAgICAgdmFyIGxhdW5jaGVyID0gX3RoaXMxMS5sYXVuY2hlcjtcblx0ICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgLy8gT25jZSB0aGUgbGF1bmNoZXIgaGFzIGZpbmlzaGVkIHNocmlua2luZyBkb3duXG5cdCAgICAgICAgICAgICAgICAoMCwgX3V0aWxzLm9uY2UpKF90aGlzMTEubGF1bmNoZXIsICd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpczExLmxhdW5jaGVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlKTtcblx0ICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgIF90aGlzMTEuc2hvd0JhZGdlKCk7XG5cdCAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgX2xvZ2xldmVsMi5kZWZhdWx0LmVycm9yKGUpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICgwLCBfdXRpbHMuYWRkQ3NzQ2xhc3MpKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1pbmFjdGl2ZScpO1xuXHQgICAgICAgICAgICB0aGlzLnNldFNpemUoJ3NtYWxsJyk7XG5cdCAgICAgICAgICAgIHZhciBsYXVuY2hlciA9IHRoaXMubGF1bmNoZXI7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgLy8gT25jZSB0aGUgbGF1bmNoZXIgaGFzIGZpbmlzaGVkIHNocmlua2luZyBkb3duXG5cdCAgICAgICAgICAgICAgKDAsIF91dGlscy5vbmNlKShfdGhpczExLmxhdW5jaGVyLCAndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzMTEubGF1bmNoZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBpZiAodGhpcy5iYWRnZUhhc0NvbnRlbnQoKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5oaWRlQmFkZ2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAoMCwgX3V0aWxzLnJlbW92ZUNzc0NsYXNzKShfdGhpczExLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItaW5hY3RpdmUnKTtcblx0ICAgICAgICAgICAgICBfdGhpczExLnNldFNpemUoX3RoaXMxMS5vcHRpb25zLnNpemUpO1xuXHQgICAgICAgICAgICAgIHZhciBsYXVuY2hlciA9IF90aGlzMTEubGF1bmNoZXI7XG5cdCAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIC8vIE9uY2UgdGhlIGxhdW5jaGVyIGhhcyBmaW5pc2hlZCBzaHJpbmtpbmcgZG93blxuXHQgICAgICAgICAgICAgICAgKDAsIF91dGlscy5vbmNlKShfdGhpczExLmxhdW5jaGVyLCAndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMxMS5sYXVuY2hlcikge1xuXHQgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZSk7XG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICBfdGhpczExLnNob3dCYWRnZSgpO1xuXHQgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICAgIF9sb2dsZXZlbDIuZGVmYXVsdC5lcnJvcihlKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAoMCwgX3V0aWxzLnJlbW92ZUNzc0NsYXNzKSh0aGlzLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItaW5hY3RpdmUnKTtcblx0ICAgICAgICAgICAgdGhpcy5zZXRTaXplKHRoaXMub3B0aW9ucy5zaXplKTtcblx0ICAgICAgICAgICAgdmFyIGxhdW5jaGVyID0gdGhpcy5sYXVuY2hlcjtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAvLyBPbmNlIHRoZSBsYXVuY2hlciBoYXMgZmluaXNoZWQgc2hyaW5raW5nIGRvd25cblx0ICAgICAgICAgICAgICAoMCwgX3V0aWxzLm9uY2UpKF90aGlzMTEubGF1bmNoZXIsICd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMxMS5sYXVuY2hlcikge1xuXHQgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ3NldFNpemUnLFxuXHQgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2l6ZShzaXplKSB7XG5cdCAgICAgICAgKDAsIF91dGlscy5yZW1vdmVDc3NDbGFzcykodGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtJyk7XG5cdCAgICAgICAgKDAsIF91dGlscy5yZW1vdmVDc3NDbGFzcykodGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kJyk7XG5cdCAgICAgICAgKDAsIF91dGlscy5yZW1vdmVDc3NDbGFzcykodGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnJyk7XG5cdCAgICAgICAgaWYgKHNpemUgPT09ICdzbWFsbCcpIHtcblx0ICAgICAgICAgICgwLCBfdXRpbHMuYWRkQ3NzQ2xhc3MpKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbScpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PT0gJ21lZGl1bScpIHtcblx0ICAgICAgICAgICgwLCBfdXRpbHMuYWRkQ3NzQ2xhc3MpKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCcpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PT0gJ2xhcmdlJykge1xuXHQgICAgICAgICAgKDAsIF91dGlscy5hZGRDc3NDbGFzcykodGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnJyk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBPbmVTaWduYWwgYmVsbCBzaXplICcgKyBzaXplKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnY29udGFpbmVyJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNvbmVzaWduYWwtYmVsbC1jb250YWluZXInKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdsYXVuY2hlcicsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjb25lc2lnbmFsLWJlbGwtbGF1bmNoZXInKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdsYXVuY2hlckJ1dHRvbicsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmxhdW5jaGVyLnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24nKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdsYXVuY2hlckJhZGdlJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubGF1bmNoZXIucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlJyk7XG5cdCAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAga2V5OiAnbGF1bmNoZXJNZXNzYWdlJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubGF1bmNoZXIucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UnKTtcblx0ICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICBrZXk6ICdsYXVuY2hlck1lc3NhZ2VCb2R5Jyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubGF1bmNoZXIucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UtYm9keScpO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2xhdW5jaGVyRGlhbG9nJyxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubGF1bmNoZXIucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZycpO1xuXHQgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgIGtleTogJ2xhdW5jaGVyRGlhbG9nQm9keScsXG5cdCAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmxhdW5jaGVyLnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keScpO1xuXHQgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEJlbGw7XG5cdCAgfSkoKTtcblx0XG5cdCAgbW9kdWxlLmV4cG9ydHMgPSBCZWxsO1xuXHR9XG5cbi8qKiovIH0sXG4vKiAxMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblx0XG5cdC8vIGxvYWQgdGhlIHN0eWxlc1xuXHR2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHRpZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblx0Ly8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxuXHR2YXIgdXBkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkoY29udGVudCwge30pO1xuXHRpZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcblx0Ly8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuXHRpZihmYWxzZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL2JlbGwuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vYmVsbC5zY3NzXCIpO1xuXHRcdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcblx0fVxuXG4vKioqLyB9LFxuLyogMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpKCk7XG5cdC8vIGltcG9ydHNcblx0XG5cdFxuXHQvLyBtb2R1bGVcblx0ZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxuKiBDbGVhblNsYXRlXFxuKiAgIGdpdGh1Yi5jb20vcHJlbWFzYWdhci9jbGVhbnNsYXRlXFxuKlxcbiovLm9uZXNpZ25hbC1yZXNldCwub25lc2lnbmFsLXJlc2V0IGEsLm9uZXNpZ25hbC1yZXNldCBhYmJyLC5vbmVzaWduYWwtcmVzZXQgYWNyb255bSwub25lc2lnbmFsLXJlc2V0IGFkZHJlc3MsLm9uZXNpZ25hbC1yZXNldCBhcHBsZXQsLm9uZXNpZ25hbC1yZXNldCBhcmVhLC5vbmVzaWduYWwtcmVzZXQgYXJ0aWNsZSwub25lc2lnbmFsLXJlc2V0IGFzaWRlLC5vbmVzaWduYWwtcmVzZXQgYXVkaW8sLm9uZXNpZ25hbC1yZXNldCBiLC5vbmVzaWduYWwtcmVzZXQgYmlnLC5vbmVzaWduYWwtcmVzZXQgYmxvY2txdW90ZSwub25lc2lnbmFsLXJlc2V0IGJ1dHRvbiwub25lc2lnbmFsLXJlc2V0IGNhbnZhcywub25lc2lnbmFsLXJlc2V0IGNhcHRpb24sLm9uZXNpZ25hbC1yZXNldCBjaXRlLC5vbmVzaWduYWwtcmVzZXQgY29kZSwub25lc2lnbmFsLXJlc2V0IGNvbCwub25lc2lnbmFsLXJlc2V0IGNvbGdyb3VwLC5vbmVzaWduYWwtcmVzZXQgZGF0YWxpc3QsLm9uZXNpZ25hbC1yZXNldCBkZCwub25lc2lnbmFsLXJlc2V0IGRlbCwub25lc2lnbmFsLXJlc2V0IGRmbiwub25lc2lnbmFsLXJlc2V0IGRpdiwub25lc2lnbmFsLXJlc2V0IGRsLC5vbmVzaWduYWwtcmVzZXQgZHQsLm9uZXNpZ25hbC1yZXNldCBlbSwub25lc2lnbmFsLXJlc2V0IGZpZWxkc2V0LC5vbmVzaWduYWwtcmVzZXQgZmlnY2FwdGlvbiwub25lc2lnbmFsLXJlc2V0IGZpZ3VyZSwub25lc2lnbmFsLXJlc2V0IGZvb3Rlciwub25lc2lnbmFsLXJlc2V0IGZvcm0sLm9uZXNpZ25hbC1yZXNldCBoMSwub25lc2lnbmFsLXJlc2V0IGgyLC5vbmVzaWduYWwtcmVzZXQgaDMsLm9uZXNpZ25hbC1yZXNldCBoNCwub25lc2lnbmFsLXJlc2V0IGg1LC5vbmVzaWduYWwtcmVzZXQgaDYsLm9uZXNpZ25hbC1yZXNldCBoZWFkZXIsLm9uZXNpZ25hbC1yZXNldCBociwub25lc2lnbmFsLXJlc2V0IGksLm9uZXNpZ25hbC1yZXNldCBpZnJhbWUsLm9uZXNpZ25hbC1yZXNldCBpbWcsLm9uZXNpZ25hbC1yZXNldCBpbnB1dCwub25lc2lnbmFsLXJlc2V0IGlucywub25lc2lnbmFsLXJlc2V0IGtiZCwub25lc2lnbmFsLXJlc2V0IGxhYmVsLC5vbmVzaWduYWwtcmVzZXQgbGVnZW5kLC5vbmVzaWduYWwtcmVzZXQgbGksLm9uZXNpZ25hbC1yZXNldCBtYWluLC5vbmVzaWduYWwtcmVzZXQgbWFwLC5vbmVzaWduYWwtcmVzZXQgbWFyaywub25lc2lnbmFsLXJlc2V0IG1lbnUsLm9uZXNpZ25hbC1yZXNldCBtZXRhLC5vbmVzaWduYWwtcmVzZXQgbmF2LC5vbmVzaWduYWwtcmVzZXQgb2JqZWN0LC5vbmVzaWduYWwtcmVzZXQgb2wsLm9uZXNpZ25hbC1yZXNldCBvcHRncm91cCwub25lc2lnbmFsLXJlc2V0IG9wdGlvbiwub25lc2lnbmFsLXJlc2V0IG91dHB1dCwub25lc2lnbmFsLXJlc2V0IHAsLm9uZXNpZ25hbC1yZXNldCBwcmUsLm9uZXNpZ25hbC1yZXNldCBwcm9ncmVzcywub25lc2lnbmFsLXJlc2V0IHEsLm9uZXNpZ25hbC1yZXNldCBzYW1wLC5vbmVzaWduYWwtcmVzZXQgc2VjdGlvbiwub25lc2lnbmFsLXJlc2V0IHNlbGVjdCwub25lc2lnbmFsLXJlc2V0IHNtYWxsLC5vbmVzaWduYWwtcmVzZXQgc3Bhbiwub25lc2lnbmFsLXJlc2V0IHN0cmlrZSwub25lc2lnbmFsLXJlc2V0IHN0cm9uZywub25lc2lnbmFsLXJlc2V0IHN1Yiwub25lc2lnbmFsLXJlc2V0IHN1bW1hcnksLm9uZXNpZ25hbC1yZXNldCBzdXAsLm9uZXNpZ25hbC1yZXNldCB0YWJsZSwub25lc2lnbmFsLXJlc2V0IHRib2R5LC5vbmVzaWduYWwtcmVzZXQgdGQsLm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYSwub25lc2lnbmFsLXJlc2V0IHRmb290LC5vbmVzaWduYWwtcmVzZXQgdGgsLm9uZXNpZ25hbC1yZXNldCB0aGVhZCwub25lc2lnbmFsLXJlc2V0IHRpbWUsLm9uZXNpZ25hbC1yZXNldCB0ciwub25lc2lnbmFsLXJlc2V0IHR0LC5vbmVzaWduYWwtcmVzZXQgdWwsLm9uZXNpZ25hbC1yZXNldCB2YXIsLm9uZXNpZ25hbC1yZXNldCB2aWRlb3tiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6c2Nyb2xsO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7YmFja2dyb3VuZC1pbWFnZTpub25lO2JhY2tncm91bmQtcG9zaXRpb246MCAwO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdDtib3JkZXItY29sb3I6IzAwMDtib3JkZXI6bWVkaXVtIG5vbmUgY3VycmVudENvbG9yO2JvdHRvbTphdXRvO2NsZWFyOm5vbmU7Y2xpcDphdXRvO2NvbG9yOmluaGVyaXQ7Y291bnRlci1pbmNyZW1lbnQ6bm9uZTtjb3VudGVyLXJlc2V0Om5vbmU7Y3Vyc29yOmF1dG87ZGlyZWN0aW9uOmluaGVyaXQ7ZGlzcGxheTppbmxpbmU7ZmxvYXQ6bm9uZTtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXZhcmlhbnQ6bm9ybWFsO2ZvbnQtd2VpZ2h0OmluaGVyaXQ7aGVpZ2h0OmF1dG87bGVmdDphdXRvO2xldHRlci1zcGFjaW5nOm5vcm1hbDtsaW5lLWhlaWdodDppbmhlcml0O2xpc3Qtc3R5bGUtdHlwZTppbmhlcml0O2xpc3Qtc3R5bGUtcG9zaXRpb246b3V0c2lkZTtsaXN0LXN0eWxlLWltYWdlOm5vbmU7bWFyZ2luOjA7bWF4LWhlaWdodDpub25lO21heC13aWR0aDpub25lO21pbi1oZWlnaHQ6MDttaW4td2lkdGg6MDtvcGFjaXR5OjE7b3V0bGluZTptZWRpdW0gbm9uZSBpbnZlcnQ7b3ZlcmZsb3c6dmlzaWJsZTtwYWRkaW5nOjA7cG9zaXRpb246c3RhdGljO3F1b3RlczpcXFwiXFxcIiBcXFwiXFxcIjtyaWdodDphdXRvO3RhYmxlLWxheW91dDphdXRvO3RleHQtYWxpZ246aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWluZGVudDowO3RleHQtdHJhbnNmb3JtOm5vbmU7dG9wOmF1dG87dW5pY29kZS1iaWRpOm5vcm1hbDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTt2aXNpYmlsaXR5OmluaGVyaXQ7d2hpdGUtc3BhY2U6bm9ybWFsO3dpZHRoOmF1dG87d29yZC1zcGFjaW5nOm5vcm1hbDt6LWluZGV4OmF1dG87YmFja2dyb3VuZC1vcmlnaW46cGFkZGluZy1ib3g7YmFja2dyb3VuZC1jbGlwOmJvcmRlci1ib3g7YmFja2dyb3VuZC1zaXplOmF1dG87LXdlYmtpdC1ib3JkZXItaW1hZ2U6bm9uZTstby1ib3JkZXItaW1hZ2U6bm9uZTtib3JkZXItaW1hZ2U6bm9uZTtib3JkZXItcmFkaXVzOjA7Ym94LXNoYWRvdzpub25lO2JveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1jb2x1bW4tY291bnQ6YXV0bzstbW96LWNvbHVtbi1jb3VudDphdXRvO2NvbHVtbi1jb3VudDphdXRvOy13ZWJraXQtY29sdW1uLWdhcDpub3JtYWw7LW1vei1jb2x1bW4tZ2FwOm5vcm1hbDtjb2x1bW4tZ2FwOm5vcm1hbDstd2Via2l0LWNvbHVtbi1ydWxlOm1lZGl1bSBub25lICMwMDA7LW1vei1jb2x1bW4tcnVsZTptZWRpdW0gbm9uZSAjMDAwO2NvbHVtbi1ydWxlOm1lZGl1bSBub25lICMwMDA7LXdlYmtpdC1jb2x1bW4tc3BhbjoxOy1tb3otY29sdW1uLXNwYW46MTtjb2x1bW4tc3BhbjoxOy13ZWJraXQtY29sdW1uLXdpZHRoOmF1dG87LW1vei1jb2x1bW4td2lkdGg6YXV0bztjb2x1bW4td2lkdGg6YXV0bztmb250LWZlYXR1cmUtc2V0dGluZ3M6bm9ybWFsO292ZXJmbG93LXg6dmlzaWJsZTtvdmVyZmxvdy15OnZpc2libGU7LXdlYmtpdC1oeXBoZW5zOm1hbnVhbDstbW96LWh5cGhlbnM6bWFudWFsO2h5cGhlbnM6bWFudWFsOy13ZWJraXQtcGVyc3BlY3RpdmU6bm9uZTstbXMtcGVyc3BlY3RpdmU6bm9uZTstby1wZXJzcGVjdGl2ZTpub25lO3BlcnNwZWN0aXZlOm5vbmU7LXdlYmtpdC1wZXJzcGVjdGl2ZS1vcmlnaW46NTAlIDUwJTstbXMtcGVyc3BlY3RpdmUtb3JpZ2luOjUwJSA1MCU7LW8tcGVyc3BlY3RpdmUtb3JpZ2luOjUwJSA1MCU7cGVyc3BlY3RpdmUtb3JpZ2luOjUwJSA1MCU7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGU7YmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlO3RleHQtc2hhZG93Om5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwcyBlYXNlIDBzO3RyYW5zaXRpb246YWxsIDBzIGVhc2UgMHM7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTstbXMtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmU7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7LW1zLXRyYW5zZm9ybS1vcmlnaW46NTAlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7LXdlYmtpdC10cmFuc2Zvcm0tc3R5bGU6ZmxhdDt0cmFuc2Zvcm0tc3R5bGU6ZmxhdDt3b3JkLWJyZWFrOm5vcm1hbH0ub25lc2lnbmFsLXJlc2V0LC5vbmVzaWduYWwtcmVzZXQgYWRkcmVzcywub25lc2lnbmFsLXJlc2V0IGFydGljbGUsLm9uZXNpZ25hbC1yZXNldCBhdWRpbywub25lc2lnbmFsLXJlc2V0IGJsb2NrcXVvdGUsLm9uZXNpZ25hbC1yZXNldCBjYXB0aW9uLC5vbmVzaWduYWwtcmVzZXQgY29sZ3JvdXAsLm9uZXNpZ25hbC1yZXNldCBkZCwub25lc2lnbmFsLXJlc2V0IGRpYWxvZywub25lc2lnbmFsLXJlc2V0IGRpdiwub25lc2lnbmFsLXJlc2V0IGRsLC5vbmVzaWduYWwtcmVzZXQgZHQsLm9uZXNpZ25hbC1yZXNldCBmaWVsZHNldCwub25lc2lnbmFsLXJlc2V0IGZpZ3VyZSwub25lc2lnbmFsLXJlc2V0IGZvb3Rlciwub25lc2lnbmFsLXJlc2V0IGZvcm0sLm9uZXNpZ25hbC1yZXNldCBoMSwub25lc2lnbmFsLXJlc2V0IGgyLC5vbmVzaWduYWwtcmVzZXQgaDMsLm9uZXNpZ25hbC1yZXNldCBoNCwub25lc2lnbmFsLXJlc2V0IGg1LC5vbmVzaWduYWwtcmVzZXQgaDYsLm9uZXNpZ25hbC1yZXNldCBoZWFkZXIsLm9uZXNpZ25hbC1yZXNldCBoZ3JvdXAsLm9uZXNpZ25hbC1yZXNldCBociwub25lc2lnbmFsLXJlc2V0IG1haW4sLm9uZXNpZ25hbC1yZXNldCBtZW51LC5vbmVzaWduYWwtcmVzZXQgbmF2LC5vbmVzaWduYWwtcmVzZXQgb2wsLm9uZXNpZ25hbC1yZXNldCBvcHRpb24sLm9uZXNpZ25hbC1yZXNldCBwLC5vbmVzaWduYWwtcmVzZXQgcHJlLC5vbmVzaWduYWwtcmVzZXQgcHJvZ3Jlc3MsLm9uZXNpZ25hbC1yZXNldCBzZWN0aW9uLC5vbmVzaWduYWwtcmVzZXQgc3VtbWFyeSwub25lc2lnbmFsLXJlc2V0IHVsLC5vbmVzaWduYWwtcmVzZXQgdmlkZW97ZGlzcGxheTpibG9ja30ub25lc2lnbmFsLXJlc2V0IGgxLC5vbmVzaWduYWwtcmVzZXQgaDIsLm9uZXNpZ25hbC1yZXNldCBoMywub25lc2lnbmFsLXJlc2V0IGg0LC5vbmVzaWduYWwtcmVzZXQgaDUsLm9uZXNpZ25hbC1yZXNldCBoNntmb250LXdlaWdodDo3MDB9Lm9uZXNpZ25hbC1yZXNldCBoMXtmb250LXNpemU6MmVtO3BhZGRpbmc6LjY3ZW0gMH0ub25lc2lnbmFsLXJlc2V0IGgye2ZvbnQtc2l6ZToxLjVlbTtwYWRkaW5nOi44M2VtIDB9Lm9uZXNpZ25hbC1yZXNldCBoM3tmb250LXNpemU6MS4xN2VtO3BhZGRpbmc6LjgzZW0gMH0ub25lc2lnbmFsLXJlc2V0IGg0e2ZvbnQtc2l6ZToxZW19Lm9uZXNpZ25hbC1yZXNldCBoNXtmb250LXNpemU6LjgzZW19Lm9uZXNpZ25hbC1yZXNldCBwe21hcmdpbjoxZW0gMH0ub25lc2lnbmFsLXJlc2V0IHRhYmxle2Rpc3BsYXk6dGFibGV9Lm9uZXNpZ25hbC1yZXNldCB0aGVhZHtkaXNwbGF5OnRhYmxlLWhlYWRlci1ncm91cH0ub25lc2lnbmFsLXJlc2V0IHRib2R5e2Rpc3BsYXk6dGFibGUtcm93LWdyb3VwfS5vbmVzaWduYWwtcmVzZXQgdGZvb3R7ZGlzcGxheTp0YWJsZS1mb290ZXItZ3JvdXB9Lm9uZXNpZ25hbC1yZXNldCB0cntkaXNwbGF5OnRhYmxlLXJvd30ub25lc2lnbmFsLXJlc2V0IHRkLC5vbmVzaWduYWwtcmVzZXQgdGh7ZGlzcGxheTp0YWJsZS1jZWxsO3BhZGRpbmc6MnB4fS5vbmVzaWduYWwtcmVzZXQgb2wsLm9uZXNpZ25hbC1yZXNldCB1bHttYXJnaW46MWVtIDB9Lm9uZXNpZ25hbC1yZXNldCBvbCBsaSwub25lc2lnbmFsLXJlc2V0IG9sIG9sIGxpLC5vbmVzaWduYWwtcmVzZXQgb2wgb2wgb2wgbGksLm9uZXNpZ25hbC1yZXNldCBvbCBvbCB1bCBsaSwub25lc2lnbmFsLXJlc2V0IG9sIHVsIHVsIGxpLC5vbmVzaWduYWwtcmVzZXQgdWwgbGksLm9uZXNpZ25hbC1yZXNldCB1bCBvbCBvbCBsaSwub25lc2lnbmFsLXJlc2V0IHVsIHVsIGxpLC5vbmVzaWduYWwtcmVzZXQgdWwgdWwgb2wgbGksLm9uZXNpZ25hbC1yZXNldCB1bCB1bCB1bCBsaXtsaXN0LXN0eWxlLXBvc2l0aW9uOmluc2lkZTttYXJnaW4tdG9wOi4wOGVtfS5vbmVzaWduYWwtcmVzZXQgb2wgb2wsLm9uZXNpZ25hbC1yZXNldCBvbCBvbCBvbCwub25lc2lnbmFsLXJlc2V0IG9sIG9sIHVsLC5vbmVzaWduYWwtcmVzZXQgb2wgdWwsLm9uZXNpZ25hbC1yZXNldCBvbCB1bCB1bCwub25lc2lnbmFsLXJlc2V0IHVsIG9sLC5vbmVzaWduYWwtcmVzZXQgdWwgb2wgb2wsLm9uZXNpZ25hbC1yZXNldCB1bCB1bCwub25lc2lnbmFsLXJlc2V0IHVsIHVsIG9sLC5vbmVzaWduYWwtcmVzZXQgdWwgdWwgdWx7cGFkZGluZy1sZWZ0OjQwcHg7bWFyZ2luOjB9Lm9uZXNpZ25hbC1yZXNldCBuYXYgb2wsLm9uZXNpZ25hbC1yZXNldCBuYXYgdWx7bGlzdC1zdHlsZS10eXBlOm5vbmV9Lm9uZXNpZ25hbC1yZXNldCBtZW51LC5vbmVzaWduYWwtcmVzZXQgdWx7bGlzdC1zdHlsZS10eXBlOmRpc2N9Lm9uZXNpZ25hbC1yZXNldCBvbHtsaXN0LXN0eWxlLXR5cGU6ZGVjaW1hbH0ub25lc2lnbmFsLXJlc2V0IG1lbnUgbWVudSwub25lc2lnbmFsLXJlc2V0IG1lbnUgdWwsLm9uZXNpZ25hbC1yZXNldCBvbCBtZW51LC5vbmVzaWduYWwtcmVzZXQgb2wgdWwsLm9uZXNpZ25hbC1yZXNldCB1bCBtZW51LC5vbmVzaWduYWwtcmVzZXQgdWwgdWx7bGlzdC1zdHlsZS10eXBlOmNpcmNsZX0ub25lc2lnbmFsLXJlc2V0IG1lbnUgbWVudSBtZW51LC5vbmVzaWduYWwtcmVzZXQgbWVudSBtZW51IHVsLC5vbmVzaWduYWwtcmVzZXQgbWVudSBvbCBtZW51LC5vbmVzaWduYWwtcmVzZXQgbWVudSBvbCB1bCwub25lc2lnbmFsLXJlc2V0IG1lbnUgdWwgbWVudSwub25lc2lnbmFsLXJlc2V0IG1lbnUgdWwgdWwsLm9uZXNpZ25hbC1yZXNldCBvbCBtZW51IG1lbnUsLm9uZXNpZ25hbC1yZXNldCBvbCBtZW51IHVsLC5vbmVzaWduYWwtcmVzZXQgb2wgb2wgbWVudSwub25lc2lnbmFsLXJlc2V0IG9sIG9sIHVsLC5vbmVzaWduYWwtcmVzZXQgb2wgdWwgbWVudSwub25lc2lnbmFsLXJlc2V0IG9sIHVsIHVsLC5vbmVzaWduYWwtcmVzZXQgdWwgbWVudSBtZW51LC5vbmVzaWduYWwtcmVzZXQgdWwgbWVudSB1bCwub25lc2lnbmFsLXJlc2V0IHVsIG9sIG1lbnUsLm9uZXNpZ25hbC1yZXNldCB1bCBvbCB1bCwub25lc2lnbmFsLXJlc2V0IHVsIHVsIG1lbnUsLm9uZXNpZ25hbC1yZXNldCB1bCB1bCB1bHtsaXN0LXN0eWxlLXR5cGU6c3F1YXJlfS5vbmVzaWduYWwtcmVzZXQgbGl7ZGlzcGxheTpsaXN0LWl0ZW07bWluLWhlaWdodDphdXRvO21pbi13aWR0aDphdXRvO3BhZGRpbmctbGVmdDoyMHB4fS5vbmVzaWduYWwtcmVzZXQgc3Ryb25ne2ZvbnQtd2VpZ2h0OjcwMH0ub25lc2lnbmFsLXJlc2V0IGVte2ZvbnQtc3R5bGU6aXRhbGljfS5vbmVzaWduYWwtcmVzZXQgY29kZSwub25lc2lnbmFsLXJlc2V0IGtiZCwub25lc2lnbmFsLXJlc2V0IHByZSwub25lc2lnbmFsLXJlc2V0IHNhbXB7Zm9udC1mYW1pbHk6bW9ub3NwYWNlfS5vbmVzaWduYWwtcmVzZXQgYXtjb2xvcjpibHVlO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9Lm9uZXNpZ25hbC1yZXNldCBhOnZpc2l0ZWR7Y29sb3I6IzUyOX0ub25lc2lnbmFsLXJlc2V0IGEsLm9uZXNpZ25hbC1yZXNldCBhICosLm9uZXNpZ25hbC1yZXNldCBpbnB1dFt0eXBlPWNoZWNrYm94XSwub25lc2lnbmFsLXJlc2V0IGlucHV0W3R5cGU9cmFkaW9dLC5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1zdWJtaXRdLC5vbmVzaWduYWwtcmVzZXQgc2VsZWN0e2N1cnNvcjpwb2ludGVyfS5vbmVzaWduYWwtcmVzZXQgYnV0dG9uLC5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1zdWJtaXRde3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MnB4IDZweCAzcHg7Ym9yZGVyLXJhZGl1czo0cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC1mYW1pbHk6YXJpYWwsaGVsdmV0aWNhLHNhbnMtc2VyaWY7Zm9udC1zaXplOnNtYWxsOy13ZWJraXQtYXBwZWFyYW5jZTpwdXNoLWJ1dHRvbjtjb2xvcjpidXR0b250ZXh0O2JvcmRlcjoxcHggc29saWQgI2E2YTZhNjtiYWNrZ3JvdW5kOiNkM2QzZDM7YmFja2dyb3VuZDojZmZmO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsbGVmdCB0b3AsbGVmdCBib3R0b20sY29sb3Itc3RvcCgwLCNmZmYpLGNvbG9yLXN0b3AoMTAwJSwjZGRkKSxjb2xvci1zdG9wKDEwMCUsI2QxZDFkMSksY29sb3Itc3RvcCgxMDAlLCNkZGQpKTtiYWNrZ3JvdW5kOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwjZmZmIDAsI2RkZCAxMDAlLCNkMWQxZDEgMTAwJSwjZGRkIDEwMCUpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwjZmZmIDAsI2RkZCAxMDAlLCNkMWQxZDEgMTAwJSwjZGRkIDEwMCUpO2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0nI2ZmZmZmZicsZW5kQ29sb3JzdHI9JyNkZGRkZGQnLEdyYWRpZW50VHlwZT0wKTstby1ib3gtc2hhZG93OjFweCAxcHggMCAjZWVlO2JveC1zaGFkb3c6MXB4IDFweCAwICNlZWU7b3V0bGluZTppbml0aWFsfS5vbmVzaWduYWwtcmVzZXQgYnV0dG9ue3BhZGRpbmc6MXB4IDZweCAycHg7bWFyZ2luLXJpZ2h0OjVweH0ub25lc2lnbmFsLXJlc2V0IGlucHV0W3R5cGU9aGlkZGVuXXtkaXNwbGF5Om5vbmV9Lm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYXstd2Via2l0LWFwcGVhcmFuY2U6dGV4dGFyZWE7YmFja2dyb3VuZDojZmZmO3BhZGRpbmc6MnB4O21hcmdpbi1sZWZ0OjRweDt3b3JkLXdyYXA6YnJlYWstd29yZDt3aGl0ZS1zcGFjZTpwcmUtd3JhcDtmb250LXNpemU6MTFweDtmb250LWZhbWlseTphcmlhbCxoZWx2ZXRpY2Esc2Fucy1zZXJpZjtsaW5lLWhlaWdodDoxM3B4O3Jlc2l6ZTpib3RofS5vbmVzaWduYWwtcmVzZXQgaW5wdXQsLm9uZXNpZ25hbC1yZXNldCBzZWxlY3QsLm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYXtib3JkZXI6MXB4IHNvbGlkICNjY2N9Lm9uZXNpZ25hbC1yZXNldCBzZWxlY3R7Zm9udC1zaXplOjExcHg7Zm9udC1mYW1pbHk6aGVsdmV0aWNhLGFyaWFsLHNhbnMtc2VyaWY7ZGlzcGxheTppbmxpbmUtYmxvY2t9Lm9uZXNpZ25hbC1yZXNldCBpbnB1dDpmb2N1cywub25lc2lnbmFsLXJlc2V0IHRleHRhcmVhOmZvY3Vze291dGxpbmU6NXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO291dGxpbmU6aW5pdGlhbH0ub25lc2lnbmFsLXJlc2V0IGlucHV0W3R5cGU9dGV4dF17YmFja2dyb3VuZDojZmZmO3BhZGRpbmc6MXB4O2ZvbnQtZmFtaWx5OmluaXRpYWw7Zm9udC1zaXplOnNtYWxsfS5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1jaGVja2JveF0sLm9uZXNpZ25hbC1yZXNldCBpbnB1dFt0eXBlPXJhZGlvXXtib3JkZXI6MXB4IHNvbGlkICMyYjJiMmI7Ym9yZGVyLXJhZGl1czo0cHg7b3V0bGluZTppbnRpYWx9Lm9uZXNpZ25hbC1yZXNldCBpbnB1dFt0eXBlPXJhZGlvXXttYXJnaW46MnB4IDJweCAzcHh9Lm9uZXNpZ25hbC1yZXNldCBidXR0b246YWN0aXZlLC5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1zdWJtaXRdOmFjdGl2ZXtiYWNrZ3JvdW5kOiMzYjY3OWU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhcixsZWZ0IHRvcCxsZWZ0IGJvdHRvbSxjb2xvci1zdG9wKDAsIzNiNjc5ZSksY29sb3Itc3RvcCg1MCUsIzJiODhkOSksY29sb3Itc3RvcCg1MSUsIzIwN2NjYSksY29sb3Itc3RvcCgxMDAlLCM3ZGI5ZTgpKTtiYWNrZ3JvdW5kOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwjM2I2NzllIDAsIzJiODhkOSA1MCUsIzIwN2NjYSA1MSUsIzdkYjllOCAxMDAlKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIzNiNjc5ZSAwLCMyYjg4ZDkgNTAlLCMyMDdjY2EgNTElLCM3ZGI5ZTggMTAwJSk7Ym9yZGVyLWNvbG9yOiM1MjU5YjB9Lm9uZXNpZ25hbC1yZXNldCBhYmJyW3RpdGxlXSwub25lc2lnbmFsLXJlc2V0IGFjcm9ueW1bdGl0bGVdLC5vbmVzaWduYWwtcmVzZXQgZGZuW3RpdGxlXXtjdXJzb3I6aGVscDtib3JkZXItYm90dG9tLXdpZHRoOjFweDtib3JkZXItYm90dG9tLXN0eWxlOmRvdHRlZH0ub25lc2lnbmFsLXJlc2V0IGluc3tiYWNrZ3JvdW5kLWNvbG9yOiNmZjk7Y29sb3I6IzAwMH0ub25lc2lnbmFsLXJlc2V0IGRlbHt0ZXh0LWRlY29yYXRpb246bGluZS10aHJvdWdofS5vbmVzaWduYWwtcmVzZXQgYmxvY2txdW90ZSwub25lc2lnbmFsLXJlc2V0IHF7cXVvdGVzOm5vbmV9Lm9uZXNpZ25hbC1yZXNldCBibG9ja3F1b3RlOmFmdGVyLC5vbmVzaWduYWwtcmVzZXQgYmxvY2txdW90ZTpiZWZvcmUsLm9uZXNpZ25hbC1yZXNldCBsaTphZnRlciwub25lc2lnbmFsLXJlc2V0IGxpOmJlZm9yZSwub25lc2lnbmFsLXJlc2V0IHE6YWZ0ZXIsLm9uZXNpZ25hbC1yZXNldCBxOmJlZm9yZXtjb250ZW50OlxcXCJcXFwifS5vbmVzaWduYWwtcmVzZXQgaW5wdXQsLm9uZXNpZ25hbC1yZXNldCBzZWxlY3R7dmVydGljYWwtYWxpZ246bWlkZGxlfS5vbmVzaWduYWwtcmVzZXQgdGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlci1zcGFjaW5nOjB9Lm9uZXNpZ25hbC1yZXNldCBocntkaXNwbGF5OmJsb2NrO2hlaWdodDoxcHg7Ym9yZGVyOjA7Ym9yZGVyLXRvcDoxcHggc29saWQgI2NjYzttYXJnaW46MWVtIDB9Lm9uZXNpZ25hbC1yZXNldCBbZGlyPXJ0bF17ZGlyZWN0aW9uOnJ0bH0ub25lc2lnbmFsLXJlc2V0IG1hcmt7YmFja2dyb3VuZC1jb2xvcjojZmY5O2NvbG9yOiMwMDA7Zm9udC1zdHlsZTppdGFsaWM7Zm9udC13ZWlnaHQ6NzAwfS5vbmVzaWduYWwtcmVzZXQgbWVudXtwYWRkaW5nLWxlZnQ6NDBweDtwYWRkaW5nLXRvcDo4cHh9Lm9uZXNpZ25hbC1yZXNldCBbaGlkZGVuXSwub25lc2lnbmFsLXJlc2V0IHRlbXBsYXRle2Rpc3BsYXk6bm9uZX0ub25lc2lnbmFsLXJlc2V0IGFiYnJbdGl0bGVde2JvcmRlci1ib3R0b206MXB4IGRvdHRlZH0ub25lc2lnbmFsLXJlc2V0IHN1Yiwub25lc2lnbmFsLXJlc2V0IHN1cHtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246cmVsYXRpdmU7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9Lm9uZXNpZ25hbC1yZXNldCBzdXB7dG9wOi0uNWVtfS5vbmVzaWduYWwtcmVzZXQgc3Vie2JvdHRvbTotLjI1ZW19Lm9uZXNpZ25hbC1yZXNldCBpbWd7Ym9yZGVyOjB9Lm9uZXNpZ25hbC1yZXNldCBmaWd1cmV7bWFyZ2luOjB9Lm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYXtvdmVyZmxvdzphdXRvO3ZlcnRpY2FsLWFsaWduOnRvcH0ub25lc2lnbmFsLXJlc2V0e2ZvbnQtc2l6ZTptZWRpdW07bGluZS1oZWlnaHQ6MTtkaXJlY3Rpb246bHRyO3RleHQtYWxpZ246bGVmdDt0ZXh0LWFsaWduOnN0YXJ0O2ZvbnQtZmFtaWx5OlRpbWVzIE5ldyBSb21hbixUaW1lcyxzZXJpZjtjb2xvcjojMDAwO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDt0ZXh0LWRlY29yYXRpb246bm9uZTtsaXN0LXN0eWxlLXR5cGU6ZGlzY30ub25lc2lnbmFsLXJlc2V0IHByZXt3aGl0ZS1zcGFjZTpwcmV9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXR7ei1pbmRleDoyMTQ3NDgzMDAwO3Bvc2l0aW9uOmZpeGVkfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0Lm9uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci1ib3R0b20tbGVmdHtib3R0b206MDtsZWZ0OjB9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQub25lc2lnbmFsLWJlbGwtY29udGFpbmVyLWJvdHRvbS1yaWdodHtib3R0b206MDtyaWdodDowfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlcnstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyMTQ3NDgzMDAwO2ZvbnQtZmFtaWx5OkhlbHZldGljYSBOZXVlLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO3RyYW5zZm9ybTpzY2FsZSguMDEpIHRyYW5zbGF0ZVooMCk7b3BhY2l0eTowO3RyYW5zaXRpb246dHJhbnNmb3JtIDE3NW1zIGVhc2UtaW4tb3V0LG9wYWNpdHkgMTc1bXMgZWFzZS1pbi1vdXQ7d2lkdGg6MzMwcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0e2JvdHRvbToyMHB4O2xlZnQ6MjBweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc217dHJhbnNmb3JtLW9yaWdpbjoxNnB4IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2V7bGVmdDo0MnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9ne2JvdHRvbTozOXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmJlZm9yZXtyaWdodDo1cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6N3B4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZHt0cmFuc2Zvcm0tb3JpZ2luOjI0cHggY2VudGVyfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtsZWZ0OjYxcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2d7Ym90dG9tOjU4cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle3JpZ2h0OjEycHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6MTRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGd7dHJhbnNmb3JtLW9yaWdpbjozMnB4IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2V7bGVmdDo4MXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9ne2JvdHRvbTo3OHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmJlZm9yZXtyaWdodDoxOHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVye3JpZ2h0OjIwcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtsZWZ0OjRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2V7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2U6YWZ0ZXJ7cmlnaHQ6MTAwJTtib3JkZXItcmlnaHQtY29sb3I6IzAwMH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbntsZWZ0OjB9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodHtib3R0b206MjBweDtyaWdodDoyMHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc217dHJhbnNmb3JtLW9yaWdpbjozMTRweCBjZW50ZXJ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtyaWdodDo0MnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3tib3R0b206MzlweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle3JpZ2h0OjVweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6N3B4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWR7dHJhbnNmb3JtLW9yaWdpbjozMDZweCBjZW50ZXJ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtyaWdodDo2MXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3tib3R0b206NThweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle3JpZ2h0OjEycHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVye3JpZ2h0OjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZ3t0cmFuc2Zvcm0tb3JpZ2luOjI5OHB4IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3JpZ2h0OjgxcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9ne2JvdHRvbTo3OHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzpiZWZvcmV7cmlnaHQ6MThweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6MjBweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtyaWdodDo0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlOmFmdGVye2xlZnQ6MTAwJTtib3JkZXItbGVmdC1jb2xvcjojMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbntyaWdodDowfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2JvcmRlci1yYWRpdXM6NTAlO3RyYW5zaXRpb246dHJhbnNmb3JtIDE3NW1zIGVhc2UtaW4tb3V0LGJvcmRlciAxNzVtcyBlYXNlLWluLW91dCx3aWR0aCAxNzVtcyBlYXNlLWluLW91dCxoZWlnaHQgMTc1bXMgZWFzZS1pbi1vdXQ7Y3Vyc29yOnBvaW50ZXI7ei1pbmRleDoyMTQ3NDgzMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uIHN2Z3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlOy13ZWJraXQtZmlsdGVyOmRyb3Atc2hhZG93KDAgMnB4IDRweCByZ2JhKDM0LDM2LDM4LC4zNSkpO2ZpbHRlcjpkcm9wLXNoYWRvdygwIDJweCA0cHggcmdiYSgzNCwzNiwzOCwuMzUpKX0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbi5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24taG92ZXJ7Y3Vyc29yOnBvaW50ZXJ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDtib3JkZXItcmFkaXVzOjUwJTt0ZXh0LWFsaWduOmNlbnRlcjt0b3A6MDtjdXJzb3I6cG9pbnRlcjstd2Via2l0LWZpbHRlcjpkcm9wLXNoYWRvdygwIDJweCA0cHggcmdiYSgzNCwzNiwzOCwwKSk7ZmlsdGVyOmRyb3Atc2hhZG93KDAgMnB4IDRweCByZ2JhKDM0LDM2LDM4LDApKTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAxNzVtcyBlYXNlLWluLW91dCxib3JkZXIgMTc1bXMgZWFzZS1pbi1vdXQsb3BhY2l0eSAuMjFzIGVhc2UtaW4tb3V0LHdpZHRoIC4yMXMgZWFzZS1pbi1vdXQsaGVpZ2h0IC4yMXMgZWFzZS1pbi1vdXQscG9zaXRpb24gLjIxcyBlYXNlLWluLW91dCxyaWdodCAuMjFzIGVhc2UtaW4tb3V0LHRvcCAuMjFzIGVhc2UtaW4tb3V0LGJvdHRvbSAuMjFzIGVhc2UtaW4tb3V0LGxlZnQgLjIxcyBlYXNlLWluLW91dDt6LWluZGV4OjIxNDc0ODM0MDA7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguMDEpO3BvaW50ZXItZXZlbnRzOm5vbmV9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZS5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZS1ob3ZlcntjdXJzb3I6cG9pbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLW9wZW5lZHtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEpfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtwb3NpdGlvbjphYnNvbHV0ZTtjb2xvcjojZmZmO2JhY2tncm91bmQ6IzAwMDtjdXJzb3I6cG9pbnRlcjtib3JkZXItcmFkaXVzOjVweDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKSBzY2FsZVgoMCkgdHJhbnNsYXRlWigwKTtvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAxNzVtcyBlYXNlLWluLW91dCxvcGFjaXR5IDE3NW1zIGVhc2UtaW4tb3V0O3RvcDo1MCU7ei1pbmRleDoyMTQ3NDgxMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZTphZnRlcnt0b3A6NTAlO2JvcmRlcjpzb2xpZCB0cmFuc3BhcmVudDtjb250ZW50OlxcXCIgXFxcIjtoZWlnaHQ6MDt3aWR0aDowO3Bvc2l0aW9uOmFic29sdXRlO3BvaW50ZXItZXZlbnRzOm5vbmU7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1ib2R5e3otaW5kZXg6MjE0NzQ4MjAwMDttYXgtd2lkdGg6MTAwJTt3aGl0ZS1zcGFjZTpub3dyYXA7dGV4dC1vdmVyZmxvdzplbGxpcHNpc30jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2Uub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1vcGVuZWR7cG9pbnRlci1ldmVudHM6YXV0bztvcGFjaXR5OjE7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSkgc2NhbGVYKDEpIHRyYW5zbGF0ZVooMCl9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2d7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTstd2Via2l0LWZpbHRlcjpkcm9wLXNoYWRvdygwIDJweCAycHggcmdiYSgzNCwzNiwzOCwuMTUpKTtmaWx0ZXI6ZHJvcC1zaGFkb3coMCAycHggMnB4IHJnYmEoMzQsMzYsMzgsLjE1KSk7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSgwKSB0cmFuc2xhdGVaKDApO3RyYW5zaXRpb246dHJhbnNmb3JtIDE3NW1zIGVhc2UtaW4tb3V0LG9wYWNpdHkgMTc1bXMgZWFzZS1pbi1vdXQ7dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207ei1pbmRleDoyMTQ3NDgxMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVyLCNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmJlZm9yZXt0b3A6MTAwJTtib3JkZXI6c29saWQgdHJhbnNwYXJlbnQ7Y29udGVudDpcXFwiIFxcXCI7aGVpZ2h0OjA7d2lkdGg6MDtwb3NpdGlvbjphYnNvbHV0ZX0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHl7ei1pbmRleDoyMTQ3NDgyMDAwO21heC13aWR0aDoxMDAlO3doaXRlLXNwYWNlOm5vd3JhcDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO2ZvbnQtZmFtaWx5OkhlbHZldGljYSBOZXVlLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZy1vcGVuZWR7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZVooMCk7b3BhY2l0eToxfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbXtoZWlnaHQ6MzJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbnt3aWR0aDozMnB4O2hlaWdodDozMnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2V7Zm9udC1zaXplOjhweDt3aWR0aDoxMnB4O2hlaWdodDoxMnB4O2xpbmUtaGVpZ2h0OjEycHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3BhZGRpbmc6OS42cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlOmFmdGVye2JvcmRlci13aWR0aDo2LjZweDttYXJnaW4tdG9wOi02LjZweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UtYm9keXtmb250LXNpemU6MTRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3twYWRkaW5nOjMuMnB4IDkuNnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVye2JvcmRlci10b3AtY29sb3I6I2ZmZjtib3JkZXItd2lkdGg6Ni42cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle2JvcmRlci10b3AtY29sb3I6cmdiYSgwLDAsMCwuMSk7Ym9yZGVyLXdpZHRoOjguNnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keSwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHkgaDF7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1ke2hlaWdodDo0OHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9ue3dpZHRoOjQ4cHg7aGVpZ2h0OjQ4cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtmb250LXNpemU6MTJweDt3aWR0aDoxOHB4O2hlaWdodDoxOHB4O2xpbmUtaGVpZ2h0OjE4cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3BhZGRpbmc6MTQuNHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZTphZnRlcntib3JkZXItd2lkdGg6OS45cHg7bWFyZ2luLXRvcDotOS45cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlLWJvZHl7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2d7cGFkZGluZzo0LjhweCAxNC40cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojZmZmO2JvcmRlci13aWR0aDo5LjlweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzpiZWZvcmV7Ym9yZGVyLXRvcC1jb2xvcjpyZ2JhKDAsMCwwLC4xKTtib3JkZXItd2lkdGg6MTEuOXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keSwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHkgaDF7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxne2hlaWdodDo2NHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9ue3dpZHRoOjY0cHg7aGVpZ2h0OjY0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtmb250LXNpemU6MTJweDt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2xpbmUtaGVpZ2h0OjI0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3BhZGRpbmc6MTkuMnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZTphZnRlcntib3JkZXItd2lkdGg6MTMuMnB4O21hcmdpbi10b3A6LTEzLjJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UtYm9keXtmb250LXNpemU6MTRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3twYWRkaW5nOjYuNHB4IDE5LjJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzphZnRlcntib3JkZXItdG9wLWNvbG9yOiNmZmY7Ym9yZGVyLXdpZHRoOjEzLjJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzpiZWZvcmV7Ym9yZGVyLXRvcC1jb2xvcjpyZ2JhKDAsMCwwLC4xKTtib3JkZXItd2lkdGg6MTUuMnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keSwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHkgaDF7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWRlZmF1bHQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbiBzdmcgLmJhY2tncm91bmR7ZmlsbDojZTU0YjRkfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1kZWZhdWx0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24gc3ZnIC5mb3JlZ3JvdW5ke2ZpbGw6I2ZmZn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtZGVmYXVsdCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uIHN2ZyAuc3Ryb2tle2ZpbGw6bm9uZTtzdHJva2U6I2ZmZjtzdHJva2Utd2lkdGg6M3B4O3N0cm9rZS1taXRlcmxpbWl0OjEwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1kZWZhdWx0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24ub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2UtYWN0aXZlIHN2ZyAuYmFja2dyb3VuZCwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtZGVmYXVsdCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbi1hY3RpdmUgc3ZnIC5iYWNrZ3JvdW5ke2ZpbGw6I2RkMjAyMiFpbXBvcnRhbnR9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWRlZmF1bHQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdle2JvcmRlcjoxcHggc29saWQgI2ZmZjtiYWNrZ3JvdW5kOiMwMDA7Y29sb3I6I2ZmZn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtaW52ZXJzZSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uIHN2ZyAuYmFja2dyb3VuZHtmaWxsOiNmZmZ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWludmVyc2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbiBzdmcgLmZvcmVncm91bmR7ZmlsbDojZTU0YjRkfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1pbnZlcnNlIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24gc3ZnIC5zdHJva2V7ZmlsbDpub25lO3N0cm9rZTojZTU0YjRkO3N0cm9rZS13aWR0aDozcHg7c3Ryb2tlLW1pdGVybGltaXQ6MTB9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWludmVyc2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbi5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZS1hY3RpdmUgc3ZnIC5iYWNrZ3JvdW5kLCNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1pbnZlcnNlIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24ub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uLWFjdGl2ZSBzdmcgLmJhY2tncm91bmR7ZmlsbDojZjJmMmYyIWltcG9ydGFudH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtaW52ZXJzZSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2V7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2JhY2tncm91bmQ6I2U1NGI0ZDtjb2xvcjojZmZmfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1hY3RpdmUsI29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWVuYWJsZWR7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlzYWJsZWR7dmlzaWJpbGl0eTpoaWRkZW59I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWluYWN0aXZle29wYWNpdHk6LjZ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLnB1bHNlLXJpbmd7Ym9yZGVyOjdweCBzb2xpZCBoc2xhKDAsMCUsMTAwJSwuNCk7Ym9yZGVyLXJhZGl1czo1MCU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO2JvdHRvbTowO3JpZ2h0OjA7LXdlYmtpdC1hbmltYXRpb246cHVsc2UgLjM1cyBlYXNlLWluLW91dDthbmltYXRpb246cHVsc2UgLjM1cyBlYXNlLWluLW91dDstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjE7b3BhY2l0eTowO3otaW5kZXg6MTAwMDtwb2ludGVyLWV2ZW50czpub25lfUBtZWRpYSBwcmludHsjb25lc2lnbmFsLWJlbGwtY29udGFpbmVye2Rpc3BsYXk6bm9uZX19QC13ZWJraXQta2V5ZnJhbWVzIHB1bHNlezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4xKTtvcGFjaXR5OjA7Ym9yZGVyLXdpZHRoOjEwcHh9NTAle29wYWNpdHk6MTtib3JkZXItd2lkdGg6NXB4fXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMik7b3BhY2l0eTowO2JvcmRlci13aWR0aDoxcHh9fVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKlxyXG5cdFx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRcdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuXHQqL1xyXG5cdC8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBsaXN0ID0gW107XHJcblx0XHJcblx0XHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0XHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdFx0fTtcclxuXHRcclxuXHRcdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0XHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxyXG5cdFx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xyXG5cdFx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXHJcblx0XHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRyZXR1cm4gbGlzdDtcclxuXHR9O1xyXG5cblxuLyoqKi8gfSxcbi8qIDE1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKlxyXG5cdFx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRcdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuXHQqL1xyXG5cdHZhciBzdHlsZXNJbkRvbSA9IHt9LFxyXG5cdFx0bWVtb2l6ZSA9IGZ1bmN0aW9uKGZuKSB7XHJcblx0XHRcdHZhciBtZW1vO1xyXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0cmV0dXJuIG1lbW87XHJcblx0XHRcdH07XHJcblx0XHR9LFxyXG5cdFx0aXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiAvbXNpZSBbNi05XVxcYi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKTtcclxuXHRcdH0pLFxyXG5cdFx0Z2V0SGVhZEVsZW1lbnQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG5cdFx0fSksXHJcblx0XHRzaW5nbGV0b25FbGVtZW50ID0gbnVsbCxcclxuXHRcdHNpbmdsZXRvbkNvdW50ZXIgPSAwLFxyXG5cdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AgPSBbXTtcclxuXHRcclxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcclxuXHRcdGlmKHRydWUpIHtcclxuXHRcdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XHJcblx0XHR9XHJcblx0XHJcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHRcdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxyXG5cdFx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XHJcblx0XHJcblx0XHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgPGhlYWQ+LlxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcclxuXHRcclxuXHRcdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCk7XHJcblx0XHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cdFxyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XHJcblx0XHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xyXG5cdFx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcclxuXHRcdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYobmV3TGlzdCkge1xyXG5cdFx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCk7XHJcblx0XHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKylcclxuXHRcdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRpZihkb21TdHlsZSkge1xyXG5cdFx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBwYXJ0cyA9IFtdO1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gbGlzdFRvU3R5bGVzKGxpc3QpIHtcclxuXHRcdHZhciBzdHlsZXMgPSBbXTtcclxuXHRcdHZhciBuZXdTdHlsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdFx0dmFyIGlkID0gaXRlbVswXTtcclxuXHRcdFx0dmFyIGNzcyA9IGl0ZW1bMV07XHJcblx0XHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xyXG5cdFx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XHJcblx0XHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRcdHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3R5bGVzO1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KSB7XHJcblx0XHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XHJcblx0XHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcFtzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcclxuXHRcdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XHJcblx0XHRcdGlmKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xyXG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlRWxlbWVudCwgaGVhZC5maXJzdENoaWxkKTtcclxuXHRcdFx0fSBlbHNlIGlmKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XHJcblx0XHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGVFbGVtZW50KTtcclxuXHRcdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xyXG5cdFx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0Jy4gTXVzdCBiZSAndG9wJyBvciAnYm90dG9tJy5cIik7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR2YXIgaWR4ID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZUVsZW1lbnQpO1xyXG5cdFx0aWYoaWR4ID49IDApIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XHJcblx0XHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0c3R5bGVFbGVtZW50LnR5cGUgPSBcInRleHQvY3NzXCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGVFbGVtZW50KTtcclxuXHRcdHJldHVybiBzdHlsZUVsZW1lbnQ7XHJcblx0fVxyXG5cdFxyXG5cdGZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpIHtcclxuXHRcdHZhciBsaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG5cdFx0bGlua0VsZW1lbnQucmVsID0gXCJzdHlsZXNoZWV0XCI7XHJcblx0XHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGlua0VsZW1lbnQpO1xyXG5cdFx0cmV0dXJuIGxpbmtFbGVtZW50O1xyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcclxuXHRcdHZhciBzdHlsZUVsZW1lbnQsIHVwZGF0ZSwgcmVtb3ZlO1xyXG5cdFxyXG5cdFx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XHJcblx0XHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpO1xyXG5cdFx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKTtcclxuXHRcdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXHJcblx0XHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXHJcblx0XHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxyXG5cdFx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xyXG5cdFx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KTtcclxuXHRcdFx0cmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdFx0aWYoc3R5bGVFbGVtZW50LmhyZWYpXHJcblx0XHRcdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlRWxlbWVudC5ocmVmKTtcclxuXHRcdFx0fTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuXHRcdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdHJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dXBkYXRlKG9iaik7XHJcblx0XHJcblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XHJcblx0XHRcdGlmKG5ld09iaikge1xyXG5cdFx0XHRcdGlmKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcClcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZW1vdmUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHR9XHJcblx0XHJcblx0dmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciB0ZXh0U3RvcmUgPSBbXTtcclxuXHRcclxuXHRcdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XHJcblx0XHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcclxuXHRcdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XHJcblx0XHR9O1xyXG5cdH0pKCk7XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xyXG5cdFxyXG5cdFx0aWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcclxuXHRcdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2RlcztcclxuXHRcdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xyXG5cdFx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0XHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XHJcblx0XHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHRcclxuXHRcdGlmKG1lZGlhKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcclxuXHRcdH1cclxuXHRcclxuXHRcdGlmKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR3aGlsZShzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG5cdFx0XHRcdHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XHJcblx0XHRcdH1cclxuXHRcdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRmdW5jdGlvbiB1cGRhdGVMaW5rKGxpbmtFbGVtZW50LCBvYmopIHtcclxuXHRcdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdFx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xyXG5cdFx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XHJcblx0XHJcblx0XHRpZihzb3VyY2VNYXApIHtcclxuXHRcdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcclxuXHRcdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XHJcblx0XHJcblx0XHR2YXIgb2xkU3JjID0gbGlua0VsZW1lbnQuaHJlZjtcclxuXHRcclxuXHRcdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cdFxyXG5cdFx0aWYob2xkU3JjKVxyXG5cdFx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XHJcblx0fVxyXG5cblxuLyoqKi8gfSxcbi8qIDE2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwidXRmLThcXFwiPz5cXG48IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+XFxuPHN2ZyB2ZXJzaW9uPVxcXCIxLjFcXFwiIGNsYXNzPVxcXCJvbmVzaWduYWwtYmVsbC1zdmdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgeG1sbnM6eGxpbms9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcXFwiIHg9XFxcIjBweFxcXCIgeT1cXFwiMHB4XFxcIlxcblxcdCB3aWR0aD1cXFwiOTkuN3B4XFxcIiBoZWlnaHQ9XFxcIjk5LjdweFxcXCIgdmlld0JveD1cXFwiMCAwIDk5LjcgOTkuN1xcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgOTkuNyA5OS43O1xcXCIgeG1sOnNwYWNlPVxcXCJwcmVzZXJ2ZVxcXCI+XFxuPGc+XFxuXFx0PGNpcmNsZSBjbGFzcz1cXFwiYmFja2dyb3VuZFxcXCIgY3g9XFxcIjQ5LjlcXFwiIGN5PVxcXCI0OS45XFxcIiByPVxcXCI0OS45XFxcIi8+XFxuXFx0PGcgaWQ9XFxcIkxheWVyXzJcXFwiPlxcblxcdFxcdDxnPlxcblxcdFxcdFxcdDxwYXRoIGNsYXNzPVxcXCJmb3JlZ3JvdW5kXFxcIiBkPVxcXCJNNTAuMSw2Ni4ySDI3LjdjMCwwLTItMC4yLTItMi4xYzAtMS45LDEuNy0yLDEuNy0yczYuNy0zLjIsNi43LTUuNWMwLTIuMy0xLjEtMy45LTEuMS0xMy4zXFxuXFx0XFx0XFx0XFx0czYtMTYuNiwxMy4yLTE2LjZjMCwwLDEtMi40LDMuOS0yLjRjMi44LDAsMy44LDIuNCwzLjgsMi40YzcuMiwwLDEzLjIsNy4yLDEzLjIsMTYuNnMtMSwxMS0xLDEzLjNjMCwyLjMsNi43LDUuNSw2LjcsNS41XFxuXFx0XFx0XFx0XFx0czEuNywwLjEsMS43LDJjMCwxLjgtMi4xLDIuMS0yLjEsMi4xSDUwLjF6XFxcIi8+XFxuXFx0XFx0XFx0PHBhdGggY2xhc3M9XFxcImZvcmVncm91bmRcXFwiIGQ9XFxcIk00Mi45LDY4LjVoMTQuNWMwLDAtMSw2LjMtNy4yLDYuM1M0Mi45LDY4LjUsNDIuOSw2OC41elxcXCIvPlxcblxcdFxcdFxcdDxlbGxpcHNlIGNsYXNzPVxcXCJzdHJva2VcXFwiIGN4PVxcXCI0OS45XFxcIiBjeT1cXFwiNDkuOVxcXCIgcng9XFxcIjM3LjRcXFwiIHJ5PVxcXCIzNi45XFxcIi8+XFxuXFx0XFx0PC9nPlxcblxcdDwvZz5cXG48L2c+XFxuPC9zdmc+XFxuXCJcblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogT25lU2lnbmFsU0RLLmpzXG4gKiovIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCA1ZGNhY2NmOTNhNzNiNzBhNzRjY1xuICoqLyIsImlmICh0eXBlb2YgT25lU2lnbmFsICE9PSBcInVuZGVmaW5lZFwiKVxuICB2YXIgcHJlZGVmaW5lZE9uZVNpZ25hbFB1c2hlcyA9IE9uZVNpZ25hbDtcblxucmVxdWlyZShcImV4cG9zZT9PbmVTaWduYWwhLi9zZGsuanNcIik7XG5cbmlmIChwcmVkZWZpbmVkT25lU2lnbmFsUHVzaGVzKVxuICBPbmVTaWduYWwuX3Byb2Nlc3NfcHVzaGVzKHByZWRlZmluZWRPbmVTaWduYWxQdXNoZXMpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZW50cnkuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcIk9uZVNpZ25hbFwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9qcGFuZy9jb2RlL09uZVNpZ25hbC1XZWJzaXRlLVNESy9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2luZGV4LmpzP3tcXFwicHJlc2V0c1xcXCI6W1xcXCJlczIwMTVcXFwiXSxcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWV9IS9Vc2Vycy9qcGFuZy9jb2RlL09uZVNpZ25hbC1XZWJzaXRlLVNESy9zcmMvc2RrLmpzXCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2V4cG9zZS1sb2FkZXI/T25lU2lnbmFsIS4vc3JjL3Nkay5qc1xuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCB7IERFVl9IT1NULCBQUk9EX0hPU1QsIEhPU1RfVVJMIH0gZnJvbSAnLi92YXJzLmpzJztcbmltcG9ydCB7IHNlbmROb3RpZmljYXRpb24gfSBmcm9tICcuL2FwaS5qcyc7XG5pbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcbmltcG9ydCBMaW1pdFN0b3JlIGZyb20gJy4vbGltaXRTdG9yZS5qcyc7XG5pbXBvcnQgXCIuL2V2ZW50cy1wb2x5ZmlsbC5qc1wiO1xuaW1wb3J0IHsgdHJpZ2dlckV2ZW50IH0gZnJvbSBcIi4vZXZlbnRzLmpzXCI7XG5pbXBvcnQgQmVsbCBmcm9tIFwiLi9iZWxsLmpzXCI7XG5pbXBvcnQgeyBpc0Jyb3dzZXJFbnYsIGlzUHVzaE5vdGlmaWNhdGlvbnNTdXBwb3J0ZWQsIGlzQnJvd3NlclNhZmFyaSwgaXNTdXBwb3J0ZWRGaXJlRm94LCBpc0Jyb3dzZXJGaXJlZm94LCBnZXRGaXJlZm94VmVyc2lvbiwgaXNTdXBwb3J0ZWRTYWZhcmkgfSBmcm9tICcuL3V0aWxzLmpzJztcblxudmFyIE9uZVNpZ25hbCA9IHtcbiAgX1ZFUlNJT046IDEwOTAxMyxcbiAgX0hPU1RfVVJMOiBIT1NUX1VSTCxcbiAgX2FwcF9pZDogbnVsbCxcbiAgX3RhZ3NUb1NlbmRPblJlZ2lzdGVyOiBudWxsLFxuICBfbm90aWZpY2F0aW9uT3BlbmVkX2NhbGxiYWNrOiBudWxsLFxuICBfaWRzQXZhaWxhYmxlX2NhbGxiYWNrOiBbXSxcbiAgX2RlZmF1bHRMYXVuY2hVUkw6IG51bGwsXG4gIF9pbml0T3B0aW9uczogbnVsbCxcbiAgX2h0dHBSZWdpc3RyYXRpb246IGZhbHNlLFxuICBfbWFpbl9wYWdlX3BvcnQ6IG51bGwsXG4gIF9pc05vdGlmaWNhdGlvbkVuYWJsZWRDYWxsYmFjazogbnVsbCxcbiAgX3N1YnNjcmlwdGlvblNldDogdHJ1ZSxcbiAgX2luaXRPbmVTaWduYWxIdHRwOiBudWxsLFxuICBfc2Vzc2lvbklmcmFtZUFkZGVkOiBmYWxzZSxcbiAgX3VzZUh0dHBNb2RlOiBudWxsLFxuICBfd2luZG93V2lkdGg6IDU1MCxcbiAgX3dpbmRvd0hlaWdodDogNDgwLFxuICBfaXNOZXdWaXNpdG9yOiBmYWxzZSxcbiAgX2lzSW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICBiZWxsOiBudWxsLFxuICBMT0dHSU5HOiB0cnVlLFxuICBTRVJWSUNFX1dPUktFUl9VUERBVEVSX1BBVEg6IFwiT25lU2lnbmFsU0RLVXBkYXRlcldvcmtlci5qc1wiLFxuICBTRVJWSUNFX1dPUktFUl9QQVRIOiBcIk9uZVNpZ25hbFNES1dvcmtlci5qc1wiLFxuICBTRVJWSUNFX1dPUktFUl9QQVJBTToge30sXG5cbiAgX2Vuc3VyZURiSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKE9uZVNpZ25hbC5fb25lU2lnbmFsX2RiKSB7XG4gICAgICAgIHJlc29sdmUoT25lU2lnbmFsLl9vbmVTaWduYWxfZGIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oXCJPTkVfU0lHTkFMX1NES19EQlwiLCAxKTtcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgZGF0YWJhc2UgPSBldmVudC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgIE9uZVNpZ25hbC5fb25lU2lnbmFsX2RiID0gZGF0YWJhc2U7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhYmFzZSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGxvZy5lcnJvcignVW5hYmxlIHRvIG9wZW4gSW5kZXhlZERCLicsIGV2ZW50KTtcbiAgICAgICAgICByZWplY3QoZXZlbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdSZWJ1aWxkaW5nIHNjaGVtYSBpbiBJbmRleGVkREIuLi4nKTtcbiAgICAgICAgICB2YXIgZGIgPSBldmVudC50YXJnZXQucmVzdWx0O1xuICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwiSWRzXCIsIHtrZXlQYXRoOiBcInR5cGVcIn0pO1xuICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwiTm90aWZpY2F0aW9uT3BlbmVkXCIsIHtrZXlQYXRoOiBcInVybFwifSk7XG4gICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoXCJPcHRpb25zXCIsIHtrZXlQYXRoOiBcImtleVwifSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgX2dldERiVmFsdWU6IGZ1bmN0aW9uICh0YWJsZSwga2V5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIE9uZVNpZ25hbC5fZW5zdXJlRGJJbnN0YW5jZSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhYmFzZSkge1xuICAgICAgICAgIHZhciByZXF1ZXN0ID0gZGF0YWJhc2UudHJhbnNhY3Rpb24odGFibGUpLm9iamVjdFN0b3JlKHRhYmxlKS5nZXQoa2V5KTtcbiAgICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVzdWx0KVxuICAgICAgICAgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9kYlZhbHVlUmV0cmlldmVkKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvckNvZGUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgICA7XG4gICAgfSk7XG4gIH0sXG5cbiAgX2dldERiVmFsdWVzOiBmdW5jdGlvbiAodGFibGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgT25lU2lnbmFsLl9lbnN1cmVEYkluc3RhbmNlKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGFiYXNlKSB7XG4gICAgICAgICAgdmFyIGpzb25SZXN1bHQgPSB7fTtcbiAgICAgICAgICB2YXIgY3Vyc29yID0gZGF0YWJhc2UudHJhbnNhY3Rpb24odGFibGUpLm9iamVjdFN0b3JlKHRhYmxlKS5vcGVuQ3Vyc29yKCk7XG4gICAgICAgICAgY3Vyc29yLm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIGN1cnNvciA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG4gICAgICAgICAgICBpZiAoY3Vyc29yKSB7XG4gICAgICAgICAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X2RiVmFsdWVSZXRyaWV2ZWQoY3Vyc29yKTtcbiAgICAgICAgICAgICAganNvblJlc3VsdFtjdXJzb3Iua2V5XSA9IGN1cnNvci52YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHJlc29sdmUoanNvblJlc3VsdCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjdXJzb3Iub25lcnJvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmVqZWN0KGN1cnNvci5lcnJvckNvZGUpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgX3B1dERiVmFsdWU6IGZ1bmN0aW9uICh0YWJsZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgT25lU2lnbmFsLl9lbnN1cmVEYkluc3RhbmNlKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGFiYXNlKSB7XG4gICAgICAgICAgZGF0YWJhc2UudHJhbnNhY3Rpb24oW3RhYmxlXSwgXCJyZWFkd3JpdGVcIikub2JqZWN0U3RvcmUodGFibGUpLnB1dCh2YWx1ZSk7XG4gICAgICAgICAgT25lU2lnbmFsLl90cmlnZ2VyRXZlbnRfZGJWYWx1ZVNldCh2YWx1ZSk7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgX2RlbGV0ZURiVmFsdWU6IGZ1bmN0aW9uICh0YWJsZSwga2V5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIE9uZVNpZ25hbC5fZW5zdXJlRGJJbnN0YW5jZSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhYmFzZSkge1xuICAgICAgICAgIGRhdGFiYXNlLnRyYW5zYWN0aW9uKFt0YWJsZV0sIFwicmVhZHdyaXRlXCIpLm9iamVjdFN0b3JlKHRhYmxlKS5kZWxldGUoa2V5KTtcbiAgICAgICAgICByZXNvbHZlKGtleSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgICA7XG4gICAgfSk7XG4gIH0sXG5cbiAgX3NlbmRUb09uZVNpZ25hbEFwaTogZnVuY3Rpb24gKHVybCwgYWN0aW9uLCBpbkRhdGEsIGNhbGxiYWNrLCBmYWlsZWRDYWxsYmFjaykge1xuICAgIGxvZy5kZWJ1ZyhgQ2FsbGluZyAke2FjdGlvbn0gJHtPbmVTaWduYWwuX0hPU1RfVVJMICsgdXJsfSB3aXRoIGRhdGE6YCwgaW5EYXRhKTtcbiAgICB2YXIgY29udGVudHMgPSB7XG4gICAgICBtZXRob2Q6IGFjdGlvbixcbiAgICAgIC8vbW9kZTogJ25vLWNvcnMnLCAvLyBuby1jb3JzIGlzIGRpc2FibGVkIGZvciBub24tc2VydmljZXdvcmtlci5cbiAgICB9O1xuXG4gICAgaWYgKGluRGF0YSkge1xuICAgICAgY29udGVudHMuaGVhZGVycyA9IHtcIkNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwifTtcbiAgICAgIGNvbnRlbnRzLmJvZHkgPSBKU09OLnN0cmluZ2lmeShpbkRhdGEpO1xuICAgIH1cblxuICAgIGZldGNoKE9uZVNpZ25hbC5fSE9TVF9VUkwgKyB1cmwsIGNvbnRlbnRzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gc3RhdHVzKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMClcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCkpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIHN0YXR1cyhyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChqc29uRGF0YSkge1xuICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbClcbiAgICAgICAgICBjYWxsYmFjayhqc29uRGF0YSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcignT25lU2lnbmFsLl9zZW5kVG9PbmVTaWduYWxBcGkoKSBmYWlsZWQ6JywgZSk7XG4gICAgICAgIGlmIChmYWlsZWRDYWxsYmFjayAhPSBudWxsKVxuICAgICAgICAgIGZhaWxlZENhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgfSxcblxuICBfZ2V0TGFuZ3VhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmF2aWdhdG9yLmxhbmd1YWdlID8gKG5hdmlnYXRvci5sYW5ndWFnZS5sZW5ndGggPiAzID8gbmF2aWdhdG9yLmxhbmd1YWdlLnN1YnN0cmluZygwLCAyKSA6IG5hdmlnYXRvci5sYW5ndWFnZSkgOiAnZW4nO1xuICB9LFxuXG4gIF9nZXRQbGF5ZXJJZDogZnVuY3Rpb24gKHZhbHVlLCBjYWxsYmFjaykge1xuICAgIGlmICh2YWx1ZSlcbiAgICAgIGNhbGxiYWNrKHZhbHVlKVxuICAgIGVsc2Uge1xuICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gX2dldFBsYXllcklkX2dvdFVzZXJJZChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0LmlkKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICB9KTtcbiAgICAgIDtcbiAgICB9XG4gIH0sXG5cbiAgX2dldEJyb3dzZXJOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9DaHJvbWVcXC8oLio/KSAvKSlcbiAgICAgIHJldHVybiBcIkNocm9tZVwiO1xuICAgIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaChcIlZlcnNpb24vKC4qKSAoU2FmYXJpKVwiKSlcbiAgICAgIHJldHVybiBcIlNhZmFyaVwiO1xuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9GaXJlZm94XFwvKFswLTldezIsfVxcLlswLTldezEsfSkvKSlcbiAgICAgIHJldHVybiBcIkZpcmVmb3hcIjtcblxuICAgIHJldHVybiBcIlwiO1xuICB9LFxuXG4gIF9yZWdpc3RlcldpdGhPbmVTaWduYWw6IGZ1bmN0aW9uIChhcHBJZCwgcmVnaXN0cmF0aW9uSWQsIGRldmljZVR5cGUpIHtcblxuICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpXG4gICAgICAudGhlbihmdW5jdGlvbiBfcmVnaXN0ZXJXaXRoT25lU2lnbmFsX0dvdFVzZXJJZCh1c2VySWRSZXN1bHQpIHtcbiAgICAgICAgT25lU2lnbmFsLl9nZXROb3RpZmljYXRpb25UeXBlcyhmdW5jdGlvbiAobm90aWZfdHlwZXMpIHtcbiAgICAgICAgICB2YXIgcmVxdWVzdFVybCA9ICdwbGF5ZXJzJztcblxuICAgICAgICAgIHZhciBqc29uRGF0YSA9IHtcbiAgICAgICAgICAgIGFwcF9pZDogYXBwSWQsXG4gICAgICAgICAgICBkZXZpY2VfdHlwZTogZGV2aWNlVHlwZSxcbiAgICAgICAgICAgIGxhbmd1YWdlOiBPbmVTaWduYWwuX2dldExhbmd1YWdlKCksXG4gICAgICAgICAgICB0aW1lem9uZTogbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpICogLTYwLFxuICAgICAgICAgICAgZGV2aWNlX21vZGVsOiBuYXZpZ2F0b3IucGxhdGZvcm0gKyBcIiBcIiArIE9uZVNpZ25hbC5fZ2V0QnJvd3Nlck5hbWUoKSxcbiAgICAgICAgICAgIGRldmljZV9vczogKG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9DaHJvbWVcXC8oLio/KSAvKSB8fCBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaChcIlZlcnNpb24vKC4qKSBTYWZhcmlcIikgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRmlyZWZveFxcLyhbMC05XXsyLH1cXC5bMC05XXsxLH0pLykpWzFdLFxuICAgICAgICAgICAgc2RrOiBPbmVTaWduYWwuX1ZFUlNJT05cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHVzZXJJZFJlc3VsdCkge1xuICAgICAgICAgICAgcmVxdWVzdFVybCA9ICdwbGF5ZXJzLycgKyB1c2VySWRSZXN1bHQuaWQgKyAnL29uX3Nlc3Npb24nO1xuICAgICAgICAgICAganNvbkRhdGEubm90aWZpY2F0aW9uX3R5cGVzID0gbm90aWZfdHlwZXNcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAobm90aWZfdHlwZXMgIT0gMSlcbiAgICAgICAgICAgIGpzb25EYXRhLm5vdGlmaWNhdGlvbl90eXBlcyA9IG5vdGlmX3R5cGVzXG5cbiAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uSWQpIHtcbiAgICAgICAgICAgIGpzb25EYXRhLmlkZW50aWZpZXIgPSByZWdpc3RyYXRpb25JZDtcbiAgICAgICAgICAgIE9uZVNpZ25hbC5fcHV0RGJWYWx1ZShcIklkc1wiLCB7dHlwZTogXCJyZWdpc3RyYXRpb25JZFwiLCBpZDogcmVnaXN0cmF0aW9uSWR9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBPbmVTaWduYWwuX3NlbmRUb09uZVNpZ25hbEFwaShyZXF1ZXN0VXJsLCAnUE9TVCcsIGpzb25EYXRhLFxuICAgICAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJlZENhbGxiYWNrKHJlc3BvbnNlSlNPTikge1xuICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiT05FX1NJR05BTF9TRVNTSU9OXCIsIHRydWUpO1xuXG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZUpTT04uaWQpIHtcbiAgICAgICAgICAgICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJJZHNcIiwge3R5cGU6IFwidXNlcklkXCIsIGlkOiByZXNwb25zZUpTT04uaWR9KTtcbiAgICAgICAgICAgICAgICBPbmVTaWduYWwuX3NlbmRVbnNlbnRUYWdzKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBPbmVTaWduYWwuX2dldFBsYXllcklkKHJlc3BvbnNlSlNPTi5pZCwgZnVuY3Rpb24gKHVzZXJJZCkge1xuICAgICAgICAgICAgICAgIGlmIChPbmVTaWduYWwuX2lkc0F2YWlsYWJsZV9jYWxsYmFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoT25lU2lnbmFsLl9pZHNBdmFpbGFibGVfY2FsbGJhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3Vycl9jYWxsYmFjayA9IE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyX2NhbGxiYWNrKHt1c2VySWQ6IHVzZXJJZCwgcmVnaXN0cmF0aW9uSWQ6IHJlZ2lzdHJhdGlvbklkfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKE9uZVNpZ25hbC5faHR0cFJlZ2lzdHJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKFwiU2VuZGluZyBwbGF5ZXIgSWQgYW5kIHJlZ2lzdHJhdGlvbklkIGJhY2sgdG8gaG9zdCBwYWdlXCIpO1xuICAgICAgICAgICAgICAgICAgbG9nLmRlYnVnKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0b3IgPSBvcGVuZXIgfHwgcGFyZW50O1xuICAgICAgICAgICAgICAgICAgT25lU2lnbmFsLl9zYWZlUG9zdE1lc3NhZ2UoY3JlYXRvciwge1xuICAgICAgICAgICAgICAgICAgICBpZHNBdmFpbGFibGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25JZDogcmVnaXN0cmF0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSwgT25lU2lnbmFsLl9pbml0T3B0aW9ucy5vcmlnaW4sIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAob3BlbmVyKVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG5cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgIH0pO1xuICAgIDtcbiAgfSxcblxuICBfc2VuZFVuc2VudFRhZ3M6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoT25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3Rlcikge1xuICAgICAgT25lU2lnbmFsLnNlbmRUYWdzKE9uZVNpZ25hbC5fdGFnc1RvU2VuZE9uUmVnaXN0ZXIpO1xuICAgICAgT25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3RlciA9IG51bGw7XG4gICAgfVxuICB9LFxuXG4gIHNldERlZmF1bHROb3RpZmljYXRpb25Vcmw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJPcHRpb25zXCIsIHtrZXk6IFwiZGVmYXVsdFVybFwiLCB2YWx1ZTogdXJsfSk7XG4gIH0sXG5cbiAgc2V0RGVmYXVsdEljb246IGZ1bmN0aW9uIChpY29uKSB7XG4gICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiT3B0aW9uc1wiLCB7a2V5OiBcImRlZmF1bHRJY29uXCIsIHZhbHVlOiBpY29ufSk7XG4gIH0sXG5cbiAgc2V0RGVmYXVsdFRpdGxlOiBmdW5jdGlvbiAodGl0bGUpIHtcbiAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJPcHRpb25zXCIsIHtrZXk6IFwiZGVmYXVsdFRpdGxlXCIsIHZhbHVlOiB0aXRsZX0pO1xuICB9LFxuXG4gIF92aXNpYmlsaXR5Y2hhbmdlOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PSBcInZpc2libGVcIikge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgT25lU2lnbmFsLl92aXNpYmlsaXR5Y2hhbmdlKTtcbiAgICAgIE9uZVNpZ25hbC5fc2Vzc2lvbkluaXQoe30pO1xuICAgIH1cbiAgfSxcblxuICBvbkN1c3RvbVByb21wdENsaWNrZWQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGxvZy5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLnByb21wdC5jdXN0b20uY2xpY2tlZDonLCBldmVudC5kZXRhaWwpO1xuICAgIE9uZVNpZ25hbC5fY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZCgpO1xuICB9LFxuXG4gIG9uTmF0aXZlUHJvbXB0Q2hhbmdlZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgbG9nLmRlYnVnKCdFdmVudCBvbmVzaWduYWwucHJvbXB0Lm5hdGl2ZS5wZXJtaXNzaW9uY2hhbmdlZDonLCBldmVudC5kZXRhaWwpO1xuICAgIE9uZVNpZ25hbC5fY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZCgpO1xuICB9LFxuXG4gIF9vblN1YnNjcmlwdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGxvZy5kZWJ1ZygnRXZlbnQgb25lc2lnbmFsLnN1YnNjcmlwdGlvbi5jaGFuZ2VkOicsIGV2ZW50LmRldGFpbCk7XG4gICAgaWYgKE9uZVNpZ25hbC5faXNOZXdWaXNpdG9yICYmIGV2ZW50LmRldGFpbCA9PT0gdHJ1ZSkge1xuICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgIGxldCB3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzID0gT25lU2lnbmFsLl9pbml0T3B0aW9uc1snd2VsY29tZU5vdGlmaWNhdGlvbiddO1xuICAgICAgICAgIGxldCB3ZWxjb21lX25vdGlmaWNhdGlvbl9kaXNhYmxlZCA9ICh3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzICE9PSB1bmRlZmluZWQgJiYgd2VsY29tZV9ub3RpZmljYXRpb25fb3B0c1snZGlzYWJsZSddID09PSB0cnVlKTtcbiAgICAgICAgICBsZXQgdGl0bGUgPSAod2VsY29tZV9ub3RpZmljYXRpb25fb3B0cyAhPT0gdW5kZWZpbmVkICYmIHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ3RpdGxlJ10gIT09IHVuZGVmaW5lZCAmJiB3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzWyd0aXRsZSddICE9PSBudWxsKSA/IHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ3RpdGxlJ10gOiAnJztcbiAgICAgICAgICBsZXQgbWVzc2FnZSA9ICh3ZWxjb21lX25vdGlmaWNhdGlvbl9vcHRzICE9PSB1bmRlZmluZWQgJiYgd2VsY29tZV9ub3RpZmljYXRpb25fb3B0c1snbWVzc2FnZSddICE9PSB1bmRlZmluZWQgJiYgd2VsY29tZV9ub3RpZmljYXRpb25fb3B0c1snbWVzc2FnZSddICE9PSBudWxsICYmIHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ21lc3NhZ2UnXS5sZW5ndGggPiAwKSA/IHdlbGNvbWVfbm90aWZpY2F0aW9uX29wdHNbJ21lc3NhZ2UnXSA6ICdUaGFua3MgZm9yIHN1YnNjcmliaW5nISc7XG4gICAgICAgICAgaWYgKCF3ZWxjb21lX25vdGlmaWNhdGlvbl9kaXNhYmxlZCkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCdCZWNhdXNlIHRoaXMgdXNlciBpcyBhIG5ldyBzaXRlIHZpc2l0b3IsIGEgd2VsY29tZSBub3RpZmljYXRpb24gd2lsbCBiZSBzZW50LicpO1xuICAgICAgICAgICAgc2VuZE5vdGlmaWNhdGlvbihPbmVTaWduYWwuX2FwcF9pZCwgW3Jlc3VsdC5pZF0sIHsnZW4nOiB0aXRsZX0sIHsnZW4nOiBtZXNzYWdlfSlcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudCgnb25lc2lnbmFsLmFjdGlvbnMud2VsY29tZW5vdGlmaWNhdGlvbnNlbnQnLCB7dGl0bGU6IHRpdGxlLCBtZXNzYWdlOiBtZXNzYWdlfSk7XG4gICAgICAgICAgICBPbmVTaWduYWwuX2lzTmV3VmlzaXRvciA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgTGltaXRTdG9yZS5wdXQoJ3N1YnNjcmlwdGlvbi52YWx1ZScsIGV2ZW50LmRldGFpbCk7XG4gIH0sXG5cbiAgX29uRGJWYWx1ZVJldHJpZXZlZDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgbG9nLmRlYnVnKCdFdmVudCBvbmVzaWduYWwuZGIucmV0cmlldmVkOicsIGV2ZW50LmRldGFpbCk7XG4gIH0sXG5cbiAgX29uRGJWYWx1ZVNldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgbG9nLmRlYnVnKCdFdmVudCBvbmVzaWduYWwuZGIudmFsdWVzZXQ6JywgZXZlbnQuZGV0YWlsKTtcbiAgICB2YXIgaW5mbyA9IGV2ZW50LmRldGFpbDtcbiAgICBpZiAoaW5mby50eXBlID09PSAndXNlcklkJykge1xuICAgICAgTGltaXRTdG9yZS5wdXQoJ2RiLmlkcy51c2VySWQnLCBpbmZvLmlkKTtcbiAgICAgIE9uZVNpZ25hbC5fY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZCgpO1xuICAgIH1cbiAgfSxcblxuICBfb25JbnRlcm5hbFN1YnNjcmlwdGlvblNldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgbG9nLmRlYnVnKCdFdmVudCBvbmVzaWduYWwuaW50ZXJuYWwuc3Vic2NyaXB0aW9uc2V0OicsIGV2ZW50LmRldGFpbCk7XG4gICAgdmFyIG5ld1N1YnNjcmlwdGlvblZhbHVlID0gZXZlbnQuZGV0YWlsO1xuICAgIExpbWl0U3RvcmUucHV0KCdzdWJzY3JpcHRpb24uaW50ZXJuYWwudmFsdWUnLCBuZXdTdWJzY3JpcHRpb25WYWx1ZSk7XG4gICAgT25lU2lnbmFsLl9jaGVja1RyaWdnZXJfZXZlbnRTdWJzY3JpcHRpb25DaGFuZ2VkKCk7XG4gIH0sXG5cbiAgX2NoZWNrVHJpZ2dlcl9ldmVudFN1YnNjcmlwdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICBsb2cuZGVidWcoJ0NhbGxlZCBfY2hlY2tUcmlnZ2VyX2V2ZW50U3Vic2NyaXB0aW9uQ2hhbmdlZCgpLicpO1xuICAgIHZhciBwZXJtaXNzaW9ucyA9IExpbWl0U3RvcmUuZ2V0KCdub3RpZmljYXRpb24ucGVybWlzc2lvbicpO1xuICAgIHZhciBsYXN0UGVybWlzc2lvbiA9IHBlcm1pc3Npb25zW3Blcm1pc3Npb25zLmxlbmd0aCAtIDJdO1xuICAgIHZhciBjdXJyZW50UGVybWlzc2lvbiA9IHBlcm1pc3Npb25zW3Blcm1pc3Npb25zLmxlbmd0aCAtIDFdO1xuXG4gICAgdmFyIGlkcyA9IExpbWl0U3RvcmUuZ2V0KCdkYi5pZHMudXNlcklkJyk7XG4gICAgdmFyIGxhc3RJZCA9IGlkc1tpZHMubGVuZ3RoIC0gMl07XG4gICAgdmFyIGN1cnJlbnRJZCA9IGlkc1tpZHMubGVuZ3RoIC0gMV07XG5cbiAgICB2YXIgc3Vic2NyaXB0aW9uU3RhdGVzID0gTGltaXRTdG9yZS5nZXQoJ3N1YnNjcmlwdGlvbi5pbnRlcm5hbC52YWx1ZScpO1xuICAgIHZhciBsYXN0U3Vic2NyaXB0aW9uU3RhdGUgPSBzdWJzY3JpcHRpb25TdGF0ZXNbc3Vic2NyaXB0aW9uU3RhdGVzLmxlbmd0aCAtIDJdO1xuICAgIHZhciBjdXJyZW50U3Vic2NyaXB0aW9uU3RhdGUgPSBzdWJzY3JpcHRpb25TdGF0ZXNbc3Vic2NyaXB0aW9uU3RhdGVzLmxlbmd0aCAtIDFdO1xuXG5cbiAgICB2YXIgbmV3U3Vic2NyaXB0aW9uU3RhdGUgPSAndW5jaGFuZ2VkJztcblxuICAgIGlmICgoKGxhc3RQZXJtaXNzaW9uID09PSAnZGVmYXVsdCcgfHwgbGFzdFBlcm1pc3Npb24gPT09ICdkZW5pZWQnIHx8IGxhc3RQZXJtaXNzaW9uID09PSBudWxsKSAmJiBjdXJyZW50UGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnICYmXG4gICAgICAgIGN1cnJlbnRJZCAhPT0gbnVsbCAmJlxuICAgICAgICBjdXJyZW50U3Vic2NyaXB0aW9uU3RhdGUgPT09IHRydWVcbiAgICAgICkgfHxcbiAgICAgIChcbiAgICAgICAgKGxhc3RTdWJzY3JpcHRpb25TdGF0ZSA9PT0gZmFsc2UgJiYgY3VycmVudFN1YnNjcmlwdGlvblN0YXRlID09PSB0cnVlKSAmJlxuICAgICAgICBjdXJyZW50SWQgIT0gbnVsbCAmJlxuICAgICAgICBjdXJyZW50UGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnXG4gICAgICApKSB7XG4gICAgICBuZXdTdWJzY3JpcHRpb25TdGF0ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKChsYXN0UGVybWlzc2lvbiAhPT0gJ2RlbmllZCcgJiYgY3VycmVudFBlcm1pc3Npb24gPT09ICdkZW5pZWQnKSB8fFxuICAgICAgKGxhc3RQZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcgJiYgY3VycmVudFBlcm1pc3Npb24gIT09ICdncmFudGVkJykgfHxcbiAgICAgIChsYXN0SWQgIT09IG51bGwgJiYgY3VycmVudElkID09PSBudWxsKSB8fFxuICAgICAgKGxhc3RTdWJzY3JpcHRpb25TdGF0ZSAhPT0gZmFsc2UgJiYgY3VycmVudFN1YnNjcmlwdGlvblN0YXRlID09PSBmYWxzZSkpIHtcbiAgICAgIG5ld1N1YnNjcmlwdGlvblN0YXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5ld1N1YnNjcmlwdGlvblN0YXRlICE9PSBcInVuY2hhbmdlZFwiKSB7XG4gICAgICB2YXIgbGFzdFRyaWdnZXJUaW1lcyA9IExpbWl0U3RvcmUucHV0KCdldmVudC5zdWJzY3JpcHRpb25jaGFuZ2VkLmxhc3RyaWdnZXJlZCcsIERhdGUubm93KCkpO1xuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gbGFzdFRyaWdnZXJUaW1lc1tsYXN0VHJpZ2dlclRpbWVzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIGxhc3RUcmlnZ2VyVGltZSA9IGxhc3RUcmlnZ2VyVGltZXNbbGFzdFRyaWdnZXJUaW1lcy5sZW5ndGggLSAyXTtcbiAgICAgIHZhciBlbGFwc2VkVGltZVNlY29uZHMgPSAoY3VycmVudFRpbWUgLSBsYXN0VHJpZ2dlclRpbWUpIC8gMTAwMDtcblxuICAgICAgdmFyIGxhc3RFdmVudFN0YXRlcyA9IExpbWl0U3RvcmUucHV0KCdldmVudC5zdWJzY3JpcHRpb25jaGFuZ2VkLmxhc3RzdGF0ZXMnLCBuZXdTdWJzY3JpcHRpb25TdGF0ZSk7XG4gICAgICB2YXIgY3VycmVudFN0YXRlID0gbGFzdEV2ZW50U3RhdGVzW2xhc3RFdmVudFN0YXRlcy5sZW5ndGggLSAxXTtcbiAgICAgIHZhciBsYXN0U3RhdGUgPSBsYXN0RXZlbnRTdGF0ZXNbbGFzdEV2ZW50U3RhdGVzLmxlbmd0aCAtIDJdO1xuXG4gICAgICAvLyBJZiBldmVudCBhbHJlYWR5IHRyaWdnZXJlZCB3aXRoaW4gdGhlIGxhc3Qgc2Vjb25kLCBkb24ndCByZS10cmlnZ2VyLlxuICAgICAgdmFyIHNob3VsZE5vdFRyaWdnZXJFdmVudCA9IChsYXN0VHJpZ2dlclRpbWUgIT0gbnVsbCAmJiAoZWxhcHNlZFRpbWVTZWNvbmRzIDw9IDEpKSB8fCAoY3VycmVudFN0YXRlID09PSBsYXN0U3RhdGUpO1xuICAgICAgaWYgKHNob3VsZE5vdFRyaWdnZXJFdmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgT25lU2lnbmFsLl90cmlnZ2VyRXZlbnRfc3Vic2NyaXB0aW9uQ2hhbmdlZChuZXdTdWJzY3JpcHRpb25TdGF0ZSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgaW5pdDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBpZiAoT25lU2lnbmFsLl9pc0luaXRpYWxpemVkKSB7XG4gICAgICBsb2cud2FybignT25lU2lnbmFsLmluaXQoKSB3YXMgY2FsbGVkIGFnYWluLCBidXQgdGhlIFNESyBpcyBhbHJlYWR5IGluaXRpYWxpemVkLiBTa2lwcGluZyBpbml0aWFsaXphdGlvbi4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgT25lU2lnbmFsLl9pbml0T3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICBpZiAoT25lU2lnbmFsLkxPR0dJTkcpXG4gICAgICBsb2cuZW5hYmxlQWxsKCk7XG4gICAgZWxzZVxuICAgICAgbG9nLnNldExldmVsKCdlcnJvcicpO1xuXG4gICAgbG9nLmluZm8oYE9uZVNpZ25hbCBXZWIgU0RLIGxvYWRlZCAodmVyc2lvbiAke09uZVNpZ25hbC5fVkVSU0lPTn0pLmApO1xuICAgIGlmICghaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCgpKSB7XG4gICAgICBsb2cud2FybihcIllvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHB1c2ggbm90aWZpY2F0aW9ucy5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChuYXZpZ2F0b3IucGVybWlzc2lvbnMgJiYgIShpc0Jyb3dzZXJGaXJlZm94KCkgJiYgZ2V0RmlyZWZveFZlcnNpb24oKSA8PSA0NSkpIHtcbiAgICAgIE9uZVNpZ25hbC5fdXNpbmdOYXRpdmVQZXJtaXNzaW9uSG9vayA9IHRydWU7XG4gICAgICB2YXIgY3VycmVudE5vdGlmaWNhdGlvblBlcm1pc3Npb24gPSBPbmVTaWduYWwuX2dldE5vdGlmaWNhdGlvblBlcm1pc3Npb24oKTtcbiAgICAgIExpbWl0U3RvcmUucHV0KCdub3RpZmljYXRpb24ucGVybWlzc2lvbicsIGN1cnJlbnROb3RpZmljYXRpb25QZXJtaXNzaW9uKTtcbiAgICAgIC8vIElmIHRoZSBicm93c2VyIG5hdGl2ZWx5IHN1cHBvcnRzIGhvb2tpbmcgdGhlIHN1YnNjcmlwdGlvbiBwcm9tcHQgcGVybWlzc2lvbiBjaGFuZ2UgZXZlbnRcbiAgICAgIC8vICAgICB1c2UgaXQgaW5zdGVhZCBvZiBvdXIgU0RLIG1ldGhvZFxuICAgICAgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHtuYW1lOiAnbm90aWZpY2F0aW9ucyd9KS50aGVuKGZ1bmN0aW9uIChwZXJtaXNzaW9uU3RhdHVzKSB7XG4gICAgICAgIHBlcm1pc3Npb25TdGF0dXMub25jaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHJlY2VudFBlcm1pc3Npb25zID0gTGltaXRTdG9yZS5nZXQoJ25vdGlmaWNhdGlvbi5wZXJtaXNzaW9uJyk7XG4gICAgICAgICAgdmFyIHBlcm1pc3Npb25CZWZvcmVQcm9tcHQgPSByZWNlbnRQZXJtaXNzaW9uc1swXTtcbiAgICAgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9uYXRpdmVQcm9tcHRQZXJtaXNzaW9uQ2hhbmdlZChwZXJtaXNzaW9uQmVmb3JlUHJvbXB0KTtcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGN1cnJlbnROb3RpZmljYXRpb25QZXJtaXNzaW9uID0gT25lU2lnbmFsLl9nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uKCk7XG4gICAgICBMaW1pdFN0b3JlLnB1dCgnbm90aWZpY2F0aW9uLnBlcm1pc3Npb24nLCBjdXJyZW50Tm90aWZpY2F0aW9uUGVybWlzc2lvbik7XG4gICAgfVxuXG4gICAgLy8gU3RvcmUgdGhlIGN1cnJlbnQgdmFsdWUgb2YgSWRzOnJlZ2lzdHJhdGlvbklkLCBzbyB0aGF0IHdlIGNhbiBzZWUgaWYgdGhlIHZhbHVlIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIE9uZVNpZ25hbC5faXNOZXdWaXNpdG9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RvcmVWYWx1ZSA9IHJlc3VsdCA/IHJlc3VsdC5pZCA6IG51bGw7XG4gICAgICAgIExpbWl0U3RvcmUucHV0KCdkYi5pZHMudXNlcklkJywgc3RvcmVWYWx1ZSk7XG4gICAgICB9KTtcblxuICAgIC8vIFN0b3JlIHRoZSBjdXJyZW50IHZhbHVlIG9mIHN1YnNjcmlwdGlvbiwgc28gdGhhdCB3ZSBjYW4gc2VlIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICBPbmVTaWduYWwuX2dldFN1YnNjcmlwdGlvbihmdW5jdGlvbiAoY3VycmVudFN1YnNjcmlwdGlvbikge1xuICAgICAgTGltaXRTdG9yZS5wdXQoJ3N1YnNjcmlwdGlvbi5pbnRlcm5hbC52YWx1ZScsIGN1cnJlbnRTdWJzY3JpcHRpb24pO1xuICAgIH0pO1xuXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLnByb21wdC5jdXN0b20uY2xpY2tlZCcsIE9uZVNpZ25hbC5vbkN1c3RvbVByb21wdENsaWNrZWQpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwucHJvbXB0Lm5hdGl2ZS5wZXJtaXNzaW9uY2hhbmdlZCcsIE9uZVNpZ25hbC5vbk5hdGl2ZVByb21wdENoYW5nZWQpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuc3Vic2NyaXB0aW9uLmNoYW5nZWQnLCBPbmVTaWduYWwuX29uU3Vic2NyaXB0aW9uQ2hhbmdlZCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5kYi52YWx1ZXJldHJpZXZlZCcsIE9uZVNpZ25hbC5fb25EYlZhbHVlUmV0cmlldmVkKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLmRiLnZhbHVlc2V0JywgT25lU2lnbmFsLl9vbkRiVmFsdWVTZXQpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuZGIudmFsdWVzZXQnLCBPbmVTaWduYWwuX29uRGJWYWx1ZVNldCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5pbnRlcm5hbC5zdWJzY3JpcHRpb25zZXQnLCBPbmVTaWduYWwuX29uSW50ZXJuYWxTdWJzY3JpcHRpb25TZXQpO1xuXG4gICAgT25lU2lnbmFsLl91c2VIdHRwTW9kZSA9ICFpc1N1cHBvcnRlZFNhZmFyaSgpICYmICghT25lU2lnbmFsLl9zdXBwb3J0c0RpcmVjdFBlcm1pc3Npb24oKSB8fCBPbmVTaWduYWwuX2luaXRPcHRpb25zLnN1YmRvbWFpbk5hbWUpO1xuXG4gICAgaWYgKE9uZVNpZ25hbC5fdXNlSHR0cE1vZGUpXG4gICAgICBPbmVTaWduYWwuX2luaXRPbmVTaWduYWxIdHRwID0gJ2h0dHBzOi8vJyArIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc3ViZG9tYWluTmFtZSArICcub25lc2lnbmFsLmNvbS9zZGtzL2luaXRPbmVTaWduYWxIdHRwJztcbiAgICBlbHNlXG4gICAgICBPbmVTaWduYWwuX2luaXRPbmVTaWduYWxIdHRwID0gJ2h0dHBzOi8vb25lc2lnbmFsLmNvbS9zZGtzL2luaXRPbmVTaWduYWxIdHRwcyc7XG5cbiAgICBpZiAoX19ERVZfXylcbiAgICAgIE9uZVNpZ25hbC5faW5pdE9uZVNpZ25hbEh0dHAgPSBERVZfSE9TVCArICcvZGV2X3Nka3MvaW5pdE9uZVNpZ25hbEh0dHAnO1xuXG4gICAgLy8gSWYgU2FmYXJpIC0gYWRkICdmZXRjaCcgcG9sbHlmaWxsIGlmIGl0IGlzbid0IGFscmVhZHkgYWRkZWQuXG4gICAgaWYgKGlzU3VwcG9ydGVkU2FmYXJpKCkgJiYgdHlwZW9mIHdpbmRvdy5mZXRjaCA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgcy5zZXRBdHRyaWJ1dGUoJ3NyYycsIFwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZmV0Y2gvMC45LjAvZmV0Y2guanNcIik7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHMpO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpXG4gICAgICBPbmVTaWduYWwuX2ludGVybmFsSW5pdCgpO1xuICAgIGVsc2VcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgT25lU2lnbmFsLl9pbnRlcm5hbEluaXQpO1xuXG5cbiAgICBpZiAoX19ERVZfXyAmJiBpc0Jyb3dzZXJFbnYoKSkge1xuICAgICAgbG9nLmluZm8oJ1Nob3dpbmcgYmVsbC4nKTtcbiAgICAgIE9uZVNpZ25hbC5iZWxsID0gbmV3IEJlbGwoe1xuICAgICAgICBzaXplOiAnbGFyZ2UnLFxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbS1yaWdodCcsXG4gICAgICAgIHRoZW1lOiAnZGVmYXVsdCdcbiAgICAgIH0pO1xuICAgICAgT25lU2lnbmFsLmJlbGwuY3JlYXRlKCk7XG4gICAgfVxuXG4gICAgT25lU2lnbmFsLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfSxcblxuICBfaW50ZXJuYWxJbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgUHJvbWlzZS5hbGwoW09uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ2FwcElkJyksXG4gICAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICdyZWdpc3RyYXRpb25JZCcpLFxuICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdPcHRpb25zJywgJ3N1YnNjcmlwdGlvbicpXSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIF9pbnRlcm5hbEluaXRfR290QXBwUmVnaXN0cmF0aW9uU3Vic2NyaXB0aW9uSWRzKHJlc3VsdCkge1xuICAgICAgICB2YXIgYXBwSWRSZXN1bHQgPSByZXN1bHRbMF07XG4gICAgICAgIHZhciByZWdpc3RyYXRpb25JZFJlc3VsdCA9IHJlc3VsdFsxXTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvblJlc3VsdCA9IHJlc3VsdFsyXTtcblxuICAgICAgICAvLyBJZiBBcHBJZCBjaGFuZ2VkIGRlbGV0ZSBwbGF5ZXJJZCBhbmQgY29udGludWUuXG4gICAgICAgIGlmIChhcHBJZFJlc3VsdCAmJiBhcHBJZFJlc3VsdC5pZCAhPSBPbmVTaWduYWwuX2luaXRPcHRpb25zLmFwcElkKSB7XG4gICAgICAgICAgT25lU2lnbmFsLl9kZWxldGVEYlZhbHVlKFwiSWRzXCIsIFwidXNlcklkXCIpO1xuICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJPTkVfU0lHTkFMX1NFU1NJT05cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIVFRQUyAtIE9ubHkgcmVnaXN0ZXIgZm9yIHB1c2ggbm90aWZpY2F0aW9ucyBvbmNlIHBlciBzZXNzaW9uIG9yIGlmIHRoZSB1c2VyIGNoYW5nZXMgbm90aWZpY2F0aW9uIHBlcm1pc3Npb24gdG8gQXNrIG9yIEFsbG93LlxuICAgICAgICBpZiAoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcIk9ORV9TSUdOQUxfU0VTU0lPTlwiKVxuICAgICAgICAgICYmICFPbmVTaWduYWwuX2luaXRPcHRpb25zLnN1YmRvbWFpbk5hbWVcbiAgICAgICAgICAmJiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT0gXCJkZW5pZWRcIlxuICAgICAgICAgIHx8IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJPTkVfU0lHTkFMX05PVElGSUNBVElPTl9QRVJNSVNTSU9OXCIpID09IE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uKSlcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIk9ORV9TSUdOQUxfTk9USUZJQ0FUSU9OX1BFUk1JU1NJT05cIiwgTm90aWZpY2F0aW9uLnBlcm1pc3Npb24pO1xuXG4gICAgICAgIGlmIChPbmVTaWduYWwuX2luaXRPcHRpb25zLmF1dG9SZWdpc3RlciA9PSBmYWxzZSAmJiAhcmVnaXN0cmF0aW9uSWRSZXN1bHQgJiYgT25lU2lnbmFsLl9pbml0T3B0aW9ucy5zdWJkb21haW5OYW1lID09IG51bGwpXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgIT0gXCJ2aXNpYmxlXCIpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBPbmVTaWduYWwuX3Zpc2liaWxpdHljaGFuZ2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIE9uZVNpZ25hbC5fc2Vzc2lvbkluaXQoe30pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgfSxcblxuICByZWdpc3RlckZvclB1c2hOb3RpZmljYXRpb25zOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGlmICghaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCgpKSB7XG4gICAgICBsb2cud2FybihcIllvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHB1c2ggbm90aWZpY2F0aW9ucy5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdBUk5JTkc6IERvIE5PVCBhZGQgY2FsbGJhY2tzIHRoYXQgaGF2ZSB0byBmaXJlIHRvIGdldCBmcm9tIGhlcmUgdG8gd2luZG93Lm9wZW4gaW4gX3Nlc3Npb25Jbml0LlxuICAgIC8vICAgICAgICAgIE90aGVyd2lzZSB0aGUgcG9wLXVwIHRvIGFzayBmb3IgcHVzaCBwZXJtaXNzaW9uIG9uIEhUVFAgY29ubmVjdGlvbnMgd2lsbCBiZSBibG9ja2VkIGJ5IENocm9tZS5cbiAgICBpZiAoIW9wdGlvbnMpXG4gICAgICBvcHRpb25zID0ge307XG4gICAgb3B0aW9ucy5mcm9tUmVnaXN0ZXJGb3IgPSB0cnVlO1xuICAgIE9uZVNpZ25hbC5fc2Vzc2lvbkluaXQob3B0aW9ucyk7XG4gIH0sXG5cbiAgLy8gSHR0cCBvbmx5IC0gT25seSBjYWxsZWQgZnJvbSBpZnJhbWUncyBpbml0LmpzXG4gIF9pbml0SHR0cDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBPbmVTaWduYWwuX2luaXRPcHRpb25zID0gb3B0aW9ucztcblxuICAgIGlmIChvcHRpb25zLmNvbnRpbnVlUHJlc3NlZCkge1xuICAgICAgT25lU2lnbmFsLnNldFN1YnNjcmlwdGlvbih0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgaXNJZnJhbWUgPSAocGFyZW50ICE9IG51bGwgJiYgcGFyZW50ICE9IHdpbmRvdyk7XG4gICAgdmFyIGNyZWF0b3IgPSBvcGVuZXIgfHwgcGFyZW50O1xuXG4gICAgaWYgKCFjcmVhdG9yKSB7XG4gICAgICBsb2cuZGVidWcoXCJFUlJPUjpfaW5pdEh0dHA6IE5vIG9wZW5lciBvciBwYXJlbnQgZm91bmQhXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTZXR0aW5nIHVwIG1lc3NhZ2UgY2hhbm5lbCB0byByZWNlaXZlIG1lc3NhZ2UgZnJvbSBob3N0IHBhZ2UuXG4gICAgdmFyIG1lc3NhZ2VDaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgbWVzc2FnZUNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBsb2cuZGVidWcoXCJfaW5pdEh0dHAubWVzc2FnZUNoYW5uZWwucG9ydDEub25tZXNzYWdlXCIsIGV2ZW50KTtcblxuICAgICAgaWYgKGV2ZW50LmRhdGEuaW5pdE9wdGlvbnMpIHtcbiAgICAgICAgT25lU2lnbmFsLnNldERlZmF1bHROb3RpZmljYXRpb25VcmwoZXZlbnQuZGF0YS5pbml0T3B0aW9ucy5kZWZhdWx0VXJsKTtcbiAgICAgICAgT25lU2lnbmFsLnNldERlZmF1bHRUaXRsZShldmVudC5kYXRhLmluaXRPcHRpb25zLmRlZmF1bHRUaXRsZSk7XG4gICAgICAgIGlmIChldmVudC5kYXRhLmluaXRPcHRpb25zLmRlZmF1bHRJY29uKVxuICAgICAgICAgIE9uZVNpZ25hbC5zZXREZWZhdWx0SWNvbihldmVudC5kYXRhLmluaXRPcHRpb25zLmRlZmF1bHRJY29uKTtcblxuICAgICAgICBsb2cuZGVidWcoXCJkb2N1bWVudC5VUkxcIiwgZXZlbnQuZGF0YS5pbml0T3B0aW9ucy5wYXJlbnRfdXJsKTtcbiAgICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKFwiTm90aWZpY2F0aW9uT3BlbmVkXCIsIGV2ZW50LmRhdGEuaW5pdE9wdGlvbnMucGFyZW50X3VybClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiByZWdpc3RlckZvclB1c2hOb3RpZmljYXRpb25zX0dvdE5vdGlmaWNhdGlvbk9wZW5lZChub3RpZmljYXRpb25PcGVuZWRSZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIl9pbml0SHR0cCBOb3RpZmljYXRpb25PcGVuZWQgZGJcIiwgbm90aWZpY2F0aW9uT3BlbmVkUmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25PcGVuZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgT25lU2lnbmFsLl9kZWxldGVEYlZhbHVlKFwiTm90aWZpY2F0aW9uT3BlbmVkXCIsIGV2ZW50LmRhdGEuaW5pdE9wdGlvbnMucGFyZW50X3VybCk7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIk9uZVNpZ25hbC5fc2FmZVBvc3RNZXNzYWdlOnRhcmdldE9yaWdpbjpcIiwgT25lU2lnbmFsLl9pbml0T3B0aW9ucy5vcmlnaW4pO1xuXG4gICAgICAgICAgICAgIE9uZVNpZ25hbC5fc2FmZVBvc3RNZXNzYWdlKGNyZWF0b3IsIHtvcGVuZWROb3RpZmljYXRpb246IG5vdGlmaWNhdGlvbk9wZW5lZFJlc3VsdC5kYXRhfSwgT25lU2lnbmFsLl9pbml0T3B0aW9ucy5vcmlnaW4sIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGV2ZW50LmRhdGEuZ2V0Tm90aWZpY2F0aW9uUGVybWlzc2lvbikge1xuICAgICAgICBPbmVTaWduYWwuX2dldFN1YmRvbWFpblN0YXRlKGZ1bmN0aW9uIChjdXJTdGF0ZSkge1xuICAgICAgICAgIE9uZVNpZ25hbC5fc2FmZVBvc3RNZXNzYWdlKGNyZWF0b3IsIHtjdXJyZW50Tm90aWZpY2F0aW9uUGVybWlzc2lvbjogY3VyU3RhdGV9LCBPbmVTaWduYWwuX2luaXRPcHRpb25zLm9yaWdpbiwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXZlbnQuZGF0YS5zZXRTdWJkb21haW5TdGF0ZSlcbiAgICAgICAgT25lU2lnbmFsLnNldFN1YnNjcmlwdGlvbihldmVudC5kYXRhLnNldFN1YmRvbWFpblN0YXRlLnNldFN1YnNjcmlwdGlvbik7XG4gICAgfTtcblxuICAgIE9uZVNpZ25hbC5fZ2V0U3ViZG9tYWluU3RhdGUoZnVuY3Rpb24gKGN1clN0YXRlKSB7XG4gICAgICBjdXJTdGF0ZVtcImlzSWZyYW1lXCJdID0gaXNJZnJhbWU7XG4gICAgICBPbmVTaWduYWwuX3NhZmVQb3N0TWVzc2FnZShjcmVhdG9yLCB7b25lU2lnbmFsSW5pdFBhZ2VSZWFkeTogY3VyU3RhdGV9LCBPbmVTaWduYWwuX2luaXRPcHRpb25zLm9yaWdpbiwgW21lc3NhZ2VDaGFubmVsLnBvcnQyXSk7XG4gICAgfSk7XG5cbiAgICBPbmVTaWduYWwuX2luaXRTYXZlU3RhdGUoKTtcbiAgICBPbmVTaWduYWwuX2h0dHBSZWdpc3RyYXRpb24gPSB0cnVlO1xuICAgIGlmIChsb2NhdGlvbi5zZWFyY2guaW5kZXhPZihcIj9zZXNzaW9uPXRydWVcIikgPT0gMClcbiAgICAgIHJldHVybjtcblxuICAgIE9uZVNpZ25hbC5fZ2V0UGxheWVySWQobnVsbCwgZnVuY3Rpb24gKHBsYXllcl9pZCkge1xuICAgICAgaWYgKCFpc0lmcmFtZSB8fCBwbGF5ZXJfaWQpIHtcbiAgICAgICAgbG9nLmRlYnVnKFwiQmVmb3JlIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyXCIpO1xuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcbiAgICAgICAgbG9nLmRlYnVnKFwiQWZ0ZXIgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXJcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgX2dldFN1YmRvbWFpblN0YXRlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgc3RhdGUgPSB7fTtcblxuICAgIFByb21pc2UuYWxsKFtPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICd1c2VySWQnKSxcbiAgICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3JlZ2lzdHJhdGlvbklkJyksXG4gICAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ09wdGlvbnMnLCAnc3Vic2NyaXB0aW9uJyldKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gX2ludGVybmFsSW5pdF9Hb3RBcHBSZWdpc3RyYXRpb25TdWJzY3JpcHRpb25JZHMocmVzdWx0KSB7XG4gICAgICAgIHZhciB1c2VySWRSZXN1bHQgPSByZXN1bHRbMF07XG4gICAgICAgIHZhciByZWdpc3RyYXRpb25JZFJlc3VsdCA9IHJlc3VsdFsxXTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvblJlc3VsdCA9IHJlc3VsdFsyXTtcblxuICAgICAgICBjYWxsYmFjayh7XG4gICAgICAgICAgdXNlcklkOiB1c2VySWRSZXN1bHQgPyB1c2VySWRSZXN1bHQuaWQgOiBudWxsLFxuICAgICAgICAgIHJlZ2lzdHJhdGlvbklkOiByZWdpc3RyYXRpb25JZFJlc3VsdCA/IHJlZ2lzdHJhdGlvbklkUmVzdWx0LmlkIDogbnVsbCxcbiAgICAgICAgICBub3RpZlBlcm1zc2lvbjogTm90aWZpY2F0aW9uLnBlcm1pc3Npb24sXG4gICAgICAgICAgc3Vic2NyaXB0aW9uU2V0OiBzdWJzY3JpcHRpb25SZXN1bHQgPyBzdWJzY3JpcHRpb25SZXN1bHQudmFsdWUgOiBudWxsLFxuICAgICAgICAgIGlzUHVzaEVuYWJsZWQ6ICggTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT0gXCJncmFudGVkXCJcbiAgICAgICAgICAmJiB1c2VySWRSZXN1bHRcbiAgICAgICAgICAmJiByZWdpc3RyYXRpb25JZFJlc3VsdFxuICAgICAgICAgICYmICgoc3Vic2NyaXB0aW9uUmVzdWx0ICYmIHN1YnNjcmlwdGlvblJlc3VsdC52YWx1ZSkgfHwgc3Vic2NyaXB0aW9uUmVzdWx0ID09IG51bGwpKVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgfSk7XG4gICAgO1xuICB9LFxuXG4gIF9pbml0U2F2ZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgT25lU2lnbmFsLl9hcHBfaWQgPSBPbmVTaWduYWwuX2luaXRPcHRpb25zLmFwcElkO1xuICAgIE9uZVNpZ25hbC5fcHV0RGJWYWx1ZShcIklkc1wiLCB7dHlwZTogXCJhcHBJZFwiLCBpZDogT25lU2lnbmFsLl9hcHBfaWR9KTtcbiAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJPcHRpb25zXCIsIHtrZXk6IFwicGFnZVRpdGxlXCIsIHZhbHVlOiBkb2N1bWVudC50aXRsZX0pO1xuICB9LFxuXG4gIF9zdXBwb3J0c0RpcmVjdFBlcm1pc3Npb246IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNTdXBwb3J0ZWRTYWZhcmkoKVxuICAgICAgfHwgbG9jYXRpb24ucHJvdG9jb2wgPT0gJ2h0dHBzOidcbiAgICAgIHx8IGxvY2F0aW9uLmhvc3QuaW5kZXhPZihcImxvY2FsaG9zdFwiKSA9PSAwXG4gICAgICB8fCBsb2NhdGlvbi5ob3N0LmluZGV4T2YoXCIxMjcuMC4wLjFcIikgPT0gMDtcbiAgfSxcblxuXG4gIF9zZXNzaW9uSW5pdDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBsb2cuZGVidWcoXCJDYWxsZWQgT25lU2lnbmFsLl9zZXNzaW9uSW5pdCgpOlwiLCBvcHRpb25zKTtcbiAgICBPbmVTaWduYWwuX2luaXRTYXZlU3RhdGUoKTtcblxuICAgIHZhciBob3N0UGFnZVByb3RvY29sID0gbG9jYXRpb24ub3JpZ2luLm1hdGNoKC9eaHR0cChzfCk6XFwvXFwvKHd3d1xcLnwpLylbMF07XG5cbiAgICAvLyBJZiBIVFRQIG9yIHVzaW5nIHN1YmRvbWFpbiBtb2RlXG4gICAgaWYgKE9uZVNpZ25hbC5fdXNlSHR0cE1vZGUpIHtcbiAgICAgIGlmIChvcHRpb25zLmZyb21SZWdpc3RlckZvcikge1xuICAgICAgICB2YXIgZHVhbFNjcmVlbkxlZnQgPSB3aW5kb3cuc2NyZWVuTGVmdCAhPSB1bmRlZmluZWQgPyB3aW5kb3cuc2NyZWVuTGVmdCA6IHNjcmVlbi5sZWZ0O1xuICAgICAgICB2YXIgZHVhbFNjcmVlblRvcCA9IHdpbmRvdy5zY3JlZW5Ub3AgIT0gdW5kZWZpbmVkID8gd2luZG93LnNjcmVlblRvcCA6IHNjcmVlbi50b3A7XG5cbiAgICAgICAgdmFyIHRoaXNXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoID8gd2luZG93LmlubmVyV2lkdGggOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggOiBzY3JlZW4ud2lkdGg7XG4gICAgICAgIHZhciB0aGlzSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ID8gd2luZG93LmlubmVySGVpZ2h0IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgOiBzY3JlZW4uaGVpZ2h0O1xuICAgICAgICB2YXIgY2hpbGRXaWR0aCA9IE9uZVNpZ25hbC5fd2luZG93V2lkdGg7XG4gICAgICAgIHZhciBjaGlsZEhlaWdodCA9IE9uZVNpZ25hbC5fd2luZG93SGVpZ2h0O1xuXG4gICAgICAgIHZhciBsZWZ0ID0gKCh0aGlzV2lkdGggLyAyKSAtIChjaGlsZFdpZHRoIC8gMikpICsgZHVhbFNjcmVlbkxlZnQ7XG4gICAgICAgIHZhciB0b3AgPSAoKHRoaXNIZWlnaHQgLyAyKSAtIChjaGlsZEhlaWdodCAvIDIpKSArIGR1YWxTY3JlZW5Ub3A7XG5cbiAgICAgICAgbG9nLmRlYnVnKCdPcGVuaW5nIHBvcHVwIHdpbmRvdy4nKTtcbiAgICAgICAgdmFyIG1lc3NhZ2VfbG9jYWxpemF0aW9uX29wdHMgPSBPbmVTaWduYWwuX2luaXRPcHRpb25zWydwcm9tcHRPcHRpb25zJ107XG4gICAgICAgIHZhciBtZXNzYWdlX2xvY2FsaXphdGlvbl9vcHRzX3N0ciA9ICcnO1xuICAgICAgICBpZiAobWVzc2FnZV9sb2NhbGl6YXRpb25fb3B0cykge1xuICAgICAgICAgIHZhciBtZXNzYWdlX2xvY2FsaXphdGlvbl9wYXJhbXMgPSBbJ2FjdGlvbk1lc3NhZ2UnLFxuICAgICAgICAgICAgJ2V4YW1wbGVOb3RpZmljYXRpb25UaXRsZURlc2t0b3AnLFxuICAgICAgICAgICAgJ2V4YW1wbGVOb3RpZmljYXRpb25NZXNzYWdlRGVza3RvcCcsXG4gICAgICAgICAgICAnZXhhbXBsZU5vdGlmaWNhdGlvblRpdGxlTW9iaWxlJyxcbiAgICAgICAgICAgICdleGFtcGxlTm90aWZpY2F0aW9uTWVzc2FnZU1vYmlsZScsXG4gICAgICAgICAgICAnZXhhbXBsZU5vdGlmaWNhdGlvbkNhcHRpb24nLFxuICAgICAgICAgICAgJ2FjY2VwdEJ1dHRvblRleHQnLFxuICAgICAgICAgICAgJ2NhbmNlbEJ1dHRvblRleHQnXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2VfbG9jYWxpemF0aW9uX3BhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IG1lc3NhZ2VfbG9jYWxpemF0aW9uX3BhcmFtc1tpXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1lc3NhZ2VfbG9jYWxpemF0aW9uX29wdHNba2V5XTtcbiAgICAgICAgICAgIHZhciBlbmNvZGVkX3ZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZV9sb2NhbGl6YXRpb25fb3B0c19zdHIgKz0gJyYnICsga2V5ICsgJz0nICsgZW5jb2RlZF92YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkV2luZG93ID0gd2luZG93Lm9wZW4oT25lU2lnbmFsLl9pbml0T25lU2lnbmFsSHR0cCArIFwiP1wiICsgbWVzc2FnZV9sb2NhbGl6YXRpb25fb3B0c19zdHIgKyBcIiZob3N0UGFnZVByb3RvY29sPVwiICsgaG9zdFBhZ2VQcm90b2NvbCwgXCJfYmxhbmtcIiwgJ3Njcm9sbGJhcnM9eWVzLCB3aWR0aD0nICsgY2hpbGRXaWR0aCArICcsIGhlaWdodD0nICsgY2hpbGRIZWlnaHQgKyAnLCB0b3A9JyArIHRvcCArICcsIGxlZnQ9JyArIGxlZnQpO1xuXG4gICAgICAgIGlmIChjaGlsZFdpbmRvdylcbiAgICAgICAgICBjaGlsZFdpbmRvdy5mb2N1cygpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnT3BlbmluZyBpRnJhbWUuJyk7XG4gICAgICAgIE9uZVNpZ25hbC5fYWRkU2Vzc2lvbklmcmFtZShob3N0UGFnZVByb3RvY29sKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1N1cHBvcnRlZFNhZmFyaSgpKSB7XG4gICAgICBpZiAoT25lU2lnbmFsLl9pbml0T3B0aW9ucy5zYWZhcmlfd2ViX2lkKSB7XG4gICAgICAgIHZhciBub3RpZmljYXRpb25QZXJtaXNzaW9uQmVmb3JlUmVxdWVzdCA9IE9uZVNpZ25hbC5fZ2V0Tm90aWZpY2F0aW9uUGVybWlzc2lvbihPbmVTaWduYWwuX2luaXRPcHRpb25zLnNhZmFyaV93ZWJfaWQpO1xuICAgICAgICB3aW5kb3cuc2FmYXJpLnB1c2hOb3RpZmljYXRpb24ucmVxdWVzdFBlcm1pc3Npb24oXG4gICAgICAgICAgT25lU2lnbmFsLl9IT1NUX1VSTCArICdzYWZhcmknLFxuICAgICAgICAgIE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc2FmYXJpX3dlYl9pZCxcbiAgICAgICAgICB7YXBwX2lkOiBPbmVTaWduYWwuX2FwcF9pZH0sXG4gICAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhkYXRhKTtcbiAgICAgICAgICAgIHZhciBub3RpZmljYXRpb25QZXJtaXNzaW9uQWZ0ZXJSZXF1ZXN0ID0gT25lU2lnbmFsLl9nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc2FmYXJpX3dlYl9pZCk7XG4gICAgICAgICAgICBpZiAoZGF0YS5kZXZpY2VUb2tlbikge1xuICAgICAgICAgICAgICBPbmVTaWduYWwuX3JlZ2lzdGVyV2l0aE9uZVNpZ25hbChPbmVTaWduYWwuX2FwcF9pZCwgZGF0YS5kZXZpY2VUb2tlbi50b0xvd2VyQ2FzZSgpLCA3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiT05FX1NJR05BTF9TRVNTSU9OXCIsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT25lU2lnbmFsLl90cmlnZ2VyRXZlbnRfbmF0aXZlUHJvbXB0UGVybWlzc2lvbkNoYW5nZWQobm90aWZpY2F0aW9uUGVybWlzc2lvbkJlZm9yZVJlcXVlc3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5tb2RhbFByb21wdCAmJiBvcHRpb25zLmZyb21SZWdpc3RlckZvcikgeyAvLyBJZiBIVFRQUyAtIFNob3cgbW9kYWxcbiAgICAgIGlmICghaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIGxvZy53YXJuKCdBbiBhdHRlbXB0IHdhcyBtYWRlIHRvIG9wZW4gdGhlIEhUVFBTIG1vZGFsIHBlcm1pc3Npb24gcHJvbXB0LCBidXQgcHVzaCBub3RpZmljYXRpb25zIGFyZSBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3Nlci4gT3BlbmluZyBjYW5jZWxlZC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgT25lU2lnbmFsLmlzUHVzaE5vdGlmaWNhdGlvbnNFbmFibGVkKGZ1bmN0aW9uIChwdXNoRW5hYmxlZCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCAnT25lU2lnbmFsLWlmcmFtZS1tb2RhbCcpO1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9ICc8ZGl2IGlkPVwibm90aWYtcGVybWlzc2lvblwiIHN0eWxlPVwiYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjcpOyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgbGVmdDogMDsgcmlnaHQ6IDA7IGJvdHRvbTogMDsgei1pbmRleDogOTAwMDsgZGlzcGxheTogYmxvY2tcIj48L2Rpdj4nO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBpZnJhbWVTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIGlmcmFtZVN0eWxlLmlubmVySFRNTCA9IFwiQG1lZGlhIChtYXgtd2lkdGg6IDU2MHB4KSB7IC5PbmVTaWduYWwtcGVybWlzc2lvbi1pZnJhbWUgeyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlO30gfVwiXG4gICAgICAgICAgKyBcIkBtZWRpYSAobWluLXdpZHRoOiA1NjFweCkgeyAuT25lU2lnbmFsLXBlcm1pc3Npb24taWZyYW1lIHsgdG9wOiA1MCU7IGxlZnQ6IDUwJTsgbWFyZ2luLWxlZnQ6IC0yNzVweDsgbWFyZ2luLXRvcDogLTI0OHB4O30gfVwiO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKGlmcmFtZVN0eWxlKTtcblxuICAgICAgICB2YXIgaWZyYW1lTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgIGlmcmFtZU5vZGUuY2xhc3NOYW1lID0gXCJPbmVTaWduYWwtcGVybWlzc2lvbi1pZnJhbWVcIlxuICAgICAgICBpZnJhbWVOb2RlLnN0eWxlLmNzc1RleHQgPSBcImJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMSk7IHBvc2l0aW9uOiBmaXhlZDtcIjtcbiAgICAgICAgaWZyYW1lTm9kZS5zcmMgPSBPbmVTaWduYWwuX2luaXRPbmVTaWduYWxIdHRwXG4gICAgICAgICAgKyAnP2lkPScgKyBPbmVTaWduYWwuX2FwcF9pZFxuICAgICAgICAgICsgJyZodHRwc1Byb21wdD10cnVlJ1xuICAgICAgICAgICsgJyZwdXNoRW5hYmxlZD0nICsgcHVzaEVuYWJsZWRcbiAgICAgICAgICArICcmcGVybWlzc2lvbkJsb2NrZWQ9JyArICh0eXBlb2YgTm90aWZpY2F0aW9uID09PSBcInVuZGVmaW5lZFwiIHx8IE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09IFwiZGVuaWVkXCIpXG4gICAgICAgICAgKyAnJmhvc3RQYWdlUHJvdG9jb2w9JyArIGhvc3RQYWdlUHJvdG9jb2w7XG4gICAgICAgIGlmcmFtZU5vZGUuc2V0QXR0cmlidXRlKCdmcmFtZWJvcmRlcicsICcwJyk7XG4gICAgICAgIGlmcmFtZU5vZGUud2lkdGggPSBPbmVTaWduYWwuX3dpbmRvd1dpZHRoLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmcmFtZU5vZGUuaGVpZ2h0ID0gT25lU2lnbmFsLl93aW5kb3dIZWlnaHQudG9TdHJpbmcoKTtcblxuICAgICAgICBsb2cuZGVidWcoJ09wZW5pbmcgSFRUUFMgbW9kYWwgcHJvbXB0LicpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vdGlmLXBlcm1pc3Npb25cIikuYXBwZW5kQ2hpbGQoaWZyYW1lTm9kZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikgLy8gSWYgSFRUUFMgLSBTaG93IG5hdGl2ZSBwcm9tcHRcbiAgICAgIE9uZVNpZ25hbC5fcmVnaXN0ZXJGb3JXM0NQdXNoKG9wdGlvbnMpO1xuICAgIGVsc2VcbiAgICAgIGxvZy5kZWJ1ZygnU2VydmljZSB3b3JrZXJzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4nKTtcblxuICAgIHRyaWdnZXJFdmVudCgnb25lc2lnbmFsLnNkay5pbml0aWFsaXplZCcsIG51bGwpO1xuICB9LFxuXG4gIF9yZWdpc3RlckZvclczQ1B1c2g6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICdyZWdpc3RyYXRpb25JZCcpXG4gICAgICAudGhlbihmdW5jdGlvbiBfcmVnaXN0ZXJGb3JXM0NQdXNoX0dvdFJlZ2lzdHJhdGlvbklkKHJlZ2lzdHJhdGlvbklkUmVzdWx0KSB7XG4gICAgICAgIGlmICghcmVnaXN0cmF0aW9uSWRSZXN1bHQgfHwgIW9wdGlvbnMuZnJvbVJlZ2lzdGVyRm9yIHx8IE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uICE9IFwiZ3JhbnRlZFwiKSB7XG4gICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuZ2V0UmVnaXN0cmF0aW9uKCkudGhlbihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBzd19wYXRoID0gXCJcIjtcblxuICAgICAgICAgICAgaWYgKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMucGF0aClcbiAgICAgICAgICAgICAgc3dfcGF0aCA9IE9uZVNpZ25hbC5faW5pdE9wdGlvbnMucGF0aDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJ1bmRlZmluZWRcIikgLy8gTm90aGluZyByZWdpc3RlcmVkLCB2ZXJ5IGZpcnN0IHJ1blxuICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcihzd19wYXRoICsgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBVEgsIE9uZVNpZ25hbC5TRVJWSUNFX1dPUktFUl9QQVJBTSkudGhlbihPbmVTaWduYWwuX2VuYWJsZU5vdGlmaWNhdGlvbnMsIE9uZVNpZ25hbC5fcmVnaXN0ZXJFcnJvcik7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGV2ZW50LmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5hY3RpdmUuc2NyaXB0VVJMLmluZGV4T2Yoc3dfcGF0aCArIE9uZVNpZ25hbC5TRVJWSUNFX1dPUktFUl9QQVRIKSA+IC0xKSB7XG5cbiAgICAgICAgICAgICAgICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ1dPUktFUjFfT05FX1NJR05BTF9TV19WRVJTSU9OJylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZlcnNpb25SZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2lvblJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNpb25SZXN1bHQuaWQgIT0gT25lU2lnbmFsLl9WRVJTSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnVucmVnaXN0ZXIoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcihzd19wYXRoICsgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1VQREFURVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcihzd19wYXRoICsgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBVEgsIE9uZVNpZ25hbC5TRVJWSUNFX1dPUktFUl9QQVJBTSkudGhlbihPbmVTaWduYWwuX2VuYWJsZU5vdGlmaWNhdGlvbnMsIE9uZVNpZ25hbC5fcmVnaXN0ZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcblxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldmVudC5hY3RpdmUuc2NyaXB0VVJMLmluZGV4T2Yoc3dfcGF0aCArIE9uZVNpZ25hbC5TRVJWSUNFX1dPUktFUl9VUERBVEVSX1BBVEgpID4gLTEpIHtcblxuICAgICAgICAgICAgICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAnV09SS0VSMV9PTkVfU0lHTkFMX1NXX1ZFUlNJT04nKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmVyc2lvblJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZXJzaW9uUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVyc2lvblJlc3VsdC5pZCAhPSBPbmVTaWduYWwuX1ZFUlNJT04pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudW5yZWdpc3RlcigpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfVVBEQVRFUl9QQVRILCBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFSQU0pLnRoZW4oT25lU2lnbmFsLl9lbmFibGVOb3RpZmljYXRpb25zLCBPbmVTaWduYWwuX3JlZ2lzdGVyRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcihzd19wYXRoICsgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1VQREFURVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQuaW5zdGFsbGluZyA9PSBudWxsKVxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKHN3X3BhdGggKyBPbmVTaWduYWwuU0VSVklDRV9XT1JLRVJfUEFUSCwgT25lU2lnbmFsLlNFUlZJQ0VfV09SS0VSX1BBUkFNKS50aGVuKE9uZVNpZ25hbC5fZW5hYmxlTm90aWZpY2F0aW9ucywgT25lU2lnbmFsLl9yZWdpc3RlckVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgIH0pO1xuICAgIDtcbiAgfSxcblxuICBfYWRkU2Vzc2lvbklmcmFtZTogZnVuY3Rpb24gKGhvc3RQYWdlUHJvdG9jb2wpIHtcblxuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBub2RlLnNyYyA9IE9uZVNpZ25hbC5faW5pdE9uZVNpZ25hbEh0dHAgKyBcIklmcmFtZVwiO1xuICAgIGlmIChzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiT05FX1NJR05BTF9TRVNTSU9OXCIpKVxuICAgICAgbm9kZS5zcmMgKz0gXCI/c2Vzc2lvbj10cnVlXCJcbiAgICAgICAgKyBcIiZob3N0UGFnZVByb3RvY29sPVwiICsgaG9zdFBhZ2VQcm90b2NvbDtcbiAgICBlbHNlXG4gICAgICBub2RlLnNyYyArPSBcIj9ob3N0UGFnZVByb3RvY29sPVwiICsgaG9zdFBhZ2VQcm90b2NvbFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgbG9nLmRlYnVnKCdBZGRpbmcgc2Vzc2lvbiBpRnJhbWUuJyk7XG5cbiAgICBPbmVTaWduYWwuX3Nlc3Npb25JZnJhbWVBZGRlZCA9IHRydWU7XG4gIH0sXG5cbiAgX3JlZ2lzdGVyRXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICBsb2cuZGVidWcoXCJuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcjpFUlJPUjogXCIgKyBlcnIpO1xuICB9LFxuXG4gIF9lbmFibGVOb3RpZmljYXRpb25zOiBmdW5jdGlvbiAoZXhpc3RpbmdTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKSB7IC8vIGlzIFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24gdHlwZVxuICAgIGlmIChleGlzdGluZ1NlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pXG4gICAgICBsb2cuZGVidWcoJ1RoZXJlIGlzIGFuIG9sZGVyIFNlcnZpY2VXb3JrZXI6JywgZXhpc3RpbmdTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKTtcbiAgICBpZiAoISgnUHVzaE1hbmFnZXInIGluIHdpbmRvdykpIHtcbiAgICAgIGxvZy5kZWJ1ZyhcIlB1c2ggbWVzc2FnaW5nIGlzIG5vdCBzdXBwb3J0ZWQuIE5vIFB1c2hNYW5hZ2VyLlwiKTtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJPTkVfU0lHTkFMX1NFU1NJT05cIiwgdHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCEoJ3Nob3dOb3RpZmljYXRpb24nIGluIFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHJvdG90eXBlKSkge1xuICAgICAgbG9nLmRlYnVnKFwiTm90aWZpY2F0aW9ucyBhcmUgbm90IHN1cHBvcnRlZC4gc2hvd05vdGlmaWNhdGlvbiBub3QgYXZhaWxhYmxlIGluIFNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24uXCIpO1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIk9ORV9TSUdOQUxfU0VTU0lPTlwiLCB0cnVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09ICdkZW5pZWQnKSB7XG4gICAgICBsb2cud2FybihcIlRoZSB1c2VyIGhhcyBkaXNhYmxlZCBub3RpZmljYXRpb25zLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKSB7XG4gICAgICBsb2cuaW5mbygnU2VydmljZSB3b3JrZXIgYWN0aXZlOicsIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pO1xuXG4gICAgICBPbmVTaWduYWwuX3N1YnNjcmliZUZvclB1c2goc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbik7XG4gICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgICA7XG4gIH0sXG5cbiAgLypcbiAgIFJldHVybnMgdGhlIGN1cnJlbnQgYnJvd3Nlci1hZ25vc3RpYyBub3RpZmljYXRpb24gcGVybWlzc2lvbiBhcyBcImRlZmF1bHRcIiwgXCJncmFudGVkXCIsIFwiZGVuaWVkXCIuXG4gICBzYWZhcmlXZWJJZDogVXNlZCBvbmx5IHRvIGdldCB0aGUgY3VycmVudCBub3RpZmljYXRpb24gcGVybWlzc2lvbiBzdGF0ZSBpbiBTYWZhcmkgKHJlcXVpcmVkIGFzIHBhcnQgb2YgdGhlIHNwZWMpLlxuICAgKi9cbiAgX2dldE5vdGlmaWNhdGlvblBlcm1pc3Npb246IGZ1bmN0aW9uIChzYWZhcmlXZWJJZCkge1xuICAgIGlmICh3aW5kb3cuc2FmYXJpKSB7XG4gICAgICAvLyBUaGUgdXNlciBpcyBvbiBTYWZhcmlcbiAgICAgIC8vIEEgd2ViIElEIGlzIHJlcXVpcmVkIHRvIGRldGVybWluZSB0aGUgY3VycmVudCBub3RpZmljaWF0aW9uIHBlcm1pc3Npb25cbiAgICAgIGlmIChzYWZhcmlXZWJJZCkge1xuICAgICAgICByZXR1cm4gd2luZG93LnNhZmFyaS5wdXNoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24oc2FmYXJpV2ViSWQpLnBlcm1pc3Npb247XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gVGhlIHVzZXIgZGlkbid0IHNldCB1cCBTYWZhcmkgd2ViIHB1c2ggcHJvcGVybHk7IG5vdGlmaWNhdGlvbnMgYXJlIHVubGlrZWx5IHRvIGJlIGVuYWJsZWRcbiAgICAgICAgcmV0dXJuIFwiZGVmYXVsdFwiO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIElkZW50aWNhbCBBUEkgb24gRmlyZWZveCBhbmQgQ2hyb21lXG4gICAgICByZXR1cm4gTm90aWZpY2F0aW9uLnBlcm1pc3Npb247XG4gICAgfVxuICB9LFxuXG4gIF90cmlnZ2VyRXZlbnRfY3VzdG9tUHJvbXB0Q2xpY2tlZDogZnVuY3Rpb24gKGNsaWNrUmVzdWx0KSB7XG4gICAgdmFyIHJlY2VudFBlcm1pc3Npb25zID0gTGltaXRTdG9yZS5wdXQoJ25vdGlmaWNhdGlvbi5wZXJtaXNzaW9uJywgY2xpY2tSZXN1bHQpO1xuICAgIHRyaWdnZXJFdmVudCgnb25lc2lnbmFsLnByb21wdC5jdXN0b20uY2xpY2tlZCcsIHtcbiAgICAgIHJlc3VsdDogY2xpY2tSZXN1bHRcbiAgICB9KTtcbiAgfSxcblxuICBfdHJpZ2dlckV2ZW50X25hdGl2ZVByb21wdFBlcm1pc3Npb25DaGFuZ2VkOiBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICBpZiAodG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdG8gPSBPbmVTaWduYWwuX2dldE5vdGlmaWNhdGlvblBlcm1pc3Npb24oT25lU2lnbmFsLl9pbml0T3B0aW9ucy5zYWZhcmlfd2ViX2lkKTtcbiAgICB9XG4gICAgaWYgKGZyb20gIT09IHRvKSB7XG4gICAgICB2YXIgcmVjZW50UGVybWlzc2lvbnMgPSBMaW1pdFN0b3JlLnB1dCgnbm90aWZpY2F0aW9uLnBlcm1pc3Npb24nLCB0byk7XG4gICAgICB0cmlnZ2VyRXZlbnQoJ29uZXNpZ25hbC5wcm9tcHQubmF0aXZlLnBlcm1pc3Npb25jaGFuZ2VkJywge1xuICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICB0bzogdG9cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBfdHJpZ2dlckV2ZW50X3N1YnNjcmlwdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uICh0bykge1xuICAgIHRyaWdnZXJFdmVudCgnb25lc2lnbmFsLnN1YnNjcmlwdGlvbi5jaGFuZ2VkJywgdG8pO1xuICB9LFxuXG4gIF90cmlnZ2VyRXZlbnRfZGJWYWx1ZVJldHJpZXZlZDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdHJpZ2dlckV2ZW50KCdvbmVzaWduYWwuZGIudmFsdWVyZXRyaWV2ZWQnLCB2YWx1ZSk7XG4gIH0sXG5cbiAgX3RyaWdnZXJFdmVudF9kYlZhbHVlU2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0cmlnZ2VyRXZlbnQoJ29uZXNpZ25hbC5kYi52YWx1ZXNldCcsIHZhbHVlKTtcbiAgfSxcblxuICBfdHJpZ2dlckV2ZW50X2ludGVybmFsU3Vic2NyaXB0aW9uU2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0cmlnZ2VyRXZlbnQoJ29uZXNpZ25hbC5pbnRlcm5hbC5zdWJzY3JpcHRpb25zZXQnLCB2YWx1ZSk7XG4gIH0sXG5cbiAgX3N1YnNjcmliZUZvclB1c2g6IGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKSB7XG4gICAgdmFyIG5vdGlmaWNhdGlvblBlcm1pc3Npb25CZWZvcmVSZXF1ZXN0ID0gT25lU2lnbmFsLl9nZXROb3RpZmljYXRpb25QZXJtaXNzaW9uKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMuc2FmYXJpX3dlYl9pZCk7XG4gICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5zdWJzY3JpYmUoe3VzZXJWaXNpYmxlT25seTogdHJ1ZX0pXG4gICAgICAudGhlbihmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJPTkVfU0lHTkFMX05PVElGSUNBVElPTl9QRVJNSVNTSU9OXCIsIE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uKTtcblxuICAgICAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICdhcHBJZCcpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gX3N1YnNjcmliZUZvclB1c2hfR290QXBwSWQoYXBwSWRSZXN1bHQpIHtcbiAgICAgICAgICAgIHZhciBhcHBJZCA9IGFwcElkUmVzdWx0LmlkO1xuICAgICAgICAgICAgbG9nLmRlYnVnKFwiQ2FsbGVkIE9uZVNpZ25hbC5fc3Vic2NyaWJlRm9yUHVzaCgpIC0+IHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuc3Vic2NyaWJlKCkuXCIpO1xuXG4gICAgICAgICAgICB2YXIgcmVnaXN0cmF0aW9uSWQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25JZCAhPSBcInVuZGVmaW5lZFwiKSAvLyBDaHJvbWUgNDMgJiA0MlxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbklkID0gc3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbklkO1xuICAgICAgICAgICAgICBlbHNlICAvLyBDaHJvbWUgNDQrIGFuZCBGaXJlRm94XG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uSWQgPSBzdWJzY3JpcHRpb24uZW5kcG9pbnQucmVwbGFjZShuZXcgUmVnRXhwKFwiXihodHRwczovL2FuZHJvaWQuZ29vZ2xlYXBpcy5jb20vZ2NtL3NlbmQvfGh0dHBzOi8vdXBkYXRlcy5wdXNoLnNlcnZpY2VzLm1vemlsbGEuY29tL3B1c2gvKVwiKSwgXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGxvZy53YXJuKCdDb3VsZCBub3Qgc3Vic2NyaWJlIHlvdXIgYnJvd3NlciBmb3IgcHVzaCBub3RpZmljYXRpb25zLicpO1xuXG4gICAgICAgICAgICBPbmVTaWduYWwuX3JlZ2lzdGVyV2l0aE9uZVNpZ25hbChhcHBJZCwgcmVnaXN0cmF0aW9uSWQsIGlzU3VwcG9ydGVkRmlyZUZveCgpID8gOCA6IDUpO1xuXG4gICAgICAgICAgICBpZiAoIU9uZVNpZ25hbC5fdXNpbmdOYXRpdmVQZXJtaXNzaW9uSG9vaykge1xuICAgICAgICAgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9uYXRpdmVQcm9tcHRQZXJtaXNzaW9uQ2hhbmdlZChub3RpZmljYXRpb25QZXJtaXNzaW9uQmVmb3JlUmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgbG9nLmVycm9yKCdFcnJvciB3aGlsZSBzdWJzY3JpYmluZyBmb3IgcHVzaDonLCBlKTtcblxuICAgICAgICBpZiAoIU9uZVNpZ25hbC5fdXNpbmdOYXRpdmVQZXJtaXNzaW9uSG9vaylcbiAgICAgICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9uYXRpdmVQcm9tcHRQZXJtaXNzaW9uQ2hhbmdlZChub3RpZmljYXRpb25QZXJtaXNzaW9uQmVmb3JlUmVxdWVzdCk7XG5cbiAgICAgICAgaWYgKGUuY29kZSA9PSAyMCAmJiBvcGVuZXIgJiYgT25lU2lnbmFsLl9odHRwUmVnaXN0cmF0aW9uKVxuICAgICAgICAgIHdpbmRvdy5jbG9zZSgpO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgc2VuZFRhZzogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIganNvbktleVZhbHVlID0ge307XG4gICAganNvbktleVZhbHVlW2tleV0gPSB2YWx1ZTtcbiAgICBPbmVTaWduYWwuc2VuZFRhZ3MoanNvbktleVZhbHVlKTtcbiAgfSxcblxuICBzZW5kVGFnczogZnVuY3Rpb24gKGpzb25QYWlyKSB7XG4gICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIHNlbmRUYWdzX0dvdFVzZXJJZCh1c2VySWRSZXN1bHQpIHtcbiAgICAgICAgaWYgKHVzZXJJZFJlc3VsdClcbiAgICAgICAgICBPbmVTaWduYWwuX3NlbmRUb09uZVNpZ25hbEFwaShcInBsYXllcnMvXCIgKyB1c2VySWRSZXN1bHQuaWQsIFwiUFVUXCIsIHtcbiAgICAgICAgICAgIGFwcF9pZDogT25lU2lnbmFsLl9hcHBfaWQsXG4gICAgICAgICAgICB0YWdzOiBqc29uUGFpclxuICAgICAgICAgIH0pO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoT25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3RlciA9PSBudWxsKVxuICAgICAgICAgICAgT25lU2lnbmFsLl90YWdzVG9TZW5kT25SZWdpc3RlciA9IGpzb25QYWlyO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlc3VsdE9iaiA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgX29iaiBpbiBPbmVTaWduYWwuX3RhZ3NUb1NlbmRPblJlZ2lzdGVyKSByZXN1bHRPYmpbX29ial0gPSBPbmVTaWduYWwuX3RhZ3NUb1NlbmRPblJlZ2lzdGVyW19vYmpdO1xuICAgICAgICAgICAgZm9yICh2YXIgX29iaiBpbiBqc29uUGFpcikgcmVzdWx0T2JqW19vYmpdID0ganNvblBhaXJbX29ial07XG4gICAgICAgICAgICBPbmVTaWduYWwuX3RhZ3NUb1NlbmRPblJlZ2lzdGVyID0gcmVzdWx0T2JqO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoJ3NlbmRUYWdzOicsIGUpO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgZGVsZXRlVGFnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgT25lU2lnbmFsLmRlbGV0ZVRhZ3MoW2tleV0pO1xuICB9LFxuXG4gIGRlbGV0ZVRhZ3M6IGZ1bmN0aW9uIChrZXlBcnJheSkge1xuICAgIHZhciBqc29uUGFpciA9IHt9O1xuICAgIHZhciBsZW5ndGggPSBrZXlBcnJheS5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgIGpzb25QYWlyW2tleUFycmF5W2ldXSA9IFwiXCI7XG5cbiAgICBPbmVTaWduYWwuc2VuZFRhZ3MoanNvblBhaXIpO1xuICB9LFxuXG4gIF9oYW5kbGVOb3RpZmljYXRpb25PcGVuZWQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBub3RpZmljYXRpb25EYXRhID0gSlNPTi5wYXJzZShldmVudC5ub3RpZmljYXRpb24udGFnKTtcbiAgICBldmVudC5ub3RpZmljYXRpb24uY2xvc2UoKTtcblxuICAgIFByb21pc2UuYWxsKFtPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICdhcHBJZCcpLCBPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICd1c2VySWQnKV0pXG4gICAgICAudGhlbihmdW5jdGlvbiBfaGFuZGxlTm90aWZpY2F0aW9uT3BlbmVkX0dvdEFwcFVzZXJJZHMocmVzdWx0cykge1xuICAgICAgICB2YXIgYXBwSWRSZXN1bHQgPSByZXN1bHRzWzBdO1xuICAgICAgICB2YXIgdXNlcklkUmVzdWx0ID0gcmVzdWx0c1sxXTtcbiAgICAgICAgaWYgKGFwcElkUmVzdWx0ICYmIHVzZXJJZFJlc3VsdCkge1xuICAgICAgICAgIE9uZVNpZ25hbC5fc2VuZFRvT25lU2lnbmFsQXBpKFwibm90aWZpY2F0aW9ucy9cIiArIG5vdGlmaWNhdGlvbkRhdGEuaWQsIFwiUFVUXCIsIHtcbiAgICAgICAgICAgIGFwcF9pZDogYXBwSWRSZXN1bHQuaWQsXG4gICAgICAgICAgICBwbGF5ZXJfaWQ6IHVzZXJJZFJlc3VsdC5pZCxcbiAgICAgICAgICAgIG9wZW5lZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgIH0pO1xuICAgIDtcblxuICAgIGV2ZW50LndhaXRVbnRpbChcbiAgICAgIGNsaWVudHMubWF0Y2hBbGwoe3R5cGU6IFwid2luZG93XCJ9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xpZW50TGlzdCkge1xuICAgICAgICAgIHZhciBsYXVuY2hVUkwgPSByZWdpc3RyYXRpb24uc2NvcGU7XG4gICAgICAgICAgaWYgKE9uZVNpZ25hbC5fZGVmYXVsdExhdW5jaFVSTClcbiAgICAgICAgICAgIGxhdW5jaFVSTCA9IE9uZVNpZ25hbC5fZGVmYXVsdExhdW5jaFVSTDtcbiAgICAgICAgICBpZiAobm90aWZpY2F0aW9uRGF0YS5sYXVuY2hVUkwpXG4gICAgICAgICAgICBsYXVuY2hVUkwgPSBub3RpZmljYXRpb25EYXRhLmxhdW5jaFVSTDtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xpZW50TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNsaWVudCA9IGNsaWVudExpc3RbaV07XG4gICAgICAgICAgICBpZiAoJ2ZvY3VzJyBpbiBjbGllbnQgJiYgY2xpZW50LnVybCA9PSBsYXVuY2hVUkwpIHtcbiAgICAgICAgICAgICAgY2xpZW50LmZvY3VzKCk7XG5cbiAgICAgICAgICAgICAgLy8gdGFyZ2V0T3JpZ2luIG5vdCB2YWxpZCBoZXJlIGFzIHRoZSBzZXJ2aWNlIHdvcmtlciBvd25zIHRoZSBwYWdlLlxuICAgICAgICAgICAgICBjbGllbnQucG9zdE1lc3NhZ2Uobm90aWZpY2F0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGF1bmNoVVJMICE9PSAnamF2YXNjcmlwdDp2b2lkKDApOycgJiYgbGF1bmNoVVJMICE9PSAnZG9fbm90X29wZW4nKSB7XG4gICAgICAgICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJOb3RpZmljYXRpb25PcGVuZWRcIiwge3VybDogbGF1bmNoVVJMLCBkYXRhOiBub3RpZmljYXRpb25EYXRhfSk7XG4gICAgICAgICAgICBjbGllbnRzLm9wZW5XaW5kb3cobGF1bmNoVVJMKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gU2hvdWxkIG9ubHkgZmFsbCBpbnRvIGhlcmUgaWYgZ29pbmcgdG8gYW4gZXh0ZXJuYWwgVVJMIG9uIENocm9tZSBvbGRlciB0aGFuIDQzLlxuICAgICAgICAgICAgICBjbGllbnRzLm9wZW5XaW5kb3cocmVnaXN0cmF0aW9uLnNjb3BlICsgXCJyZWRpcmVjdG9yLmh0bWw/dXJsPVwiICsgbGF1bmNoVVJMKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICB9KVxuICAgICk7XG4gIH0sXG5cbiAgX2dldFRpdGxlOiBmdW5jdGlvbiAoaW5jb21pbmdUaXRsZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoaW5jb21pbmdUaXRsZSAhPSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhpbmNvbWluZ1RpdGxlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBQcm9taXNlLmFsbChbT25lU2lnbmFsLl9nZXREYlZhbHVlKCdPcHRpb25zJywgJ2RlZmF1bHRUaXRsZScpLCBPbmVTaWduYWwuX2dldERiVmFsdWUoJ09wdGlvbnMnLCAncGFnZVRpdGxlJyldKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gX2dldFRpdGxlX0dvdERlZmF1bHRQYWdlVGl0bGVzKHJlc3VsdHMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRUaXRsZVJlc3VsdCA9IHJlc3VsdHNbMF07XG4gICAgICAgIHZhciBwYWdlVGl0bGVSZXN1bHQgPSByZXN1bHRzWzFdO1xuXG4gICAgICAgIGlmIChkZWZhdWx0VGl0bGVSZXN1bHQpIHtcbiAgICAgICAgICBjYWxsYmFjayhkZWZhdWx0VGl0bGVSZXN1bHQudmFsdWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYWdlVGl0bGVSZXN1bHQgJiYgcGFnZVRpdGxlUmVzdWx0LnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBjYWxsYmFjayhwYWdlVGl0bGVSZXN1bHQudmFsdWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjaygnJyk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgfSk7XG4gIH0sXG5cbiAgLy8gRGlzcGxheXMgbm90aWZpY2F0aW9uIGZyb20gY29udGVudCByZWNlaXZlZCBmcm9tIE9uZVNpZ25hbC5cbiAgLy8gVGhpcyBtZXRob2QgaXMgb25seSBjYWxsZWQgYnkgU2VydmljZVdvcmtlclxuICBfaGFuZGxlR0NNTWVzc2FnZTogZnVuY3Rpb24gKHNlcnZpY2VXb3JrZXIsIGV2ZW50KSB7XG4gICAgLy8gVE9ETzogUmVhZCBkYXRhIGZyb20gdGhlIEdDTSBwYXlsb2FkIHdoZW4gQ2hyb21lIG5vIGxvbmdlciByZXF1aXJlcyB0aGUgYmVsb3cgY29tbWFuZCBsaW5lIHBhcmFtZXRlci5cbiAgICAvLyAtLWVuYWJsZS1wdXNoLW1lc3NhZ2UtcGF5bG9hZFxuICAgIC8vIFRoZSBjb21tYW5kIGxpbmUgcGFyYW0gaXMgcmVxdWlyZWQgZXZlbiBvbiBDaHJvbWUgNDMgbmlnaHRseSBidWlsZCAyMDE1LzAzLzE3LlxuICAgIGlmIChldmVudC5kYXRhICYmIGV2ZW50LmRhdGEudGV4dCgpWzBdID09IFwie1wiKSB7XG4gICAgICBsb2cuZGVidWcoJ1JlY2VpdmVkIGRhdGEudGV4dDogJywgZXZlbnQuZGF0YS50ZXh0KCkpO1xuICAgICAgbG9nLmRlYnVnKCdSZWNlaXZlZCBkYXRhLmpzb246ICcsIGV2ZW50LmRhdGEuanNvbigpKTtcbiAgICB9XG5cbiAgICBldmVudC53YWl0VW50aWwobmV3IFByb21pc2UoXG4gICAgICBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIE9uZVNpZ25hbC5fZ2V0VGl0bGUobnVsbCwgZnVuY3Rpb24gKHRpdGxlKSB7XG4gICAgICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdPcHRpb25zJywgJ2RlZmF1bHRJY29uJylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIF9oYW5kbGVHQ01NZXNzYWdlX0dvdERlZmF1bHRJY29uKGRlZmF1bHRJY29uUmVzdWx0KSB7XG4gICAgICAgICAgICAgIE9uZVNpZ25hbC5fZ2V0TGFzdE5vdGlmaWNhdGlvbnMoZnVuY3Rpb24gKHJlc3BvbnNlLCBhcHBJZCkge1xuICAgICAgICAgICAgICAgIHZhciBub3RpZmljYXRpb25EYXRhID0ge1xuICAgICAgICAgICAgICAgICAgaWQ6IHJlc3BvbnNlLmN1c3RvbS5pLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UuYWxlcnQsXG4gICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsRGF0YTogcmVzcG9uc2UuY3VzdG9tLmFcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnRpdGxlKVxuICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uRGF0YS50aXRsZSA9IHJlc3BvbnNlLnRpdGxlO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkRhdGEudGl0bGUgPSB0aXRsZTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5jdXN0b20udSlcbiAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkRhdGEubGF1bmNoVVJMID0gcmVzcG9uc2UuY3VzdG9tLnU7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuaWNvbilcbiAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkRhdGEuaWNvbiA9IHJlc3BvbnNlLmljb247XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVmYXVsdEljb25SZXN1bHQpXG4gICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25EYXRhLmljb24gPSBkZWZhdWx0SWNvblJlc3VsdC52YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIE5ldmVyIG5lc3QgdGhlIGZvbGxvd2luZyBsaW5lIGluIGEgY2FsbGJhY2sgZnJvbSB0aGUgcG9pbnQgb2YgZW50ZXJpbmcgZnJvbSBfZ2V0TGFzdE5vdGlmaWNhdGlvbnNcbiAgICAgICAgICAgICAgICBzZXJ2aWNlV29ya2VyLnJlZ2lzdHJhdGlvbi5zaG93Tm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkRhdGEudGl0bGUsIHtcbiAgICAgICAgICAgICAgICAgIGJvZHk6IHJlc3BvbnNlLmFsZXJ0LFxuICAgICAgICAgICAgICAgICAgaWNvbjogbm90aWZpY2F0aW9uRGF0YS5pY29uLFxuICAgICAgICAgICAgICAgICAgdGFnOiBKU09OLnN0cmluZ2lmeShub3RpZmljYXRpb25EYXRhKVxuICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnT3B0aW9ucycsICdkZWZhdWx0VXJsJylcbiAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkZWZhdWx0VXJsUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VXJsUmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgIE9uZVNpZ25hbC5fZGVmYXVsdExhdW5jaFVSTCA9IGRlZmF1bHRVcmxSZXN1bHQudmFsdWU7XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgfSwgcmVzb2x2ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pKVxuICB9LFxuXG4gIF9nZXRMYXN0Tm90aWZpY2F0aW9uczogZnVuY3Rpb24gKGl0ZW1DYWxsYmFjaywgY29tcGxldGVDYWxsYmFjaykge1xuICAgIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpXG4gICAgICAudGhlbihmdW5jdGlvbiBfZ2V0TGFzdE5vdGlmaWNhdGlvbnNfR290VXNlcklkKHVzZXJJZFJlc3VsdCkge1xuICAgICAgICBpZiAodXNlcklkUmVzdWx0KSB7XG4gICAgICAgICAgT25lU2lnbmFsLl9zZW5kVG9PbmVTaWduYWxBcGkoXCJwbGF5ZXJzL1wiICsgdXNlcklkUmVzdWx0LmlkICsgXCIvY2hyb21ld2ViX25vdGlmaWNhdGlvblwiLCBcIkdFVFwiLCBudWxsLCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgIGl0ZW1DYWxsYmFjayhKU09OLnBhcnNlKHJlc3BvbnNlW2ldKSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29tcGxldGVDYWxsYmFjaygpO1xuICAgICAgICAgIH0pOyAgLy8gRmFpbGVkIGNhbGxiYWNrXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgbG9nLmRlYnVnKFwiRXJyb3I6IGNvdWxkIG5vdCBnZXQgbm90aWZpY2F0aW9uSWRcIik7XG4gICAgICAgICAgY29tcGxldGVDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgIH0pO1xuICAgIDtcbiAgfSxcblxuICAvLyBIVFRQICYgSFRUUFMgLSBSdW5zIG9uIG1haW4gcGFnZVxuICBfbGlzdGVuZXJfcmVjZWl2ZU1lc3NhZ2U6IGZ1bmN0aW9uIHJlY2VpdmVNZXNzYWdlKGV2ZW50KSB7XG4gICAgbG9nLmRlYnVnKFwiX2xpc3RlbmVyX3JlY2VpdmVNZXNzYWdlOiBcIiwgZXZlbnQpO1xuXG4gICAgaWYgKE9uZVNpZ25hbC5faW5pdE9wdGlvbnMgPT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuO1xuXG4gICAgaWYgKCFfX0RFVl9fICYmIGV2ZW50Lm9yaWdpbiAhPT0gXCJcIiAmJiBldmVudC5vcmlnaW4gIT09IFwiaHR0cHM6Ly9vbmVzaWduYWwuY29tXCIgJiYgZXZlbnQub3JpZ2luICE9PSBcImh0dHBzOi8vXCIgKyBPbmVTaWduYWwuX2luaXRPcHRpb25zLnN1YmRvbWFpbk5hbWUgKyBcIi5vbmVzaWduYWwuY29tXCIpXG4gICAgICByZXR1cm47XG5cbiAgICBpZiAoZXZlbnQuZGF0YS5vbmVTaWduYWxJbml0UGFnZVJlYWR5KSB7IC8vIE9ubHkgY2FsbGVkIG9uIEhUVFAgcGFnZXMuXG4gICAgICBPbmVTaWduYWwuX2dldERiVmFsdWVzKFwiT3B0aW9uc1wiKVxuICAgICAgICAudGhlbihmdW5jdGlvbiBfbGlzdGVuZXJfcmVjZWl2ZU1lc3NhZ2Uob3B0aW9ucykge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhcImN1cnJlbnQgb3B0aW9uc1wiLCBvcHRpb25zKTtcbiAgICAgICAgICBpZiAoIW9wdGlvbnMuZGVmYXVsdFVybClcbiAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdFVybCA9IGRvY3VtZW50LlVSTDtcbiAgICAgICAgICBpZiAoIW9wdGlvbnMuZGVmYXVsdFRpdGxlKVxuICAgICAgICAgICAgb3B0aW9ucy5kZWZhdWx0VGl0bGUgPSBkb2N1bWVudC50aXRsZTtcblxuICAgICAgICAgIG9wdGlvbnMucGFyZW50X3VybCA9IGRvY3VtZW50LlVSTDtcbiAgICAgICAgICBsb2cuZGVidWcoXCJQb3N0aW5nIG1lc3NhZ2UgdG8gcG9ydFswXVwiLCBldmVudC5wb3J0c1swXSk7XG4gICAgICAgICAgZXZlbnQucG9ydHNbMF0ucG9zdE1lc3NhZ2Uoe2luaXRPcHRpb25zOiBvcHRpb25zfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxvZy5lcnJvcignX2xpc3RlbmVyX3JlY2VpdmVNZXNzYWdlOicsIGUpO1xuICAgICAgICB9KTtcblxuICAgICAgdmFyIGV2ZW50RGF0YSA9IGV2ZW50LmRhdGEub25lU2lnbmFsSW5pdFBhZ2VSZWFkeTtcblxuICAgICAgaWYgKGV2ZW50RGF0YS5pc0lmcmFtZSlcbiAgICAgICAgT25lU2lnbmFsLl9pZnJhbWVQb3J0ID0gZXZlbnQucG9ydHNbMF07XG5cbiAgICAgIGlmIChldmVudERhdGEudXNlcklkKVxuICAgICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJJZHNcIiwge3R5cGU6IFwidXNlcklkXCIsIGlkOiBldmVudERhdGEudXNlcklkfSk7XG4gICAgICBpZiAoZXZlbnREYXRhLnJlZ2lzdHJhdGlvbklkKVxuICAgICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJJZHNcIiwge3R5cGU6IFwicmVnaXN0cmF0aW9uSWRcIiwgaWQ6IGV2ZW50RGF0YS5yZWdpc3RyYXRpb25JZH0pO1xuXG4gICAgICBPbmVTaWduYWwuX2ZpcmVOb3RpZmljYXRpb25FbmFibGVkQ2FsbGJhY2soZXZlbnREYXRhLmlzUHVzaEVuYWJsZWQpO1xuICAgICAgT25lU2lnbmFsLl9zZW5kVW5zZW50VGFncygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChldmVudC5kYXRhLmN1cnJlbnROb3RpZmljYXRpb25QZXJtaXNzaW9uKSAvLyBTdWJkb21haW4gT25seVxuICAgICAgT25lU2lnbmFsLl9maXJlTm90aWZpY2F0aW9uRW5hYmxlZENhbGxiYWNrKGV2ZW50LmRhdGEuY3VycmVudE5vdGlmaWNhdGlvblBlcm1pc3Npb24uaXNQdXNoRW5hYmxlZCk7XG4gICAgZWxzZSBpZiAoZXZlbnQuZGF0YS5pZHNBdmFpbGFibGUpIHsgLy8gT25seSBjYWxsZWQgb24gSFRUUCBwYWdlcy5cbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJPTkVfU0lHTkFMX1NFU1NJT05cIiwgdHJ1ZSk7XG4gICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJJZHNcIiwge3R5cGU6IFwidXNlcklkXCIsIGlkOiBldmVudC5kYXRhLmlkc0F2YWlsYWJsZS51c2VySWR9KTtcbiAgICAgIE9uZVNpZ25hbC5fcHV0RGJWYWx1ZShcIklkc1wiLCB7dHlwZTogXCJyZWdpc3RyYXRpb25JZFwiLCBpZDogZXZlbnQuZGF0YS5pZHNBdmFpbGFibGUucmVnaXN0cmF0aW9uSWR9KTtcblxuICAgICAgaWYgKE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgd2hpbGUgKE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgY3Vycl9jYWxsYmFjayA9IE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLnBvcCgpXG4gICAgICAgICAgY3Vycl9jYWxsYmFjayh7XG4gICAgICAgICAgICB1c2VySWQ6IGV2ZW50LmRhdGEuaWRzQXZhaWxhYmxlLnVzZXJJZCxcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbklkOiBldmVudC5kYXRhLmlkc0F2YWlsYWJsZS5yZWdpc3RyYXRpb25JZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBPbmVTaWduYWwuX3NlbmRVbnNlbnRUYWdzKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50LmRhdGEuaHR0cHNQcm9tcHRBY2NlcHRlZCkgeyAvLyBIVFRQUyBPbmx5XG4gICAgICBPbmVTaWduYWwucmVnaXN0ZXJGb3JQdXNoTm90aWZpY2F0aW9ucygpO1xuICAgICAgT25lU2lnbmFsLnNldFN1YnNjcmlwdGlvbih0cnVlKTtcbiAgICAgIGxldCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09uZVNpZ25hbC1pZnJhbWUtbW9kYWwnKTtcbiAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcbiAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X2N1c3RvbVByb21wdENsaWNrZWQoJ2dyYW50ZWQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnQuZGF0YS5odHRwc1Byb21wdENhbmNlbGVkKSB7IC8vIEhUVFBTIE9ubHlcbiAgICAgIGxldCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ09uZVNpZ25hbC1pZnJhbWUtbW9kYWwnKTtcbiAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcbiAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X2N1c3RvbVByb21wdENsaWNrZWQoJ2RlbmllZCcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChldmVudC5kYXRhLmh0dHBQcm9tcHRBY2NlcHRlZCkgeyAvLyBIVFRQIE9ubHlcbiAgICAgIE9uZVNpZ25hbC5fdHJpZ2dlckV2ZW50X2N1c3RvbVByb21wdENsaWNrZWQoJ2dyYW50ZWQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnQuZGF0YS5odHRwUHJvbXB0Q2FuY2VsZWQpIHsgLy8gSFRUUCBPbmx5XG4gICAgICBPbmVTaWduYWwuX3RyaWdnZXJFdmVudF9jdXN0b21Qcm9tcHRDbGlja2VkKCdkZW5pZWQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoT25lU2lnbmFsLl9ub3RpZmljYXRpb25PcGVuZWRfY2FsbGJhY2spIC8vIEhUVFAgYW5kIEhUVFBTXG4gICAgICBPbmVTaWduYWwuX25vdGlmaWNhdGlvbk9wZW5lZF9jYWxsYmFjayhldmVudC5kYXRhKTtcbiAgfSxcblxuICBhZGRMaXN0ZW5lckZvck5vdGlmaWNhdGlvbk9wZW5lZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgT25lU2lnbmFsLl9ub3RpZmljYXRpb25PcGVuZWRfY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICBpZiAod2luZG93KSB7XG4gICAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoXCJOb3RpZmljYXRpb25PcGVuZWRcIiwgZG9jdW1lbnQuVVJMKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAobm90aWZpY2F0aW9uT3BlbmVkUmVzdWx0KSB7XG4gICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbk9wZW5lZFJlc3VsdCkge1xuICAgICAgICAgICAgT25lU2lnbmFsLl9kZWxldGVEYlZhbHVlKFwiTm90aWZpY2F0aW9uT3BlbmVkXCIsIGRvY3VtZW50LlVSTCk7XG4gICAgICAgICAgICBPbmVTaWduYWwuX25vdGlmaWNhdGlvbk9wZW5lZF9jYWxsYmFjayhub3RpZmljYXRpb25PcGVuZWRSZXN1bHQuZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgIH0pO1xuICAgICAgO1xuICAgIH1cbiAgfSxcblxuICAvLyBTdWJkb21haW4gLSBGaXJlZCBmcm9tIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBpZnJhbWUuXG4gIF9maXJlTm90aWZpY2F0aW9uRW5hYmxlZENhbGxiYWNrOiBmdW5jdGlvbiAobm90aWZQZXJtc3Npb24pIHtcbiAgICBpZiAoT25lU2lnbmFsLl9pc05vdGlmaWNhdGlvbkVuYWJsZWRDYWxsYmFjaykge1xuICAgICAgT25lU2lnbmFsLl9pc05vdGlmaWNhdGlvbkVuYWJsZWRDYWxsYmFjayhub3RpZlBlcm1zc2lvbik7XG4gICAgICBPbmVTaWduYWwuX2lzTm90aWZpY2F0aW9uRW5hYmxlZENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0SWRzQXZhaWxhYmxlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybjtcblxuICAgIE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLnB1c2goY2FsbGJhY2spO1xuXG4gICAgUHJvbWlzZS5hbGwoW09uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3VzZXJJZCcpLCBPbmVTaWduYWwuX2dldERiVmFsdWUoJ0lkcycsICdyZWdpc3RyYXRpb25JZCcpXSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uIGdldElkc0F2YWlsYWJsZV9Hb3RVc2VyUmVnaXN0cmF0aW9uSWRzKHJlc3VsdHMpIHtcbiAgICAgICAgdmFyIHVzZXJJZFJlc3VsdCA9IHJlc3VsdHNbMF07XG4gICAgICAgIHZhciByZWdpc3RyYXRpb25JZFJlc3VsdCA9IHJlc3VsdHNbMV07XG5cbiAgICAgICAgaWYgKHVzZXJJZFJlc3VsdCkge1xuICAgICAgICAgIGlmIChyZWdpc3RyYXRpb25JZFJlc3VsdCkge1xuICAgICAgICAgICAgd2hpbGUgKE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJfY2FsbGJhY2sgPSBPbmVTaWduYWwuX2lkc0F2YWlsYWJsZV9jYWxsYmFjay5wb3AoKTtcbiAgICAgICAgICAgICAgY3Vycl9jYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgdXNlcklkOiB1c2VySWRSZXN1bHQuaWQsXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uSWQ6IHJlZ2lzdHJhdGlvbklkUmVzdWx0LmlkXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB3aGlsZSAoT25lU2lnbmFsLl9pZHNBdmFpbGFibGVfY2FsbGJhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICB2YXIgY3Vycl9jYWxsYmFjayA9IE9uZVNpZ25hbC5faWRzQXZhaWxhYmxlX2NhbGxiYWNrLnBvcCgpO1xuICAgICAgICAgICAgICBjdXJyX2NhbGxiYWNrKHt1c2VySWQ6IHVzZXJJZFJlc3VsdC5pZCwgcmVnaXN0cmF0aW9uSWQ6IG51bGx9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgICA7XG4gIH0sXG5cbiAgZ2V0VGFnczogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJylcbiAgICAgIC50aGVuKGZ1bmN0aW9uICh1c2VySWRSZXN1bHQpIHtcbiAgICAgICAgaWYgKHVzZXJJZFJlc3VsdCkge1xuICAgICAgICAgIE9uZVNpZ25hbC5fc2VuZFRvT25lU2lnbmFsQXBpKFwicGxheWVycy9cIiArIHVzZXJJZFJlc3VsdC5pZCwgJ0dFVCcsIG51bGwsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UudGFncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgfSk7XG4gICAgO1xuICB9LFxuXG4gIGlzUHVzaE5vdGlmaWNhdGlvbnNFbmFibGVkOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBpZiAoIWlzUHVzaE5vdGlmaWNhdGlvbnNTdXBwb3J0ZWQoKSkge1xuICAgICAgbG9nLndhcm4oXCJZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBwdXNoIG5vdGlmaWNhdGlvbnMuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIFN1YmRvbWFpblxuICAgIGlmIChPbmVTaWduYWwuX2luaXRPcHRpb25zLnN1YmRvbWFpbk5hbWUgJiYgIWlzQnJvd3NlclNhZmFyaSgpKSB7XG4gICAgICBPbmVTaWduYWwuX2lzTm90aWZpY2F0aW9uRW5hYmxlZENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICBpZiAoT25lU2lnbmFsLl9pZnJhbWVQb3J0KVxuICAgICAgICBPbmVTaWduYWwuX2lmcmFtZVBvcnQucG9zdE1lc3NhZ2Uoe2dldE5vdGlmaWNhdGlvblBlcm1pc3Npb246IHRydWV9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBIVFRQU1xuXG4gICAgUHJvbWlzZS5hbGwoW09uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnSWRzJywgJ3JlZ2lzdHJhdGlvbklkJyksIE9uZVNpZ25hbC5fZ2V0RGJWYWx1ZSgnT3B0aW9ucycsICdzdWJzY3JpcHRpb24nKV0pXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICB2YXIgcmVnaXN0cmF0aW9uSWRSZXN1bHQgPSByZXN1bHRzWzBdO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uUmVzdWx0ID0gcmVzdWx0c1sxXTtcblxuICAgICAgICBpZiAocmVnaXN0cmF0aW9uSWRSZXN1bHQpIHtcbiAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uUmVzdWx0ICYmICFzdWJzY3JpcHRpb25SZXN1bHQudmFsdWUpXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZmFsc2UpO1xuXG4gICAgICAgICAgY2FsbGJhY2soTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT0gXCJncmFudGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgIH0pO1xuICB9LFxuXG4gIF9nZXROb3RpZmljYXRpb25UeXBlczogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgT25lU2lnbmFsLl9nZXRTdWJzY3JpcHRpb24oZnVuY3Rpb24gKGRiX3N1YnNjcmlwdGlvblNldCkge1xuICAgICAgY2FsbGJhY2soZGJfc3Vic2NyaXB0aW9uU2V0ID8gMSA6IC0yKTtcbiAgICB9KTtcbiAgfSxcblxuICBzZXRTdWJzY3JpcHRpb246IGZ1bmN0aW9uIChuZXdTdWJzY3JpcHRpb24pIHtcbiAgICBpZiAoT25lU2lnbmFsLl9pZnJhbWVQb3J0KVxuICAgICAgT25lU2lnbmFsLl9pZnJhbWVQb3J0LnBvc3RNZXNzYWdlKHtzZXRTdWJkb21haW5TdGF0ZToge3NldFN1YnNjcmlwdGlvbjogbmV3U3Vic2NyaXB0aW9ufX0pO1xuICAgIGVsc2Uge1xuICAgICAgT25lU2lnbmFsLl9nZXRTdWJzY3JpcHRpb24oZnVuY3Rpb24gKGN1cnJlbnRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKGN1cnJlbnRTdWJzY3JpcHRpb24gIT0gbmV3U3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiT3B0aW9uc1wiLCB7a2V5OiBcInN1YnNjcmlwdGlvblwiLCB2YWx1ZTogbmV3U3Vic2NyaXB0aW9ufSk7XG4gICAgICAgICAgT25lU2lnbmFsLl9nZXREYlZhbHVlKCdJZHMnLCAndXNlcklkJylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1c2VySWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKHVzZXJJZFJlc3VsdClcbiAgICAgICAgICAgICAgICBPbmVTaWduYWwuX3NlbmRUb09uZVNpZ25hbEFwaShcInBsYXllcnMvXCIgKyB1c2VySWRSZXN1bHQuaWQsIFwiUFVUXCIsIHtcbiAgICAgICAgICAgICAgICAgIGFwcF9pZDogT25lU2lnbmFsLl9hcHBfaWQsXG4gICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25fdHlwZXM6IG5ld1N1YnNjcmlwdGlvbiA/IDEgOiAtMlxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIHNldFN1YnNjcmlwdGlvblNldENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICAgICAgT25lU2lnbmFsLl90cmlnZ2VyRXZlbnRfaW50ZXJuYWxTdWJzY3JpcHRpb25TZXQobmV3U3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBfZ2V0U3Vic2NyaXB0aW9uOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBPbmVTaWduYWwuX2dldERiVmFsdWUoJ09wdGlvbnMnLCAnc3Vic2NyaXB0aW9uJylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChzdWJzY3JpcHRpb25SZXN1bHQpIHtcbiAgICAgICAgY2FsbGJhY2soIShzdWJzY3JpcHRpb25SZXN1bHQgJiYgc3Vic2NyaXB0aW9uUmVzdWx0LnZhbHVlID09IGZhbHNlKSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgIH0pO1xuICAgIDtcbiAgfSxcblxuICBfc2FmZVBvc3RNZXNzYWdlOiBmdW5jdGlvbiAoY3JlYXRvciwgZGF0YSwgdGFyZ2V0T3JpZ2luLCByZWNlaXZlcikge1xuICAgIHZhciB0T3JpZ2luID0gdGFyZ2V0T3JpZ2luLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBJZiB3ZSBhcmUgdHJ5aW5nIHRvIHRhcmdldCBhIGh0dHAgc2l0ZSBhbGxvdyB0aGUgaHR0cHMgdmVyc2lvbi4gKHcvIG9yIHcvbyAnd3d3dy4nIHRvbylcbiAgICBpZiAodE9yaWdpbi5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSkge1xuICAgICAgdmFyIHF1ZXJ5RGljdCA9IHt9O1xuICAgICAgbG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKS5zcGxpdChcIiZcIikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBxdWVyeURpY3RbaXRlbS5zcGxpdChcIj1cIilbMF1dID0gaXRlbS5zcGxpdChcIj1cIilbMV1cbiAgICAgIH0pO1xuICAgICAgdmFyIHZhbGlkUHJlVVJMUmVnZXggPSAvXmh0dHAoc3wpOlxcL1xcLyh3d3dcXC58KS87XG4gICAgICB0T3JpZ2luID0gdE9yaWdpbi5yZXBsYWNlKHZhbGlkUHJlVVJMUmVnZXgsIHF1ZXJ5RGljdFtcImhvc3RQYWdlUHJvdG9jb2xcIl0pO1xuICAgIH1cblxuICAgIGlmIChyZWNlaXZlcilcbiAgICAgIGNyZWF0b3IucG9zdE1lc3NhZ2UoZGF0YSwgdE9yaWdpbiwgcmVjZWl2ZXIpO1xuICAgIGVsc2VcbiAgICAgIGNyZWF0b3IucG9zdE1lc3NhZ2UoZGF0YSwgdE9yaWdpbik7XG4gIH0sXG5cbiAgX3Byb2Nlc3NfcHVzaGVzOiBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKVxuICAgICAgT25lU2lnbmFsLnB1c2goYXJyYXlbaV0pO1xuICB9LFxuXG4gIHB1c2g6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKHR5cGVvZihpdGVtKSA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICBpdGVtKCk7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZnVuY3Rpb25OYW1lID0gaXRlbS5zaGlmdCgpO1xuICAgICAgT25lU2lnbmFsW2Z1bmN0aW9uTmFtZV0uYXBwbHkobnVsbCwgaXRlbSk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBJZiBpbXBvcnRlZCBvbiB5b3VyIHBhZ2UuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIilcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIE9uZVNpZ25hbC5fbGlzdGVuZXJfcmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcbmVsc2UgeyAvLyBpZiBpbXBvcnRlZCBmcm9tIHRoZSBzZXJ2aWNlIHdvcmtlci5cbiAgaW1wb3J0U2NyaXB0cygnaHR0cHM6Ly9jZG4ub25lc2lnbmFsLmNvbS9zZGtzL3NlcnZpY2V3b3JrZXItY2FjaGUtcG9seWZpbGwuanMnKTtcblxuICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ3B1c2gnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBPbmVTaWduYWwuX2hhbmRsZUdDTU1lc3NhZ2Uoc2VsZiwgZXZlbnQpOyAvLyBDYW4gaGFuZGxlIG1lc3NhZ2VzIGZyb20gYW55IGJyb3dzZXIgKGV4Y2VwdCBTYWZhcmkpLCByZW5hbWUgbWV0aG9kXG4gIH0pO1xuICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ25vdGlmaWNhdGlvbmNsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gQWxzbyBvbmx5IGJ5IFNXXG4gICAgT25lU2lnbmFsLl9oYW5kbGVOb3RpZmljYXRpb25PcGVuZWQoZXZlbnQpO1xuICB9KTtcblxuICB2YXIgaXNTV29uU3ViZG9tYWluID0gbG9jYXRpb24uaHJlZi5tYXRjaCgvaHR0cHNcXDpcXC9cXC8uKlxcLm9uZXNpZ25hbC5jb21cXC9zZGtzXFwvLykgIT0gbnVsbDtcbiAgaWYgKF9fREVWX18pXG4gICAgaXNTV29uU3ViZG9tYWluID0gdHJ1ZTtcblxuICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBsb2cuZGVidWcoXCJPbmVTaWduYWwgSW5zdGFsbGVkIHNlcnZpY2Ugd29ya2VyOiBcIiArIE9uZVNpZ25hbC5fVkVSU0lPTik7XG4gICAgaWYgKHNlbGYubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihcIk9uZVNpZ25hbFNES1dvcmtlci5qc1wiKSA+IC0xKVxuICAgICAgT25lU2lnbmFsLl9wdXREYlZhbHVlKFwiSWRzXCIsIHt0eXBlOiBcIldPUktFUjFfT05FX1NJR05BTF9TV19WRVJTSU9OXCIsIGlkOiBPbmVTaWduYWwuX1ZFUlNJT059KTtcbiAgICBlbHNlXG4gICAgICBPbmVTaWduYWwuX3B1dERiVmFsdWUoXCJJZHNcIiwge3R5cGU6IFwiV09SS0VSMl9PTkVfU0lHTkFMX1NXX1ZFUlNJT05cIiwgaWQ6IE9uZVNpZ25hbC5fVkVSU0lPTn0pO1xuXG4gICAgaWYgKGlzU1dvblN1YmRvbWFpbikge1xuICAgICAgZXZlbnQud2FpdFVudGlsKFxuICAgICAgICBjYWNoZXMub3BlbihcIk9uZVNpZ25hbF9cIiArIE9uZVNpZ25hbC5fVkVSU0lPTikudGhlbihmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGUuYWRkQWxsKFtcbiAgICAgICAgICAgICcvc2Rrcy9pbml0T25lU2lnbmFsSHR0cElmcmFtZScsXG4gICAgICAgICAgICAnL3Nka3MvaW5pdE9uZVNpZ25hbEh0dHBJZnJhbWU/c2Vzc2lvbj0qJyxcbiAgICAgICAgICAgICcvc2Rrcy9tYW5pZmVzdF9qc29uJ10pO1xuICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGlzU1dvblN1YmRvbWFpbikge1xuICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgICAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIC8vIENhY2hlIGhpdCAtIHJldHVybiByZXNwb25zZVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlKVxuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG5cbiAgICAgICAgICAgIHJldHVybiBmZXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9uZVNpZ25hbDtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9zZGsuanNcbiAqKi8iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG4oZnVuY3Rpb24oKSB7XG5cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9XG5cbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSlcbiAgICAgIH0sIHRoaXMpXG5cbiAgICB9IGVsc2UgaWYgKGhlYWRlcnMpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgICAgfSwgdGhpcylcbiAgICB9XG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgICB2YXIgbGlzdCA9IHRoaXMubWFwW25hbWVdXG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICBsaXN0ID0gW11cbiAgICAgIHRoaXMubWFwW25hbWVdID0gbGlzdFxuICAgIH1cbiAgICBsaXN0LnB1c2godmFsdWUpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG4gICAgcmV0dXJuIHZhbHVlcyA/IHZhbHVlc1swXSA6IG51bGxcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gfHwgW11cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBbbm9ybWFsaXplVmFsdWUodmFsdWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5tYXApLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5tYXBbbmFtZV0uZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHZhbHVlLCBuYW1lLCB0aGlzKVxuICAgICAgfSwgdGhpcylcbiAgICB9LCB0aGlzKVxuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZWQoYm9keSkge1xuICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgICB9XG4gICAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gICAgcmV0dXJuIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICB9XG5cbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBBcnJheUJ1ZmZlcnMgZm9yIFBPU1QgbWV0aG9kLlxuICAgICAgICAvLyBSZWNlaXZpbmcgQXJyYXlCdWZmZXJzIGhhcHBlbnMgdmlhIEJsb2JzLCBpbnN0ZWFkLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIHJldHVybiByZWplY3RlZCA/IHJlamVjdGVkIDogUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgICAgfVxuICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVybCA9IGlucHV0XG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMpXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRlcnMoeGhyKSB7XG4gICAgdmFyIGhlYWQgPSBuZXcgSGVhZGVycygpXG4gICAgdmFyIHBhaXJzID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnRyaW0oKS5zcGxpdCgnXFxuJylcbiAgICBwYWlycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdmFyIHNwbGl0ID0gaGVhZGVyLnRyaW0oKS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gc3BsaXQuc2hpZnQoKS50cmltKClcbiAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWQuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfSlcbiAgICByZXR1cm4gaGVhZFxuICB9XG5cbiAgQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzXG4gICAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICAgIHRoaXMuc3RhdHVzVGV4dCA9IG9wdGlvbnMuc3RhdHVzVGV4dFxuICAgIHRoaXMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMgPyBvcHRpb25zLmhlYWRlcnMgOiBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJ1xuICB9XG5cbiAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSlcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9XG5cbiAgUmVzcG9uc2UuZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICAgIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH1cblxuICB2YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuICBSZXNwb25zZS5yZWRpcmVjdCA9IGZ1bmN0aW9uKHVybCwgc3RhdHVzKSB7XG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxuICB9XG5cbiAgc2VsZi5IZWFkZXJzID0gSGVhZGVycztcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlO1xuXG4gIHNlbGYuZmV0Y2ggPSBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZXF1ZXN0XG4gICAgICBpZiAoUmVxdWVzdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihpbnB1dCkgJiYgIWluaXQpIHtcbiAgICAgICAgcmVxdWVzdCA9IGlucHV0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG4gICAgICB9XG5cbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgICBmdW5jdGlvbiByZXNwb25zZVVSTCgpIHtcbiAgICAgICAgaWYgKCdyZXNwb25zZVVSTCcgaW4geGhyKSB7XG4gICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZVVSTFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXZvaWQgc2VjdXJpdHkgd2FybmluZ3Mgb24gZ2V0UmVzcG9uc2VIZWFkZXIgd2hlbiBub3QgYWxsb3dlZCBieSBDT1JTXG4gICAgICAgIGlmICgvXlgtUmVxdWVzdC1VUkw6L20udGVzdCh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIHhoci5nZXRSZXNwb25zZUhlYWRlcignWC1SZXF1ZXN0LVVSTCcpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9ICh4aHIuc3RhdHVzID09PSAxMjIzKSA/IDIwNCA6IHhoci5zdGF0dXNcbiAgICAgICAgaWYgKHN0YXR1cyA8IDEwMCB8fCBzdGF0dXMgPiA1OTkpIHtcbiAgICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoeGhyKSxcbiAgICAgICAgICB1cmw6IHJlc3BvbnNlVVJMKClcbiAgICAgICAgfVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSlcblxuICAgICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InXG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKVxuICAgICAgfSlcblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdClcbiAgICB9KVxuICB9XG4gIHNlbGYuZmV0Y2gucG9seWZpbGwgPSB0cnVlXG59KSgpO1xuXG5cbi8qKiogRVhQT1JUUyBGUk9NIGV4cG9ydHMtbG9hZGVyICoqKi9cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmZldGNoXG59LmNhbGwoZ2xvYmFsKSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vaW1wb3J0cy1sb2FkZXI/dGhpcz0+Z2xvYmFsIS4vfi9leHBvcnRzLWxvYWRlcj9nbG9iYWwuZmV0Y2ghLi9+L3doYXR3Zy1mZXRjaC9mZXRjaC5qc1xuICoqIG1vZHVsZSBpZCA9IDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCB7IGlzRGV2IH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmV4cG9ydCBjb25zdCBERVZfSE9TVCA9ICdodHRwczovLzE5Mi4xNjguMS4yMDY6MzAwMCc7XG5leHBvcnQgY29uc3QgUFJPRF9IT1NUID0gJ2h0dHBzOi8vb25lc2lnbmFsLmNvbSc7XG5leHBvcnQgY29uc3QgSE9TVF9VUkwgPSAoaXNEZXYoKSA/IERFVl9IT1NUIDogUFJPRF9IT1NUKSArICcvYXBpL3YxLyc7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdmFycy5qc1xuICoqLyIsImltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheSh2YXJpYWJsZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCB2YXJpYWJsZSApID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SHVtYW5pemVkVGltZUR1cmF0aW9uKHRpbWVEdXJhdGlvbkluTWlsbGlzZWNvbmRzKSB7XG4gIGZ1bmN0aW9uIGFkZFBsdXJhbFN1ZmZpeChudW1iZXIpIHtcbiAgICByZXR1cm4gKG51bWJlciA+IDEpID8gJ3MnIDogJyc7XG4gIH1cbiAgdmFyIGR1cmF0aW9uID0gTWF0aC5mbG9vcih0aW1lRHVyYXRpb25Jbk1pbGxpc2Vjb25kcyAvIDEwMDApO1xuXG4gIHZhciB5ZWFycyA9IE1hdGguZmxvb3IoZHVyYXRpb24gLyAzMTUzNjAwMCk7XG4gIGlmICh5ZWFycylcbiAgICByZXR1cm4geWVhcnMgKyAnIHllYXInICsgYWRkUGx1cmFsU3VmZml4KHllYXJzKTtcblxuICB2YXIgZGF5cyA9IE1hdGguZmxvb3IoKGR1cmF0aW9uICU9IDMxNTM2MDAwKSAvIDg2NDAwKTtcbiAgaWYgKGRheXMpXG4gICAgcmV0dXJuIGRheXMgKyAnIGRheScgKyBhZGRQbHVyYWxTdWZmaXgoZGF5cyk7XG5cbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcigoZHVyYXRpb24gJT0gODY0MDApIC8gMzYwMCk7XG4gIGlmIChob3VycylcbiAgICByZXR1cm4gaG91cnMgKyAnIGhvdXInICsgYWRkUGx1cmFsU3VmZml4KGhvdXJzKTtcblxuICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IoKGR1cmF0aW9uICU9IDM2MDApIC8gNjApO1xuICBpZiAobWludXRlcylcbiAgICByZXR1cm4gbWludXRlcyArICcgbWludXRlJyArIGFkZFBsdXJhbFN1ZmZpeChtaW51dGVzKTtcblxuICB2YXIgc2Vjb25kcyA9IGR1cmF0aW9uICUgNjA7XG4gIGlmIChzZWNvbmRzKVxuICAgIHJldHVybiBzZWNvbmRzICsgJyBzZWNvbmQnICsgYWRkUGx1cmFsU3VmZml4KHNlY29uZHMpO1xuXG4gIHJldHVybiAnanVzdCBub3cnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyRW52KCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGV2KCkge1xuICByZXR1cm4gX19ERVZfXztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHVzaE5vdGlmaWNhdGlvbnNTdXBwb3J0ZWQgKCkge1xuICB2YXIgY2hyb21lVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9DaHJvbWVcXC8oLio/KSAvKTtcblxuICBpZiAoaXNTdXBwb3J0ZWRGaXJlRm94KCkpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGlzU3VwcG9ydGVkU2FmYXJpKCkpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8gQ2hyb21lIGlzIG5vdCBmb3VuZCBpbiBhcHBWZXJzaW9uLlxuICBpZiAoIWNocm9tZVZlcnNpb24pXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIE1pY3Jvc29mdCBFZGdlXG4gIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvRWRnZS8pKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBBbmRyb2lkIENocm9tZSBXZWJWaWV3XG4gIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvIHd2LykpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIE9wZXJhXG4gIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvT1BSXFwvLykpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFRoZSB1c2VyIGlzIG9uIGlPU1xuICBpZiAoL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHBhcnNlSW50KGNocm9tZVZlcnNpb25bMV0uc3Vic3RyaW5nKDAsIDIpKSA+IDQxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyU2FmYXJpKCkge1xuICB2YXIgc2FmYXJpVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKFwiVmVyc2lvbi8oWzAtOV0/KS4qIFNhZmFyaVwiKTtcbiAgcmV0dXJuIHNhZmFyaVZlcnNpb24gIT0gbnVsbCA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N1cHBvcnRlZEZpcmVGb3goKSB7XG4gIHZhciBmaXJlRm94VmVyc2lvbiA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goLyhGaXJlZm94XFwvKShbMC05XXsyLH1cXC5bMC05XXsxLH0pLyk7XG4gIGlmIChmaXJlRm94VmVyc2lvbilcbiAgICByZXR1cm4gcGFyc2VJbnQoZmlyZUZveFZlcnNpb25bMl0uc3Vic3RyaW5nKDAsIDIpKSA+IDQzO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXJGaXJlZm94KCkge1xuICB2YXIgZmlyZUZveFZlcnNpb24gPSBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC8oRmlyZWZveFxcLykoWzAtOV17Mix9XFwuWzAtOV17MSx9KS8pO1xuICByZXR1cm4gZmlyZUZveFZlcnNpb24gIT0gbnVsbCA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXJlZm94VmVyc2lvbigpIHtcbiAgdmFyIGZpcmVGb3hWZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKEZpcmVmb3hcXC8pKFswLTldezIsfVxcLlswLTldezEsfSkvKTtcbiAgaWYgKGZpcmVGb3hWZXJzaW9uKVxuICAgIHJldHVybiBwYXJzZUludChmaXJlRm94VmVyc2lvblsyXS5zdWJzdHJpbmcoMCwgMikpO1xuICBlbHNlIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3VwcG9ydGVkU2FmYXJpKCkge1xuICB2YXIgc2FmYXJpVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKFwiVmVyc2lvbi8oWzAtOV0/KS4qIFNhZmFyaVwiKTtcbiAgaWYgKHNhZmFyaVZlcnNpb24gPT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmICgvaVBob25lfGlQYWR8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKHBhcnNlSW50KHNhZmFyaVZlcnNpb25bMV0pID4gNik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEb21FbGVtZW50KHNlbGVjdG9yKSB7XG4gIHZhciBlbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgaWYgKGVscy5sZW5ndGggPiAwKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpKyspXG4gICAgICBlbHNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbHNbaV0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGREb21FbGVtZW50KHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LCBhZGRPcmRlciwgZWxlbWVudEh0bWwpIHtcbiAgaWYgKHR5cGVvZiB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCA9PT0gJ3N0cmluZycpXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkuaW5zZXJ0QWRqYWNlbnRIVE1MKGFkZE9yZGVyLCBlbGVtZW50SHRtbCk7XG4gIGVsc2UgaWYgKHR5cGVvZiB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCA9PT0gJ29iamVjdCcpXG4gICAgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKGFkZE9yZGVyLCBlbGVtZW50SHRtbCk7XG4gIGVsc2VcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dGFyZ2V0U2VsZWN0b3JPckVsZW1lbnR9IG11c3QgYmUgYSBDU1Mgc2VsZWN0b3Igc3RyaW5nIG9yIERPTSBFbGVtZW50IG9iamVjdC5gKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZENzc0NsYXNzKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LCBjc3NDbGFzcykge1xuICBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAnc3RyaW5nJylcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50KS5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTtcbiAgZWxzZSBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAnb2JqZWN0JylcbiAgICB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcihgJHt0YXJnZXRTZWxlY3Rvck9yRWxlbWVudH0gbXVzdCBiZSBhIENTUyBzZWxlY3RvciBzdHJpbmcgb3IgRE9NIEVsZW1lbnQgb2JqZWN0LmApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ3NzQ2xhc3ModGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQsIGNzc0NsYXNzKSB7XG4gIGlmICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgPT09ICdzdHJpbmcnKVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQpLmNsYXNzTGlzdC5yZW1vdmUoY3NzQ2xhc3MpO1xuICBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgPT09ICdvYmplY3QnKVxuICAgIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY3NzQ2xhc3MpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldFNlbGVjdG9yT3JFbGVtZW50fSBtdXN0IGJlIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBET00gRWxlbWVudCBvYmplY3QuYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCwgZXZlbnQsIHRhc2spIHtcbiAgaWYgKCFldmVudCkge1xuICAgIGxvZy5lcnJvcignQ2Fubm90IGNhbGwgb24oKSB3aXRoIG5vIGV2ZW50OiAnLCBldmVudCk7XG4gIH1cbiAgaWYgKCF0YXNrKSB7XG4gICAgbG9nLmVycm9yKCdDYW5ub3QgY2FsbCBvbigpIHdpdGggbm8gdGFzazogJywgdGFzaylcbiAgfVxuICBsb2cuZGVidWcoJ0RlYnVnIG1lIGhlcmUuJyk7XG4gIGlmICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IGVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIGlmIChlbHMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpKyspXG4gICAgICAgIG9uKGVsc1tpXSwgdGFzayk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGlzQXJyYXkodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudC5sZW5ndGg7IGkrKylcbiAgICAgIG9uKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50W2ldLCB0YXNrKTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgPT09ICdvYmplY3QnKVxuICAgIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRhc2spO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldFNlbGVjdG9yT3JFbGVtZW50fSBtdXN0IGJlIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBET00gRWxlbWVudCBvYmplY3QuYCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbmNlKHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LCBldmVudCwgdGFzaywgbWFudWFsRGVzdHJveT1mYWxzZSkge1xuICBpZiAoIWV2ZW50KSB7XG4gICAgbG9nLmVycm9yKCdDYW5ub3QgY2FsbCBvbigpIHdpdGggbm8gZXZlbnQ6ICcsIGV2ZW50KTtcbiAgfVxuICBpZiAoIXRhc2spIHtcbiAgICBsb2cuZXJyb3IoJ0Nhbm5vdCBjYWxsIG9uKCkgd2l0aCBubyB0YXNrOiAnLCB0YXNrKVxuICB9XG4gIGlmICh0eXBlb2YgdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IGVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIGlmIChlbHMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpKyspXG4gICAgICAgIG9uY2UoZWxzW2ldLCB0YXNrKTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoaXNBcnJheSh0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldFNlbGVjdG9yT3JFbGVtZW50Lmxlbmd0aDsgaSsrKVxuICAgICAgb25jZSh0YXJnZXRTZWxlY3Rvck9yRWxlbWVudFtpXSwgdGFzayk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHZhciB0YXNrV3JhcHBlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW50ZXJuYWxUYXNrRnVuY3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgZGVzdHJveUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgdGFza1dyYXBwZXIpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIW1hbnVhbERlc3Ryb3kpIHtcbiAgICAgICAgICBkZXN0cm95RXZlbnRMaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgICAgIHRhc2soZSwgZGVzdHJveUV2ZW50TGlzdGVuZXIpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBpbnRlcm5hbFRhc2tGdW5jdGlvbjtcbiAgICB9KSgpO1xuICAgIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRhc2tXcmFwcGVyKTtcbiAgfVxuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldFNlbGVjdG9yT3JFbGVtZW50fSBtdXN0IGJlIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBET00gRWxlbWVudCBvYmplY3QuYCk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBldmVudCBoYW5kbGVyIGZyb20gc2VsZWN0b3IuXG4gKiBAcGFyYW0gdGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQgU2VsZWN0b3IgdG8gdGFyZ2V0IG9uZSBvciBtdWx0aXBsZSBlbGVtZW50cywgb3IgYSBzaW5nbGUgb3IgYXJyYXkgb2YgRE9NRWxlbWVudC5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gdGFyZ2V0IChlLmcuICd0cmFuc2l0aW9uZW5kJylcbiAqIEBwYXJhbSB0YXNrIEEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxiYWNrIHRvIHVuYmluZCwgb3IgbGVhdmUgZW1wdHkgdG8gcmVtb3ZlIGFsbCBldmVudCBoYW5kbGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9mZih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCwgZXZlbnQsIHRhc2spIHtcbiAgaWYgKHR5cGVvZiB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBsZXQgZWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgaWYgKGVscy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkrKylcbiAgICAgICAgb2ZmKGVsc1tpXSwgdGFzayk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGlzQXJyYXkodGFyZ2V0U2VsZWN0b3JPckVsZW1lbnQpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXRTZWxlY3Rvck9yRWxlbWVudC5sZW5ndGg7IGkrKylcbiAgICAgIG9mZih0YXJnZXRTZWxlY3Rvck9yRWxlbWVudFtpXSwgdGFzayk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50ID09PSAnb2JqZWN0JylcbiAgICBpZiAodGFzaylcbiAgICAgIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHRhc2spO1xuICAgIGVsc2VcbiAgICAgIHRhcmdldFNlbGVjdG9yT3JFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQpO1xuICBlbHNlXG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3RhcmdldFNlbGVjdG9yT3JFbGVtZW50fSBtdXN0IGJlIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBET00gRWxlbWVudCBvYmplY3QuYCk7XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMuanNcbiAqKi8iLCIvKlxyXG4qIGxvZ2xldmVsIC0gaHR0cHM6Ly9naXRodWIuY29tL3BpbXRlcnJ5L2xvZ2xldmVsXHJcbipcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTMgVGltIFBlcnJ5XHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG4qL1xyXG4oZnVuY3Rpb24gKHJvb3QsIGRlZmluaXRpb24pIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgZGVmaW5lKGRlZmluaXRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByb290LmxvZyA9IGRlZmluaXRpb24oKTtcclxuICAgIH1cclxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcclxuICAgIHZhciB1bmRlZmluZWRUeXBlID0gXCJ1bmRlZmluZWRcIjtcclxuXHJcbiAgICBmdW5jdGlvbiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBXZSBjYW4ndCBidWlsZCBhIHJlYWwgbWV0aG9kIHdpdGhvdXQgYSBjb25zb2xlIHRvIGxvZyB0b1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZVttZXRob2ROYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsIG1ldGhvZE5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYmluZE1ldGhvZChjb25zb2xlLCAnbG9nJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJpbmRNZXRob2Qob2JqLCBtZXRob2ROYW1lKSB7XHJcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcclxuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZC5iaW5kID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QuYmluZChvYmopO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChtZXRob2QsIG9iaik7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1pc3NpbmcgYmluZCBzaGltIG9yIElFOCArIE1vZGVybml6ciwgZmFsbGJhY2sgdG8gd3JhcHBpbmdcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHRoZXNlIHByaXZhdGUgZnVuY3Rpb25zIGFsd2F5cyBuZWVkIGB0aGlzYCB0byBiZSBzZXQgcHJvcGVybHlcclxuXHJcbiAgICBmdW5jdGlvbiBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzKG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSB1bmRlZmluZWRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbCh0aGlzLCBsZXZlbCwgbG9nZ2VyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb2dnaW5nTWV0aG9kcyhsZXZlbCwgbG9nZ2VyTmFtZSkge1xyXG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2dNZXRob2RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gbG9nTWV0aG9kc1tpXTtcclxuICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IChpIDwgbGV2ZWwpID9cclxuICAgICAgICAgICAgICAgIG5vb3AgOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXRob2RGYWN0b3J5KG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGVmYXVsdE1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcclxuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgIHJldHVybiByZWFsTWV0aG9kKG1ldGhvZE5hbWUpIHx8XHJcbiAgICAgICAgICAgICAgIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbG9nTWV0aG9kcyA9IFtcclxuICAgICAgICBcInRyYWNlXCIsXHJcbiAgICAgICAgXCJkZWJ1Z1wiLFxyXG4gICAgICAgIFwiaW5mb1wiLFxyXG4gICAgICAgIFwid2FyblwiLFxyXG4gICAgICAgIFwiZXJyb3JcIlxyXG4gICAgXTtcclxuXHJcbiAgICBmdW5jdGlvbiBMb2dnZXIobmFtZSwgZGVmYXVsdExldmVsLCBmYWN0b3J5KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgdmFyIGN1cnJlbnRMZXZlbDtcclxuICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBcImxvZ2xldmVsXCI7XHJcbiAgICAgIGlmIChuYW1lKSB7XHJcbiAgICAgICAgc3RvcmFnZUtleSArPSBcIjpcIiArIG5hbWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWxOdW0pIHtcclxuICAgICAgICAgIHZhciBsZXZlbE5hbWUgPSAobG9nTWV0aG9kc1tsZXZlbE51bV0gfHwgJ3NpbGVudCcpLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgLy8gVXNlIGxvY2FsU3RvcmFnZSBpZiBhdmFpbGFibGVcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XSA9IGxldmVsTmFtZTtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XHJcblxyXG4gICAgICAgICAgLy8gVXNlIHNlc3Npb24gY29va2llIGFzIGZhbGxiYWNrXHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5jb29raWUgPVxyXG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VLZXkpICsgXCI9XCIgKyBsZXZlbE5hbWUgKyBcIjtcIjtcclxuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gZ2V0UGVyc2lzdGVkTGV2ZWwoKSB7XHJcbiAgICAgICAgICB2YXIgc3RvcmVkTGV2ZWw7XHJcblxyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV07XHJcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRMZXZlbCA9PT0gdW5kZWZpbmVkVHlwZSkge1xyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBjb29raWUgPSB3aW5kb3cuZG9jdW1lbnQuY29va2llO1xyXG4gICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjb29raWUuaW5kZXhPZihcclxuICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiKTtcclxuICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IC9eKFteO10rKS8uZXhlYyhjb29raWUuc2xpY2UobG9jYXRpb24pKVsxXTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBJZiB0aGUgc3RvcmVkIGxldmVsIGlzIG5vdCB2YWxpZCwgdHJlYXQgaXQgYXMgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxyXG4gICAgICAgICAgaWYgKHNlbGYubGV2ZWxzW3N0b3JlZExldmVsXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHN0b3JlZExldmVsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBQdWJsaWMgQVBJXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xyXG5cclxuICAgICAgc2VsZi5sZXZlbHMgPSB7IFwiVFJBQ0VcIjogMCwgXCJERUJVR1wiOiAxLCBcIklORk9cIjogMiwgXCJXQVJOXCI6IDMsXHJcbiAgICAgICAgICBcIkVSUk9SXCI6IDQsIFwiU0lMRU5UXCI6IDV9O1xyXG5cclxuICAgICAgc2VsZi5tZXRob2RGYWN0b3J5ID0gZmFjdG9yeSB8fCBkZWZhdWx0TWV0aG9kRmFjdG9yeTtcclxuXHJcbiAgICAgIHNlbGYuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXR1cm4gY3VycmVudExldmVsO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2VsZi5zZXRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCwgcGVyc2lzdCkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJzdHJpbmdcIiAmJiBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbGV2ZWwgPSBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwibnVtYmVyXCIgJiYgbGV2ZWwgPj0gMCAmJiBsZXZlbCA8PSBzZWxmLmxldmVscy5TSUxFTlQpIHtcclxuICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBsZXZlbDtcclxuICAgICAgICAgICAgICBpZiAocGVyc2lzdCAhPT0gZmFsc2UpIHsgIC8vIGRlZmF1bHRzIHRvIHRydWVcclxuICAgICAgICAgICAgICAgICAgcGVyc2lzdExldmVsSWZQb3NzaWJsZShsZXZlbCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYsIGxldmVsLCBuYW1lKTtcclxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUgJiYgbGV2ZWwgPCBzZWxmLmxldmVscy5TSUxFTlQpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gY29uc29sZSBhdmFpbGFibGUgZm9yIGxvZ2dpbmdcIjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRocm93IFwibG9nLnNldExldmVsKCkgY2FsbGVkIHdpdGggaW52YWxpZCBsZXZlbDogXCIgKyBsZXZlbDtcclxuICAgICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNlbGYuc2V0RGVmYXVsdExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XHJcbiAgICAgICAgICBpZiAoIWdldFBlcnNpc3RlZExldmVsKCkpIHtcclxuICAgICAgICAgICAgICBzZWxmLnNldExldmVsKGxldmVsLCBmYWxzZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzZWxmLmVuYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcclxuICAgICAgICAgIHNlbGYuc2V0TGV2ZWwoc2VsZi5sZXZlbHMuVFJBQ0UsIHBlcnNpc3QpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2VsZi5kaXNhYmxlQWxsID0gZnVuY3Rpb24ocGVyc2lzdCkge1xyXG4gICAgICAgICAgc2VsZi5zZXRMZXZlbChzZWxmLmxldmVscy5TSUxFTlQsIHBlcnNpc3QpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHRoZSByaWdodCBsZXZlbFxyXG4gICAgICB2YXIgaW5pdGlhbExldmVsID0gZ2V0UGVyc2lzdGVkTGV2ZWwoKTtcclxuICAgICAgaWYgKGluaXRpYWxMZXZlbCA9PSBudWxsKSB7XHJcbiAgICAgICAgICBpbml0aWFsTGV2ZWwgPSBkZWZhdWx0TGV2ZWwgPT0gbnVsbCA/IFwiV0FSTlwiIDogZGVmYXVsdExldmVsO1xyXG4gICAgICB9XHJcbiAgICAgIHNlbGYuc2V0TGV2ZWwoaW5pdGlhbExldmVsLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqXHJcbiAgICAgKiBQYWNrYWdlLWxldmVsIEFQSVxyXG4gICAgICpcclxuICAgICAqL1xyXG5cclxuICAgIHZhciBkZWZhdWx0TG9nZ2VyID0gbmV3IExvZ2dlcigpO1xyXG5cclxuICAgIHZhciBfbG9nZ2Vyc0J5TmFtZSA9IHt9O1xyXG4gICAgZGVmYXVsdExvZ2dlci5nZXRMb2dnZXIgPSBmdW5jdGlvbiBnZXRMb2dnZXIobmFtZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIiB8fCBuYW1lID09PSBcIlwiKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiWW91IG11c3Qgc3VwcGx5IGEgbmFtZSB3aGVuIGNyZWF0aW5nIGEgbG9nZ2VyLlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsb2dnZXIgPSBfbG9nZ2Vyc0J5TmFtZVtuYW1lXTtcclxuICAgICAgICBpZiAoIWxvZ2dlcikge1xyXG4gICAgICAgICAgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV0gPSBuZXcgTG9nZ2VyKFxyXG4gICAgICAgICAgICBuYW1lLCBkZWZhdWx0TG9nZ2VyLmdldExldmVsKCksIGRlZmF1bHRMb2dnZXIubWV0aG9kRmFjdG9yeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsb2dnZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxyXG4gICAgdmFyIF9sb2cgPSAodHlwZW9mIHdpbmRvdyAhPT0gdW5kZWZpbmVkVHlwZSkgPyB3aW5kb3cubG9nIDogdW5kZWZpbmVkO1xyXG4gICAgZGVmYXVsdExvZ2dlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiZcclxuICAgICAgICAgICAgICAgd2luZG93LmxvZyA9PT0gZGVmYXVsdExvZ2dlcikge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9nID0gX2xvZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZGVmYXVsdExvZ2dlcjtcclxufSkpO1xyXG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanNcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJpbXBvcnQgeyBIT1NUX1VSTCB9IGZyb20gJy4vdmFycy5qcydcbmltcG9ydCBsb2cgZnJvbSAnbG9nbGV2ZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXBpQ2FsbChhY3Rpb24sIG1ldGhvZCwgZGF0YSkge1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gIGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04Jyk7XG5cbiAgbGV0IGNvbnRlbnRzID0ge1xuICAgIG1ldGhvZDogbWV0aG9kIHx8ICdOT19NRVRIT0RfU1BFQ0lGSUVEJyxcbiAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmZXRjaChIT1NUX1VSTCArIGFjdGlvbiwgY29udGVudHMpXG4gICAgICAudGhlbihmdW5jdGlvbiBzdGF0dXMocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzIDwgMzAwKVxuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kTm90aWZpY2F0aW9uKGFwcElkLCBwbGF5ZXJJZHMsIHRpdGxlcywgY29udGVudHMpIHtcbiAgdmFyIHBhcmFtcyA9IHtcbiAgICAnYXBwX2lkJzogYXBwSWQsXG4gICAgJ2hlYWRpbmdzJzogdGl0bGVzLFxuICAgICdjb250ZW50cyc6IGNvbnRlbnRzLFxuICAgICdpbmNsdWRlX3BsYXllcl9pZHMnOiBwbGF5ZXJJZHMsXG4gICAgJ2lzQW55V2ViJzogdHJ1ZSxcbiAgICAndXJsJzogJ2phdmFzY3JpcHQ6dm9pZCgwKTsnXG4gIH07XG4gIHJldHVybiBhcGlDYWxsKCdub3RpZmljYXRpb25zJywgJ1BPU1QnLCBwYXJhbXMpO1xufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwaS5qc1xuICoqLyIsIi8qXG4gTGltaXRTdG9yZS5wdXQoJ2NvbG9yYWRvJywgJ3JvY2t5Jyk7XG4gW1wicm9ja3lcIl1cbiBMaW1pdFN0b3JlLnB1dCgnY29sb3JhZG8nLCAnbW91bnRhaW4nKTtcbiBbXCJyb2NreVwiLCBcIm1vdW50YWluXCJdXG4gTGltaXRTdG9yZS5wdXQoJ2NvbG9yYWRvJywgJ25hdGlvbmFsJyk7XG4gW1wibW91bnRhaW5cIiwgXCJuYXRpb25hbFwiXVxuIExpbWl0U3RvcmUucHV0KCdjb2xvcmFkbycsICdwYXJrJyk7XG4gW1wibmF0aW9uYWxcIiwgXCJwYXJrXCJdXG4gKi9cbmZ1bmN0aW9uIExpbWl0U3RvcmUoKSB7XG59XG5cbkxpbWl0U3RvcmUuc3RvcmUgPSB7fTtcbkxpbWl0U3RvcmUuTElNSVQgPSAyO1xuXG5MaW1pdFN0b3JlLnB1dCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIGlmIChMaW1pdFN0b3JlLnN0b3JlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgIExpbWl0U3RvcmUuc3RvcmVba2V5XSA9IFtudWxsLCBudWxsXTtcbiAgfVxuICBMaW1pdFN0b3JlLnN0b3JlW2tleV0ucHVzaCh2YWx1ZSk7XG4gIGlmIChMaW1pdFN0b3JlLnN0b3JlW2tleV0ubGVuZ3RoID09IExpbWl0U3RvcmUuTElNSVQgKyAxKSB7XG4gICAgTGltaXRTdG9yZS5zdG9yZVtrZXldLnNoaWZ0KCk7XG4gIH1cbiAgcmV0dXJuIExpbWl0U3RvcmUuc3RvcmVba2V5XTtcbn07XG5cbkxpbWl0U3RvcmUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gTGltaXRTdG9yZS5zdG9yZVtrZXldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGltaXRTdG9yZTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9saW1pdFN0b3JlLmpzXG4gKiovIiwiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge2J1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsczogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbHMpO1xuICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG5cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XG4gIH0pKCk7XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZXZlbnRzLXBvbHlmaWxsLmpzXG4gKiovIiwiaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQgKGV2ZW50TmFtZSwgZGF0YSkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGxvZy5kZWJ1ZygnU2tpcHBpbmcgdHJpZ2dlcmluZyBvZiBldmVudDonLCBldmVudE5hbWUsICdiZWNhdXNlIHdlIGFyZSBydW5uaW5nIGluIGEgU2VydmljZVdvcmtlciBjb250ZXh0LicpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgYnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSwgZGV0YWlsczogZGF0YVxuICB9KTtcbiAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2V2ZW50cy5qc1xuICoqLyIsImltcG9ydCB7IGlzQnJvd3NlckVudiwgaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCwgcmVtb3ZlRG9tRWxlbWVudCwgYWRkRG9tRWxlbWVudCwgYWRkQ3NzQ2xhc3MsIHJlbW92ZUNzc0NsYXNzLCBvbmNlLCBvbiwgb2ZmIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgTGltaXRTdG9yZSBmcm9tICcuL2xpbWl0U3RvcmUuanMnO1xuaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgeyB0cmlnZ2VyRXZlbnQgfSBmcm9tICcuL2V2ZW50cy5qcydcblxuaWYgKGlzQnJvd3NlckVudigpKSB7XG4gIHJlcXVpcmUoXCIuL2JlbGwuc2Nzc1wiKTtcbiAgdmFyIGxvZ29TdmcgPSByZXF1aXJlKCdyYXchLi9iZWxsLnN2ZycpO1xuXG4gIC8qXG4gICAge1xuICAgICAgc2l6ZSA9IFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10sXG4gICAgICBwb3NpdGlvbiA9ICdib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnXSxcbiAgICAgIG9mZnNldCA9ICcxNXB4IDE1cHgnLFxuICAgICAgdGhlbWUgPSBbJ3JlZC13aGl0ZScsICd3aGl0ZS1yZWQnXSxcbiAgICAgIGluYWN0aXZlT3BhY2l0eTogMC43NSxcbiAgICAgIHNob3dMYXVuY2hlckFmdGVyOiAxMDAwLFxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAndW5zdWJzY3JpYmVkJzogJ1N1YnNjcmliZSB0byBub3RpZmljYXRpb25zJyxcbiAgICAgICAgICAnc3Vic2NyaWJlZCc6ICdZb3UncmUgc3Vic2NyaWJlZCB0byBub3RpZmljYXRpb25zJ1xuICAgICAgICB9XG4gICAgfVxuICAgKi9cbiAgY2xhc3MgQmVsbCB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBzaXplID0gJ3NtYWxsJyxcbiAgICAgICAgcG9zaXRpb24gPSAnYm90dG9tLWxlZnQnLFxuICAgICAgICB0aGVtZSA9ICdyZWQtd2hpdGUnLFxuICAgICAgICBzaG93TGF1bmNoZXJBZnRlciA9IDEwLFxuICAgICAgICBzaG93QmFkZ2VBZnRlciA9IDMwMCxcbiAgICAgICAgbWVzc2FnZXMgPSB7XG4gICAgICAgICAgICAndW5zdWJzY3JpYmVkJzogJ1N1YnNjcmliZSB0byBub3RpZmljYXRpb25zJyxcbiAgICAgICAgICAgICdzdWJzY3JpYmVkJzogXCJZb3UncmUgc3Vic2NyaWJlZCB0byBub3RpZmljYXRpb25zXCJcbiAgICAgICAgICB9LFxuICAgICAgICBwcmVub3RpZnkgPSB0cnVlXG4gICAgICB9ID0ge30pIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICB0aGVtZTogdGhlbWUsXG4gICAgICAgIHNob3dMYXVuY2hlckFmdGVyOiBzaG93TGF1bmNoZXJBZnRlcixcbiAgICAgICAgc2hvd0JhZGdlQWZ0ZXI6IHNob3dCYWRnZUFmdGVyLFxuICAgICAgICBtZXNzYWdlczogbWVzc2FnZXMsXG4gICAgICAgIHByZW5vdGlmeTogcHJlbm90aWZ5XG4gICAgICB9O1xuICAgICAgdGhpcy5zaXplID0gdGhpcy5vcHRpb25zLnNpemU7XG4gICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgdGhpcy5tZXNzYWdlcyA9IHRoaXMub3B0aW9ucy5tZXNzYWdlcztcbiAgICAgIHRoaXMubWVzc2FnZXMucXVldWVkID0gW107XG4gICAgICBpZiAoIXRoaXMubWVzc2FnZXMudW5zdWJzY3JpYmVkKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZXMudW5zdWJzY3JpYmVkID0gJ1N1YnNjcmliZSB0byBub3RpZmljYXRpb25zJ1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLm1lc3NhZ2VzLnN1YnNjcmliZWQpIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5zdWJzY3JpYmVkID0gXCJZb3UncmUgc3Vic2NyaWJlZCB0byBub3RpZmljYXRpb25zXCJcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGVzID0ge1xuICAgICAgICAndW5pbml0aWFsaXplZCc6ICdUaGUgYmVsbCBpcyBsb2FkaW5nLicsXG4gICAgICAgICdzdWJzY3JpYmVkJzogJ1RoZSB1c2VyIGlzIHN1YnNjcmliZWQnLFxuICAgICAgICAndW5zdWJzY3JpYmVkJzogJ1RoZSB1c2VyIGlzIHVuc3Vic2NyaWJlZCdcbiAgICAgIH07XG4gICAgICB0aGlzLnN0YXRlID0gJ3VuaW5pdGlhbGl6ZWQnO1xuXG4gICAgICAvLyBJbnN0YWxsIGV2ZW50IGhvb2tzXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25lc2lnbmFsLmJlbGwuc3RhdGUuY2hhbmdlZCcsIChzdGF0ZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmluZm8oJ29uZXNpZ25hbC5iZWxsLnN0YXRlLmNoYW5nZWQnLCBzdGF0ZS5kZXRhaWwpO1xuICAgICAgfSk7XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuYmVsbC5jbGljaycsICgpID0+IHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ2FsbCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmhpZGVNZXNzYWdlKCk7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09ICd1bnN1YnNjcmliZWQnKSB7XG4gICAgICAgICAgICBPbmVTaWduYWwucmVnaXN0ZXJGb3JQdXNoTm90aWZpY2F0aW9ucygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNEaWFsb2dPcGVuZWQoKSkge1xuICAgICAgICAgICAgICB0aGlzLnNob3dEaWFsb2coKVxuICAgICAgICAgICAgICAgIC50aGVuKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICBvbmNlKGRvY3VtZW50LCAnY2xpY2snLCAoZSwgZGVzdHJveUV2ZW50TGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdhc0RpYWxvZ0NsaWNrZWQgPSBzZWxmLmxhdW5jaGVyRGlhbG9nLmNvbnRhaW5zKGUudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhc0RpYWxvZ0NsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBkZXN0cm95RXZlbnRMaXN0ZW5lcigpO1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZURpYWxvZygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53YXNJbmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SW5hY3RpdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXNJbmFjdGl2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmlzSW5hY3RpdmUoKSkge1xuICAgICAgICAgIHRoaXMud2FzSW5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuc2V0SW5hY3RpdmUoZmFsc2UpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIG9yaWdpbmFsQ2FsbCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9yaWdpbmFsQ2FsbCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5iZWxsLmhvdmVyaW5nJywgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc0luYWN0aXZlKCkpIHtcbiAgICAgICAgICB0aGlzLndhc0luYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnNldEluYWN0aXZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSdzIGFscmVhZHkgYSBtZXNzYWdlIGJlaW5nIGZvcmNlIHNob3duLCBkbyBub3Qgb3ZlcnJpZGVcbiAgICAgICAgaWYgKHRoaXMuaXNNZXNzYWdlT3BlbmVkKCkgfHwgdGhpcy5pc0RpYWxvZ09wZW5lZCgpKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZygnVGhlcmUgaXMgYWxyZWFkeSBhIG1lc3NhZ2UgYmVpbmcgZGlzcGxheWVkOyB3YWl0IHVudGlsIGl0IGlzIGhpZGRlbiBhZ2Fpbi4nKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2VzLnF1ZXVlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbGV0IGRlcXVldWVkTWVzc2FnZSA9IHRoaXMuZGVxdWV1ZU1lc3NhZ2UoKTtcbiAgICAgICAgICB0aGlzLnNldE1lc3NhZ2UoZGVxdWV1ZWRNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldE1lc3NhZ2UodGhpcy5tZXNzYWdlc1t0aGlzLnN0YXRlXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG93TWVzc2FnZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmVzaWduYWwuYmVsbC5ob3ZlcmVkJywgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc01lc3NhZ2VPcGVuZWQoKSkge1xuICAgICAgICAgIHRoaXMuaGlkZU1lc3NhZ2UoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldE1lc3NhZ2UodGhpcy5tZXNzYWdlc1t0aGlzLnN0YXRlXSk7XG4gICAgICAgICAgICAgIGlmICh0aGlzLndhc0luYWN0aXZlICYmICF0aGlzLmlzRGlhbG9nT3BlbmVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEluYWN0aXZlKHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMud2FzSW5hY3RpdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5zdWJzY3JpcHRpb24uY2hhbmdlZCcsIChlKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoZS5kZXRhaWwgPyAnc3Vic2NyaWJlZCcgOiAndW5zdWJzY3JpYmVkJyk7XG4gICAgICB9KTtcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29uZXNpZ25hbC5hY3Rpb25zLndlbGNvbWVub3RpZmljYXRpb25zZW50JywgKGUpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwbGF5TWVzc2FnZShcIlRoYW5rcyBmb3Igc3Vic2NyaWJpbmchXCIsIDI1MDApXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5hY3RpdmUodHJ1ZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgIH1cblxuICAgIGNyZWF0ZSgpIHtcbiAgICAgIGlmICghaXNQdXNoTm90aWZpY2F0aW9uc1N1cHBvcnRlZCgpKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIC8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgYmVsbFxuICAgICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgIHJlbW92ZURvbUVsZW1lbnQoJ29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lcicpO1xuICAgICAgfVxuXG4gICAgICB3aW5kb3cuYWRkRG9tRWxlbWVudCA9IGFkZERvbUVsZW1lbnQ7XG4gICAgICAvLyBJbnNlcnQgdGhlIGJlbGwgY29udGFpbmVyXG4gICAgICBhZGREb21FbGVtZW50KCdib2R5JywgJ2JlZm9yZWVuZCcsICc8ZGl2IGlkPVwib25lc2lnbmFsLWJlbGwtY29udGFpbmVyXCIgY2xhc3M9XCJvbmVzaWduYWwtYmVsbC1jb250YWluZXIgb25lc2lnbmFsLXJlc2V0XCI+PC9kaXY+Jyk7XG4gICAgICAvLyBJbnNlcnQgdGhlIGJlbGwgbGF1bmNoZXJcbiAgICAgIGFkZERvbUVsZW1lbnQodGhpcy5jb250YWluZXIsICdiZWZvcmVlbmQnLCAnPGRpdiBpZD1cIm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyXCIgY2xhc3M9XCJvbmVzaWduYWwtYmVsbC1sYXVuY2hlclwiPjwvZGl2PicpO1xuICAgICAgLy8gSW5zZXJ0IHRoZSBiZWxsIGxhdW5jaGVyIGJ1dHRvblxuICAgICAgYWRkRG9tRWxlbWVudCh0aGlzLmxhdW5jaGVyLCAnYmVmb3JlZW5kJywgJzxkaXYgY2xhc3M9XCJvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b25cIj48L2Rpdj4nKTtcbiAgICAgIC8vIEluc2VydCB0aGUgYmVsbCBsYXVuY2hlciBiYWRnZVxuICAgICAgYWRkRG9tRWxlbWVudCh0aGlzLmxhdW5jaGVyLCAnYmVmb3JlZW5kJywgJzxkaXYgY2xhc3M9XCJvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZVwiPjwvZGl2PicpO1xuICAgICAgLy8gSW5zZXJ0IHRoZSBiZWxsIGxhdW5jaGVyIG1lc3NhZ2VcbiAgICAgIGFkZERvbUVsZW1lbnQodGhpcy5sYXVuY2hlciwgJ2JlZm9yZWVuZCcsICc8ZGl2IGNsYXNzPVwib25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZVwiPjwvZGl2PicpO1xuICAgICAgYWRkRG9tRWxlbWVudCh0aGlzLmxhdW5jaGVyTWVzc2FnZSwgJ2JlZm9yZWVuZCcsICc8ZGl2IGNsYXNzPVwib25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1ib2R5XCI+PC9kaXY+Jyk7XG4gICAgICAvLyBJbnNlcnQgdGhlIGJlbGwgbGF1bmNoZXIgZGlhbG9nXG4gICAgICBhZGREb21FbGVtZW50KHRoaXMubGF1bmNoZXIsICdiZWZvcmVlbmQnLCAnPGRpdiBjbGFzcz1cIm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ1wiPjwvZGl2PicpO1xuICAgICAgYWRkRG9tRWxlbWVudCh0aGlzLmxhdW5jaGVyRGlhbG9nLCAnYmVmb3JlZW5kJywgJzxkaXYgY2xhc3M9XCJvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keVwiPjwvZGl2PicpO1xuXG4gICAgICBhZGREb21FbGVtZW50KHRoaXMubGF1bmNoZXJEaWFsb2dCb2R5LCAnYmVmb3JlZW5kJyxcbiAgICAgICAgYFxuICAgICAgICA8aDE+TWFuYWdlIFNpdGUgTm90aWZpY2F0aW9uczwvaDE+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLW5vdGlmaWNhdGlvblwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLW5vdGlmaWNhdGlvbi1pY29uXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInB1c2gtbm90aWZpY2F0aW9uLXRleHQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHVzaC1ub3RpZmljYXRpb24tdGV4dC1zaG9ydFwiPjwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1c2gtbm90aWZpY2F0aW9uLXRleHRcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLW5vdGlmaWNhdGlvbi10ZXh0XCI+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9uLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwiYWN0aW9uLWJ1dHRvblwiPlVuc3Vic2NyaWJlPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGl2aWRlclwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwia2lja2JhY2tcIj5Qb3dlcmVkIGJ5IE9uZVNpZ25hbDwvZGl2PlxuICAgICAgICBgXG4gICAgICApO1xuXG4gICAgICAvLyBJbnN0YWxsIGV2ZW50c1xuICAgICAgdGhpcy5sYXVuY2hlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICAgIHZhciBpc0hvdmVyaW5nRGF0YSA9IExpbWl0U3RvcmUuZ2V0KCdiZWxsLmxhdW5jaGVyQnV0dG9uLm1vdXNlJywgJ292ZXInKTtcbiAgICAgICAgaWYgKGlzSG92ZXJpbmdEYXRhID09PSB1bmRlZmluZWQgfHwgaXNIb3ZlcmluZ0RhdGFbaXNIb3ZlcmluZ0RhdGEubGVuZ3RoIC0gMV0gPT09ICdvdXQnKSB7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KCdvbmVzaWduYWwuYmVsbC5ob3ZlcmluZycpO1xuICAgICAgICB9XG4gICAgICAgIExpbWl0U3RvcmUucHV0KCdiZWxsLmxhdW5jaGVyQnV0dG9uLm1vdXNlJywgJ292ZXInKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmxhdW5jaGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgIExpbWl0U3RvcmUucHV0KCdiZWxsLmxhdW5jaGVyQnV0dG9uLm1vdXNlJywgJ291dCcpO1xuICAgICAgICB0cmlnZ2VyRXZlbnQoJ29uZXNpZ25hbC5iZWxsLmhvdmVyZWQnKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmxhdW5jaGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHtcbiAgICAgICAgcmVtb3ZlRG9tRWxlbWVudCgnLnB1bHNlLXJpbmcnKTtcbiAgICAgICAgYWRkRG9tRWxlbWVudCh0aGlzLmxhdW5jaGVyQnV0dG9uLCAnYmVmb3JlZW5kJywgJzxkaXYgY2xhc3M9XCJwdWxzZS1yaW5nXCI+PC9kaXY+Jyk7XG4gICAgICAgIGFkZENzc0NsYXNzKHRoaXMubGF1bmNoZXJCdXR0b24sICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24tYWN0aXZlJyk7XG4gICAgICAgIGFkZENzc0NsYXNzKHRoaXMubGF1bmNoZXJCYWRnZSwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLWFjdGl2ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMubGF1bmNoZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHtcbiAgICAgICAgcmVtb3ZlQ3NzQ2xhc3ModGhpcy5sYXVuY2hlckJ1dHRvbiwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbi1hY3RpdmUnKTtcbiAgICAgICAgcmVtb3ZlQ3NzQ2xhc3ModGhpcy5sYXVuY2hlckJhZGdlLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2UtYWN0aXZlJyk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5sYXVuY2hlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdHJpZ2dlckV2ZW50KCdvbmVzaWduYWwuYmVsbC5idXR0b24uY2xpY2snKTtcbiAgICAgICAgdHJpZ2dlckV2ZW50KCdvbmVzaWduYWwuYmVsbC5jbGljaycpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCB2aXN1YWwgZWxlbWVudHNcbiAgICAgIGFkZERvbUVsZW1lbnQodGhpcy5sYXVuY2hlckJ1dHRvbiwgJ2JlZm9yZUVuZCcsIGxvZ29TdmcpO1xuXG4gICAgICAvLyBBZGQgZGVmYXVsdCBjbGFzc2VzXG4gICAgICB0aGlzLnNldFNpemUodGhpcy5vcHRpb25zLnNpemUpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAnYm90dG9tLWxlZnQnKSB7XG4gICAgICAgIGFkZENzc0NsYXNzKHRoaXMuY29udGFpbmVyLCAnb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLWJvdHRvbS1sZWZ0JylcbiAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0JylcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbS1yaWdodCcpIHtcbiAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5jb250YWluZXIsICdvbmVzaWduYWwtYmVsbC1jb250YWluZXItYm90dG9tLXJpZ2h0JylcbiAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodCcpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIE9uZVNpZ25hbCBiZWxsIHBvc2l0aW9uICcgKyB0aGlzLm9wdGlvbnMucG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRoZW1lID09PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWRlZmF1bHQnKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25zLnRoZW1lID09PSAnaW52ZXJzZScpIHtcbiAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWludmVyc2UnKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBPbmVTaWduYWwgYmVsbCB0aGVtZSAnICsgdGhpcy5vcHRpb25zLnRoZW1lKTtcbiAgICAgIH1cblxuICAgICAgT25lU2lnbmFsLmlzUHVzaE5vdGlmaWNhdGlvbnNFbmFibGVkKChpc1B1c2hFbmFibGVkKSA9PiB7XG4gICAgICAgIGlmIChpc1B1c2hFbmFibGVkKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2lzUHVzaEVuYWJsZWQnLCBpc1B1c2hFbmFibGVkKTtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuc2V0SW5hY3RpdmUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTsgLy8gRG8gbm90aGluZywgcmV0dXJucyBhIHByb21pc2UgdGhhdCBleGVjdXRlcyBpbW1lZGlhdGVseVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9zY2hlZHVsZUV2ZW50KHRoaXMub3B0aW9ucy5zaG93TGF1bmNoZXJBZnRlciwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93TGF1bmNoZXIoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NoZWR1bGVFdmVudCh0aGlzLm9wdGlvbnMuc2hvd0JhZGdlQWZ0ZXIsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByZW5vdGlmeSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFpc1B1c2hFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5xdWV1ZU1lc3NhZ2UoJ0NsaWNrIHRvIHN1YnNjcmliZSB0byBub3RpZmljYXRpb25zJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0JhZGdlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3NjaGVkdWxlRXZlbnQobXNJbkZ1dHVyZSwgdGFzaykge1xuICAgICAgaWYgKHR5cGVvZiB0YXNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rhc2sgdG8gYmUgc2NoZWR1bGVkIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgIGlmIChtc0luRnV0dXJlIDw9IDApIHtcbiAgICAgICAgdGFzaygpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0YXNrKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LCBtc0luRnV0dXJlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgc3RhdGUgdG8gdGhlIGNvcnJlY3QgbmV3IGN1cnJlbnQgc3RhdGUuIFJldHVybnMgYSBwcm9taXNlLlxuICAgICAqL1xuICAgIHVwZGF0ZVN0YXRlKCkge1xuICAgICAgT25lU2lnbmFsLmlzUHVzaE5vdGlmaWNhdGlvbnNFbmFibGVkKChpc0VuYWJsZWQpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShpc0VuYWJsZWQgPyAnc3Vic2NyaWJlZCcgOiAndW5zdWJzY3JpYmVkJyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IHN0YXRlIHRvIHRoZSBzcGVjaWZpZWQgbmV3IHN0YXRlLlxuICAgICAqIEBwYXJhbSBuZXdTdGF0ZSBPbmUgb2YgWydzdWJzY3JpYmVkJywgJ3Vuc3Vic2NyaWJlZCddLlxuICAgICAqL1xuICAgIHNldFN0YXRlKG5ld1N0YXRlKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZXMuaGFzT3duUHJvcGVydHkobmV3U3RhdGUpKSB7XG4gICAgICAgIGxldCBsYXN0U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICB0aGlzLnN0YXRlID0gbmV3U3RhdGU7XG4gICAgICAgIGlmIChsYXN0U3RhdGUgIT09IG5ld1N0YXRlKSB7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KCdvbmVzaWduYWwuYmVsbC5zdGF0ZS5jaGFuZ2VkJywge2Zyb206IGxhc3RTdGF0ZSwgdG86IG5ld1N0YXRlfSk7XG4gICAgICAgICAgLy8gVXBkYXRlIGFueXRoaW5nIHRoYXQgc2hvdWxkIGJlIGNoYW5nZWQgaGVyZSBpbiB0aGUgbmV3IHN0YXRlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgYW55dGhpbmcgdGhhdCBzaG91bGQgYmUgcmVzZXQgdG8gdGhlIHNhbWUgc3RhdGVcbiAgICAgICAgdGhpcy5zZXRNZXNzYWdlKHRoaXMubWVzc2FnZXNbbmV3U3RhdGVdKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb2cuZXJyb3IoJ0Nhbm5vdCB1cGRhdGUgdG8gaW52YWxpZCBuZXcgc3RhdGUnLCBuZXdTdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZW5xdWV1ZU1lc3NhZ2UobWVzc2FnZSwgbm90aWZ5ID0gZmFsc2UpIHtcbiAgICAgIHRoaXMubWVzc2FnZXMucXVldWVkLnB1c2gobWVzc2FnZSk7XG4gICAgICBpZiAodGhpcy5pc0JhZGdlT3BlbigpKSB7XG4gICAgICAgIHRoaXMuaGlkZUJhZGdlKClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbmNyZW1lbnRCYWRnZSgpO1xuICAgICAgICAgICAgdGhpcy5zaG93QmFkZ2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5jcmVtZW50QmFkZ2UoKTtcbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHNvIHRoZSBiYWRnZSBkb2Vzbid0IGltbWVkaWF0ZWx5IHJlbmRlclxuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgIHRoaXMuc2hvd0JhZGdlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZXF1ZXVlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICBsZXQgZGVxdWV1ZWRNZXNzYWdlID0gdGhpcy5tZXNzYWdlcy5xdWV1ZWQucG9wKG1lc3NhZ2UpO1xuICAgICAgaWYgKHRoaXMuaXNCYWRnZU9wZW4oKSkge1xuICAgICAgICB0aGlzLmhpZGVCYWRnZSgpXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kZWNyZW1lbnRCYWRnZSgpO1xuICAgICAgICAgICAgdGhpcy5zaG93QmFkZ2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBuZXdCYWRnZU51bWJlciA9IHRoaXMuZGVjcmVtZW50QmFkZ2UoKTtcbiAgICAgICAgaWYgKG5ld0JhZGdlTnVtYmVyIDw9IDApIHtcbiAgICAgICAgICB0aGlzLmhpZGVCYWRnZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVxdWV1ZWRNZXNzYWdlO1xuICAgIH1cblxuICAgIHNob3dEaWFsb2coKSB7XG4gICAgICBhZGRDc3NDbGFzcyh0aGlzLmxhdW5jaGVyRGlhbG9nLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLW9wZW5lZCcpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgb25jZSh0aGlzLmxhdW5jaGVyRGlhbG9nLCAndHJhbnNpdGlvbmVuZCcsIChlKSA9PiB7XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLmxhdW5jaGVyRGlhbG9nKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGlkZURpYWxvZygpIHtcbiAgICAgIHJlbW92ZUNzc0NsYXNzKHRoaXMubGF1bmNoZXJEaWFsb2csICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctb3BlbmVkJyk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBvbmNlKHRoaXMubGF1bmNoZXJEaWFsb2csICd0cmFuc2l0aW9uZW5kJywgKGUpID0+IHtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMubGF1bmNoZXJEaWFsb2cpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpc0RpYWxvZ09wZW5lZCgpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLW9wZW5lZCcpO1xuICAgIH1cblxuICAgIHNob3dMYXVuY2hlcigpIHtcbiAgICAgIGFkZENzc0NsYXNzKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1hY3RpdmUnKTtcbiAgICB9XG5cbiAgICBoaWRlTGF1bmNoZXIoKSB7XG4gICAgICByZW1vdmVDc3NDbGFzcyh0aGlzLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgc2V0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICB0aGlzLmxhdW5jaGVyTWVzc2FnZUJvZHkuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICB9XG5cbiAgICBzaG93TWVzc2FnZSgpIHtcbiAgICAgIGFkZENzc0NsYXNzKHRoaXMubGF1bmNoZXJNZXNzYWdlLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1vcGVuZWQnKTtcbiAgICB9XG5cbiAgICBoaWRlTWVzc2FnZSgpIHtcbiAgICAgIHJlbW92ZUNzc0NsYXNzKHRoaXMubGF1bmNoZXJNZXNzYWdlLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1vcGVuZWQnKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIG9uY2UodGhpcy5sYXVuY2hlck1lc3NhZ2UsICd0cmFuc2l0aW9uZW5kJywgKGUpID0+IHtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMubGF1bmNoZXJNZXNzYWdlKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaXNNZXNzYWdlT3BlbmVkKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlLW9wZW5lZCcpO1xuICAgIH1cblxuICAgIGRpc3BsYXlNZXNzYWdlKGNvbnRlbnQsIGhpZGVBZnRlciA9IDApIHtcbiAgICAgIGxvZy5pbmZvKCdEaXNwbGF5aW5nIG1lc3NhZ2UuJyk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc01lc3NhZ2VPcGVuZWQoKSkge1xuICAgICAgICAgIHRoaXMuaGlkZU1lc3NhZ2UoKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldE1lc3NhZ2UoY29udGVudCk7XG4gICAgICAgICAgICAgIHRoaXMuc2hvd01lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgaWYgKGhpZGVBZnRlcikge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlTWVzc2FnZSgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9LCBoaWRlQWZ0ZXIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRNZXNzYWdlKGNvbnRlbnQpO1xuICAgICAgICAgIHRoaXMuc2hvd01lc3NhZ2UoKTtcbiAgICAgICAgICBpZiAoaGlkZUFmdGVyKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5oaWRlTWVzc2FnZSgpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwgaGlkZUFmdGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldEJhZGdlKGNvbnRlbnQpIHtcbiAgICAgIHRoaXMubGF1bmNoZXJCYWRnZS5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgIH1cblxuICAgIHNob3dCYWRnZSgpIHtcbiAgICAgIGlmICh0aGlzLmJhZGdlSGFzQ29udGVudCgpKSB7XG4gICAgICAgIGFkZENzc0NsYXNzKHRoaXMubGF1bmNoZXJCYWRnZSwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLW9wZW5lZCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlzQmFkZ2VPcGVuKCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1iYWRnZS1vcGVuZWQnKTtcbiAgICB9XG5cbiAgICBiYWRnZUhhc0NvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYXVuY2hlckJhZGdlLmlubmVySFRNTC5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGdldEJhZGdlQ29udGVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhdW5jaGVyQmFkZ2UuaW5uZXJIVE1MO1xuICAgIH1cblxuICAgIGluY3JlbWVudEJhZGdlKCkge1xuICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLmdldEJhZGdlQ29udGVudCgpO1xuICAgICAgLy8gSWYgaXQgSVMgYSBudW1iZXIgKGlzIG5vdCBub3QgYSBudW1iZXIpXG4gICAgICBpZiAoIWlzTmFOKGNvbnRlbnQpKSB7XG4gICAgICAgIGxldCBiYWRnZU51bWJlciA9ICtjb250ZW50OyAvLyBDb2VyY2UgdG8gaW50XG4gICAgICAgIGJhZGdlTnVtYmVyICs9IDE7XG4gICAgICAgIHRoaXMuc2V0QmFkZ2UoYmFkZ2VOdW1iZXIpXG4gICAgICAgIHJldHVybiBiYWRnZU51bWJlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWNyZW1lbnRCYWRnZSgpIHtcbiAgICAgIGxldCBjb250ZW50ID0gdGhpcy5nZXRCYWRnZUNvbnRlbnQoKTtcbiAgICAgIC8vIElmIGl0IElTIGEgbnVtYmVyIChpcyBub3Qgbm90IGEgbnVtYmVyKVxuICAgICAgaWYgKCFpc05hTihjb250ZW50KSkge1xuICAgICAgICBsZXQgYmFkZ2VOdW1iZXIgPSArY29udGVudDsgLy8gQ29lcmNlIHRvIGludFxuICAgICAgICBiYWRnZU51bWJlciAtPSAxO1xuICAgICAgICBpZiAoYmFkZ2VOdW1iZXIgPiAwKVxuICAgICAgICAgIHRoaXMuc2V0QmFkZ2UoYmFkZ2VOdW1iZXIpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aGlzLnNldEJhZGdlKFwiXCIpO1xuICAgICAgICByZXR1cm4gYmFkZ2VOdW1iZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGlkZUJhZGdlKCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcmVtb3ZlQ3NzQ2xhc3ModGhpcy5sYXVuY2hlckJhZGdlLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2Utb3BlbmVkJyk7XG4gICAgICAgIG9uY2UodGhpcy5sYXVuY2hlckJhZGdlLCAndHJhbnNpdGlvbmVuZCcsIChlKSA9PiB7XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLmxhdW5jaGVyQmFkZ2UpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlzSW5hY3RpdmUoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWluYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgc2V0SW5hY3RpdmUoaXNJbmFjdGl2ZSkge1xuICAgICAgaWYgKGlzSW5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5oaWRlTWVzc2FnZSgpO1xuICAgICAgICBpZiAodGhpcy5iYWRnZUhhc0NvbnRlbnQoKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhpZGVCYWRnZSgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGFkZENzc0NsYXNzKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1pbmFjdGl2ZScpO1xuICAgICAgICAgICAgICB0aGlzLnNldFNpemUoJ3NtYWxsJyk7O1xuICAgICAgICAgICAgICB2YXIgbGF1bmNoZXIgPSB0aGlzLmxhdW5jaGVyO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIE9uY2UgdGhlIGxhdW5jaGVyIGhhcyBmaW5pc2hlZCBzaHJpbmtpbmcgZG93blxuICAgICAgICAgICAgICAgIG9uY2UodGhpcy5sYXVuY2hlciwgJ3RyYW5zaXRpb25lbmQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLmxhdW5jaGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93QmFkZ2UoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWluYWN0aXZlJyk7XG4gICAgICAgICAgdGhpcy5zZXRTaXplKCdzbWFsbCcpO1xuICAgICAgICAgIHZhciBsYXVuY2hlciA9IHRoaXMubGF1bmNoZXI7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIC8vIE9uY2UgdGhlIGxhdW5jaGVyIGhhcyBmaW5pc2hlZCBzaHJpbmtpbmcgZG93blxuICAgICAgICAgICAgb25jZSh0aGlzLmxhdW5jaGVyLCAndHJhbnNpdGlvbmVuZCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcy5sYXVuY2hlcikge1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5iYWRnZUhhc0NvbnRlbnQoKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhpZGVCYWRnZSgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIHJlbW92ZUNzc0NsYXNzKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1pbmFjdGl2ZScpO1xuICAgICAgICAgICAgICB0aGlzLnNldFNpemUodGhpcy5vcHRpb25zLnNpemUpO1xuICAgICAgICAgICAgICB2YXIgbGF1bmNoZXIgPSB0aGlzLmxhdW5jaGVyO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIE9uY2UgdGhlIGxhdW5jaGVyIGhhcyBmaW5pc2hlZCBzaHJpbmtpbmcgZG93blxuICAgICAgICAgICAgICAgIG9uY2UodGhpcy5sYXVuY2hlciwgJ3RyYW5zaXRpb25lbmQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLmxhdW5jaGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93QmFkZ2UoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWluYWN0aXZlJyk7XG4gICAgICAgICAgdGhpcy5zZXRTaXplKHRoaXMub3B0aW9ucy5zaXplKTtcbiAgICAgICAgICB2YXIgbGF1bmNoZXIgPSB0aGlzLmxhdW5jaGVyO1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBPbmNlIHRoZSBsYXVuY2hlciBoYXMgZmluaXNoZWQgc2hyaW5raW5nIGRvd25cbiAgICAgICAgICAgIG9uY2UodGhpcy5sYXVuY2hlciwgJ3RyYW5zaXRpb25lbmQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMubGF1bmNoZXIpIHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0U2l6ZShzaXplKSB7XG4gICAgICByZW1vdmVDc3NDbGFzcyh0aGlzLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20nKTtcbiAgICAgIHJlbW92ZUNzc0NsYXNzKHRoaXMubGF1bmNoZXIsICdvbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCcpO1xuICAgICAgcmVtb3ZlQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnJyk7XG4gICAgICBpZiAoc2l6ZSA9PT0gJ3NtYWxsJykge1xuICAgICAgICBhZGRDc3NDbGFzcyh0aGlzLmxhdW5jaGVyLCAnb25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20nKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2l6ZSA9PT0gJ21lZGl1bScpIHtcbiAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kJylcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHNpemUgPT09ICdsYXJnZScpIHtcbiAgICAgICAgYWRkQ3NzQ2xhc3ModGhpcy5sYXVuY2hlciwgJ29uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnJylcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgT25lU2lnbmFsIGJlbGwgc2l6ZSAnICsgc2l6ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRhaW5lcigpIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyJyk7XG4gICAgfVxuXG4gICAgZ2V0IGxhdW5jaGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNvbmVzaWduYWwtYmVsbC1sYXVuY2hlcicpO1xuICAgIH1cblxuICAgIGdldCBsYXVuY2hlckJ1dHRvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhdW5jaGVyLnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24nKTtcbiAgICB9XG5cbiAgICBnZXQgbGF1bmNoZXJCYWRnZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhdW5jaGVyLnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZScpO1xuICAgIH1cblxuICAgIGdldCBsYXVuY2hlck1lc3NhZ2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYXVuY2hlci5xdWVyeVNlbGVjdG9yKCcub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZScpO1xuICAgIH1cblxuICAgIGdldCBsYXVuY2hlck1lc3NhZ2VCb2R5KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGF1bmNoZXIucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UtYm9keScpO1xuICAgIH1cblxuICAgIGdldCBsYXVuY2hlckRpYWxvZygpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhdW5jaGVyLnF1ZXJ5U2VsZWN0b3IoJy5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2cnKTtcbiAgICB9XG5cbiAgICBnZXQgbGF1bmNoZXJEaWFsb2dCb2R5KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGF1bmNoZXIucXVlcnlTZWxlY3RvcignLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZy1ib2R5Jyk7XG4gICAgfVxuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBCZWxsO1xufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2JlbGwuanNcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL2JlbGwuc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9iZWxsLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9iZWxsLnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvYmVsbC5zY3NzXG4gKiogbW9kdWxlIGlkID0gMTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxuKiBDbGVhblNsYXRlXFxuKiAgIGdpdGh1Yi5jb20vcHJlbWFzYWdhci9jbGVhbnNsYXRlXFxuKlxcbiovLm9uZXNpZ25hbC1yZXNldCwub25lc2lnbmFsLXJlc2V0IGEsLm9uZXNpZ25hbC1yZXNldCBhYmJyLC5vbmVzaWduYWwtcmVzZXQgYWNyb255bSwub25lc2lnbmFsLXJlc2V0IGFkZHJlc3MsLm9uZXNpZ25hbC1yZXNldCBhcHBsZXQsLm9uZXNpZ25hbC1yZXNldCBhcmVhLC5vbmVzaWduYWwtcmVzZXQgYXJ0aWNsZSwub25lc2lnbmFsLXJlc2V0IGFzaWRlLC5vbmVzaWduYWwtcmVzZXQgYXVkaW8sLm9uZXNpZ25hbC1yZXNldCBiLC5vbmVzaWduYWwtcmVzZXQgYmlnLC5vbmVzaWduYWwtcmVzZXQgYmxvY2txdW90ZSwub25lc2lnbmFsLXJlc2V0IGJ1dHRvbiwub25lc2lnbmFsLXJlc2V0IGNhbnZhcywub25lc2lnbmFsLXJlc2V0IGNhcHRpb24sLm9uZXNpZ25hbC1yZXNldCBjaXRlLC5vbmVzaWduYWwtcmVzZXQgY29kZSwub25lc2lnbmFsLXJlc2V0IGNvbCwub25lc2lnbmFsLXJlc2V0IGNvbGdyb3VwLC5vbmVzaWduYWwtcmVzZXQgZGF0YWxpc3QsLm9uZXNpZ25hbC1yZXNldCBkZCwub25lc2lnbmFsLXJlc2V0IGRlbCwub25lc2lnbmFsLXJlc2V0IGRmbiwub25lc2lnbmFsLXJlc2V0IGRpdiwub25lc2lnbmFsLXJlc2V0IGRsLC5vbmVzaWduYWwtcmVzZXQgZHQsLm9uZXNpZ25hbC1yZXNldCBlbSwub25lc2lnbmFsLXJlc2V0IGZpZWxkc2V0LC5vbmVzaWduYWwtcmVzZXQgZmlnY2FwdGlvbiwub25lc2lnbmFsLXJlc2V0IGZpZ3VyZSwub25lc2lnbmFsLXJlc2V0IGZvb3Rlciwub25lc2lnbmFsLXJlc2V0IGZvcm0sLm9uZXNpZ25hbC1yZXNldCBoMSwub25lc2lnbmFsLXJlc2V0IGgyLC5vbmVzaWduYWwtcmVzZXQgaDMsLm9uZXNpZ25hbC1yZXNldCBoNCwub25lc2lnbmFsLXJlc2V0IGg1LC5vbmVzaWduYWwtcmVzZXQgaDYsLm9uZXNpZ25hbC1yZXNldCBoZWFkZXIsLm9uZXNpZ25hbC1yZXNldCBociwub25lc2lnbmFsLXJlc2V0IGksLm9uZXNpZ25hbC1yZXNldCBpZnJhbWUsLm9uZXNpZ25hbC1yZXNldCBpbWcsLm9uZXNpZ25hbC1yZXNldCBpbnB1dCwub25lc2lnbmFsLXJlc2V0IGlucywub25lc2lnbmFsLXJlc2V0IGtiZCwub25lc2lnbmFsLXJlc2V0IGxhYmVsLC5vbmVzaWduYWwtcmVzZXQgbGVnZW5kLC5vbmVzaWduYWwtcmVzZXQgbGksLm9uZXNpZ25hbC1yZXNldCBtYWluLC5vbmVzaWduYWwtcmVzZXQgbWFwLC5vbmVzaWduYWwtcmVzZXQgbWFyaywub25lc2lnbmFsLXJlc2V0IG1lbnUsLm9uZXNpZ25hbC1yZXNldCBtZXRhLC5vbmVzaWduYWwtcmVzZXQgbmF2LC5vbmVzaWduYWwtcmVzZXQgb2JqZWN0LC5vbmVzaWduYWwtcmVzZXQgb2wsLm9uZXNpZ25hbC1yZXNldCBvcHRncm91cCwub25lc2lnbmFsLXJlc2V0IG9wdGlvbiwub25lc2lnbmFsLXJlc2V0IG91dHB1dCwub25lc2lnbmFsLXJlc2V0IHAsLm9uZXNpZ25hbC1yZXNldCBwcmUsLm9uZXNpZ25hbC1yZXNldCBwcm9ncmVzcywub25lc2lnbmFsLXJlc2V0IHEsLm9uZXNpZ25hbC1yZXNldCBzYW1wLC5vbmVzaWduYWwtcmVzZXQgc2VjdGlvbiwub25lc2lnbmFsLXJlc2V0IHNlbGVjdCwub25lc2lnbmFsLXJlc2V0IHNtYWxsLC5vbmVzaWduYWwtcmVzZXQgc3Bhbiwub25lc2lnbmFsLXJlc2V0IHN0cmlrZSwub25lc2lnbmFsLXJlc2V0IHN0cm9uZywub25lc2lnbmFsLXJlc2V0IHN1Yiwub25lc2lnbmFsLXJlc2V0IHN1bW1hcnksLm9uZXNpZ25hbC1yZXNldCBzdXAsLm9uZXNpZ25hbC1yZXNldCB0YWJsZSwub25lc2lnbmFsLXJlc2V0IHRib2R5LC5vbmVzaWduYWwtcmVzZXQgdGQsLm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYSwub25lc2lnbmFsLXJlc2V0IHRmb290LC5vbmVzaWduYWwtcmVzZXQgdGgsLm9uZXNpZ25hbC1yZXNldCB0aGVhZCwub25lc2lnbmFsLXJlc2V0IHRpbWUsLm9uZXNpZ25hbC1yZXNldCB0ciwub25lc2lnbmFsLXJlc2V0IHR0LC5vbmVzaWduYWwtcmVzZXQgdWwsLm9uZXNpZ25hbC1yZXNldCB2YXIsLm9uZXNpZ25hbC1yZXNldCB2aWRlb3tiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6c2Nyb2xsO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7YmFja2dyb3VuZC1pbWFnZTpub25lO2JhY2tncm91bmQtcG9zaXRpb246MCAwO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdDtib3JkZXItY29sb3I6IzAwMDtib3JkZXI6bWVkaXVtIG5vbmUgY3VycmVudENvbG9yO2JvdHRvbTphdXRvO2NsZWFyOm5vbmU7Y2xpcDphdXRvO2NvbG9yOmluaGVyaXQ7Y291bnRlci1pbmNyZW1lbnQ6bm9uZTtjb3VudGVyLXJlc2V0Om5vbmU7Y3Vyc29yOmF1dG87ZGlyZWN0aW9uOmluaGVyaXQ7ZGlzcGxheTppbmxpbmU7ZmxvYXQ6bm9uZTtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXZhcmlhbnQ6bm9ybWFsO2ZvbnQtd2VpZ2h0OmluaGVyaXQ7aGVpZ2h0OmF1dG87bGVmdDphdXRvO2xldHRlci1zcGFjaW5nOm5vcm1hbDtsaW5lLWhlaWdodDppbmhlcml0O2xpc3Qtc3R5bGUtdHlwZTppbmhlcml0O2xpc3Qtc3R5bGUtcG9zaXRpb246b3V0c2lkZTtsaXN0LXN0eWxlLWltYWdlOm5vbmU7bWFyZ2luOjA7bWF4LWhlaWdodDpub25lO21heC13aWR0aDpub25lO21pbi1oZWlnaHQ6MDttaW4td2lkdGg6MDtvcGFjaXR5OjE7b3V0bGluZTptZWRpdW0gbm9uZSBpbnZlcnQ7b3ZlcmZsb3c6dmlzaWJsZTtwYWRkaW5nOjA7cG9zaXRpb246c3RhdGljO3F1b3RlczpcXFwiXFxcIiBcXFwiXFxcIjtyaWdodDphdXRvO3RhYmxlLWxheW91dDphdXRvO3RleHQtYWxpZ246aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWluZGVudDowO3RleHQtdHJhbnNmb3JtOm5vbmU7dG9wOmF1dG87dW5pY29kZS1iaWRpOm5vcm1hbDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTt2aXNpYmlsaXR5OmluaGVyaXQ7d2hpdGUtc3BhY2U6bm9ybWFsO3dpZHRoOmF1dG87d29yZC1zcGFjaW5nOm5vcm1hbDt6LWluZGV4OmF1dG87YmFja2dyb3VuZC1vcmlnaW46cGFkZGluZy1ib3g7YmFja2dyb3VuZC1jbGlwOmJvcmRlci1ib3g7YmFja2dyb3VuZC1zaXplOmF1dG87LXdlYmtpdC1ib3JkZXItaW1hZ2U6bm9uZTstby1ib3JkZXItaW1hZ2U6bm9uZTtib3JkZXItaW1hZ2U6bm9uZTtib3JkZXItcmFkaXVzOjA7Ym94LXNoYWRvdzpub25lO2JveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1jb2x1bW4tY291bnQ6YXV0bzstbW96LWNvbHVtbi1jb3VudDphdXRvO2NvbHVtbi1jb3VudDphdXRvOy13ZWJraXQtY29sdW1uLWdhcDpub3JtYWw7LW1vei1jb2x1bW4tZ2FwOm5vcm1hbDtjb2x1bW4tZ2FwOm5vcm1hbDstd2Via2l0LWNvbHVtbi1ydWxlOm1lZGl1bSBub25lICMwMDA7LW1vei1jb2x1bW4tcnVsZTptZWRpdW0gbm9uZSAjMDAwO2NvbHVtbi1ydWxlOm1lZGl1bSBub25lICMwMDA7LXdlYmtpdC1jb2x1bW4tc3BhbjoxOy1tb3otY29sdW1uLXNwYW46MTtjb2x1bW4tc3BhbjoxOy13ZWJraXQtY29sdW1uLXdpZHRoOmF1dG87LW1vei1jb2x1bW4td2lkdGg6YXV0bztjb2x1bW4td2lkdGg6YXV0bztmb250LWZlYXR1cmUtc2V0dGluZ3M6bm9ybWFsO292ZXJmbG93LXg6dmlzaWJsZTtvdmVyZmxvdy15OnZpc2libGU7LXdlYmtpdC1oeXBoZW5zOm1hbnVhbDstbW96LWh5cGhlbnM6bWFudWFsO2h5cGhlbnM6bWFudWFsOy13ZWJraXQtcGVyc3BlY3RpdmU6bm9uZTstbXMtcGVyc3BlY3RpdmU6bm9uZTstby1wZXJzcGVjdGl2ZTpub25lO3BlcnNwZWN0aXZlOm5vbmU7LXdlYmtpdC1wZXJzcGVjdGl2ZS1vcmlnaW46NTAlIDUwJTstbXMtcGVyc3BlY3RpdmUtb3JpZ2luOjUwJSA1MCU7LW8tcGVyc3BlY3RpdmUtb3JpZ2luOjUwJSA1MCU7cGVyc3BlY3RpdmUtb3JpZ2luOjUwJSA1MCU7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGU7YmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlO3RleHQtc2hhZG93Om5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwcyBlYXNlIDBzO3RyYW5zaXRpb246YWxsIDBzIGVhc2UgMHM7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTstbXMtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmU7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7LW1zLXRyYW5zZm9ybS1vcmlnaW46NTAlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7LXdlYmtpdC10cmFuc2Zvcm0tc3R5bGU6ZmxhdDt0cmFuc2Zvcm0tc3R5bGU6ZmxhdDt3b3JkLWJyZWFrOm5vcm1hbH0ub25lc2lnbmFsLXJlc2V0LC5vbmVzaWduYWwtcmVzZXQgYWRkcmVzcywub25lc2lnbmFsLXJlc2V0IGFydGljbGUsLm9uZXNpZ25hbC1yZXNldCBhdWRpbywub25lc2lnbmFsLXJlc2V0IGJsb2NrcXVvdGUsLm9uZXNpZ25hbC1yZXNldCBjYXB0aW9uLC5vbmVzaWduYWwtcmVzZXQgY29sZ3JvdXAsLm9uZXNpZ25hbC1yZXNldCBkZCwub25lc2lnbmFsLXJlc2V0IGRpYWxvZywub25lc2lnbmFsLXJlc2V0IGRpdiwub25lc2lnbmFsLXJlc2V0IGRsLC5vbmVzaWduYWwtcmVzZXQgZHQsLm9uZXNpZ25hbC1yZXNldCBmaWVsZHNldCwub25lc2lnbmFsLXJlc2V0IGZpZ3VyZSwub25lc2lnbmFsLXJlc2V0IGZvb3Rlciwub25lc2lnbmFsLXJlc2V0IGZvcm0sLm9uZXNpZ25hbC1yZXNldCBoMSwub25lc2lnbmFsLXJlc2V0IGgyLC5vbmVzaWduYWwtcmVzZXQgaDMsLm9uZXNpZ25hbC1yZXNldCBoNCwub25lc2lnbmFsLXJlc2V0IGg1LC5vbmVzaWduYWwtcmVzZXQgaDYsLm9uZXNpZ25hbC1yZXNldCBoZWFkZXIsLm9uZXNpZ25hbC1yZXNldCBoZ3JvdXAsLm9uZXNpZ25hbC1yZXNldCBociwub25lc2lnbmFsLXJlc2V0IG1haW4sLm9uZXNpZ25hbC1yZXNldCBtZW51LC5vbmVzaWduYWwtcmVzZXQgbmF2LC5vbmVzaWduYWwtcmVzZXQgb2wsLm9uZXNpZ25hbC1yZXNldCBvcHRpb24sLm9uZXNpZ25hbC1yZXNldCBwLC5vbmVzaWduYWwtcmVzZXQgcHJlLC5vbmVzaWduYWwtcmVzZXQgcHJvZ3Jlc3MsLm9uZXNpZ25hbC1yZXNldCBzZWN0aW9uLC5vbmVzaWduYWwtcmVzZXQgc3VtbWFyeSwub25lc2lnbmFsLXJlc2V0IHVsLC5vbmVzaWduYWwtcmVzZXQgdmlkZW97ZGlzcGxheTpibG9ja30ub25lc2lnbmFsLXJlc2V0IGgxLC5vbmVzaWduYWwtcmVzZXQgaDIsLm9uZXNpZ25hbC1yZXNldCBoMywub25lc2lnbmFsLXJlc2V0IGg0LC5vbmVzaWduYWwtcmVzZXQgaDUsLm9uZXNpZ25hbC1yZXNldCBoNntmb250LXdlaWdodDo3MDB9Lm9uZXNpZ25hbC1yZXNldCBoMXtmb250LXNpemU6MmVtO3BhZGRpbmc6LjY3ZW0gMH0ub25lc2lnbmFsLXJlc2V0IGgye2ZvbnQtc2l6ZToxLjVlbTtwYWRkaW5nOi44M2VtIDB9Lm9uZXNpZ25hbC1yZXNldCBoM3tmb250LXNpemU6MS4xN2VtO3BhZGRpbmc6LjgzZW0gMH0ub25lc2lnbmFsLXJlc2V0IGg0e2ZvbnQtc2l6ZToxZW19Lm9uZXNpZ25hbC1yZXNldCBoNXtmb250LXNpemU6LjgzZW19Lm9uZXNpZ25hbC1yZXNldCBwe21hcmdpbjoxZW0gMH0ub25lc2lnbmFsLXJlc2V0IHRhYmxle2Rpc3BsYXk6dGFibGV9Lm9uZXNpZ25hbC1yZXNldCB0aGVhZHtkaXNwbGF5OnRhYmxlLWhlYWRlci1ncm91cH0ub25lc2lnbmFsLXJlc2V0IHRib2R5e2Rpc3BsYXk6dGFibGUtcm93LWdyb3VwfS5vbmVzaWduYWwtcmVzZXQgdGZvb3R7ZGlzcGxheTp0YWJsZS1mb290ZXItZ3JvdXB9Lm9uZXNpZ25hbC1yZXNldCB0cntkaXNwbGF5OnRhYmxlLXJvd30ub25lc2lnbmFsLXJlc2V0IHRkLC5vbmVzaWduYWwtcmVzZXQgdGh7ZGlzcGxheTp0YWJsZS1jZWxsO3BhZGRpbmc6MnB4fS5vbmVzaWduYWwtcmVzZXQgb2wsLm9uZXNpZ25hbC1yZXNldCB1bHttYXJnaW46MWVtIDB9Lm9uZXNpZ25hbC1yZXNldCBvbCBsaSwub25lc2lnbmFsLXJlc2V0IG9sIG9sIGxpLC5vbmVzaWduYWwtcmVzZXQgb2wgb2wgb2wgbGksLm9uZXNpZ25hbC1yZXNldCBvbCBvbCB1bCBsaSwub25lc2lnbmFsLXJlc2V0IG9sIHVsIHVsIGxpLC5vbmVzaWduYWwtcmVzZXQgdWwgbGksLm9uZXNpZ25hbC1yZXNldCB1bCBvbCBvbCBsaSwub25lc2lnbmFsLXJlc2V0IHVsIHVsIGxpLC5vbmVzaWduYWwtcmVzZXQgdWwgdWwgb2wgbGksLm9uZXNpZ25hbC1yZXNldCB1bCB1bCB1bCBsaXtsaXN0LXN0eWxlLXBvc2l0aW9uOmluc2lkZTttYXJnaW4tdG9wOi4wOGVtfS5vbmVzaWduYWwtcmVzZXQgb2wgb2wsLm9uZXNpZ25hbC1yZXNldCBvbCBvbCBvbCwub25lc2lnbmFsLXJlc2V0IG9sIG9sIHVsLC5vbmVzaWduYWwtcmVzZXQgb2wgdWwsLm9uZXNpZ25hbC1yZXNldCBvbCB1bCB1bCwub25lc2lnbmFsLXJlc2V0IHVsIG9sLC5vbmVzaWduYWwtcmVzZXQgdWwgb2wgb2wsLm9uZXNpZ25hbC1yZXNldCB1bCB1bCwub25lc2lnbmFsLXJlc2V0IHVsIHVsIG9sLC5vbmVzaWduYWwtcmVzZXQgdWwgdWwgdWx7cGFkZGluZy1sZWZ0OjQwcHg7bWFyZ2luOjB9Lm9uZXNpZ25hbC1yZXNldCBuYXYgb2wsLm9uZXNpZ25hbC1yZXNldCBuYXYgdWx7bGlzdC1zdHlsZS10eXBlOm5vbmV9Lm9uZXNpZ25hbC1yZXNldCBtZW51LC5vbmVzaWduYWwtcmVzZXQgdWx7bGlzdC1zdHlsZS10eXBlOmRpc2N9Lm9uZXNpZ25hbC1yZXNldCBvbHtsaXN0LXN0eWxlLXR5cGU6ZGVjaW1hbH0ub25lc2lnbmFsLXJlc2V0IG1lbnUgbWVudSwub25lc2lnbmFsLXJlc2V0IG1lbnUgdWwsLm9uZXNpZ25hbC1yZXNldCBvbCBtZW51LC5vbmVzaWduYWwtcmVzZXQgb2wgdWwsLm9uZXNpZ25hbC1yZXNldCB1bCBtZW51LC5vbmVzaWduYWwtcmVzZXQgdWwgdWx7bGlzdC1zdHlsZS10eXBlOmNpcmNsZX0ub25lc2lnbmFsLXJlc2V0IG1lbnUgbWVudSBtZW51LC5vbmVzaWduYWwtcmVzZXQgbWVudSBtZW51IHVsLC5vbmVzaWduYWwtcmVzZXQgbWVudSBvbCBtZW51LC5vbmVzaWduYWwtcmVzZXQgbWVudSBvbCB1bCwub25lc2lnbmFsLXJlc2V0IG1lbnUgdWwgbWVudSwub25lc2lnbmFsLXJlc2V0IG1lbnUgdWwgdWwsLm9uZXNpZ25hbC1yZXNldCBvbCBtZW51IG1lbnUsLm9uZXNpZ25hbC1yZXNldCBvbCBtZW51IHVsLC5vbmVzaWduYWwtcmVzZXQgb2wgb2wgbWVudSwub25lc2lnbmFsLXJlc2V0IG9sIG9sIHVsLC5vbmVzaWduYWwtcmVzZXQgb2wgdWwgbWVudSwub25lc2lnbmFsLXJlc2V0IG9sIHVsIHVsLC5vbmVzaWduYWwtcmVzZXQgdWwgbWVudSBtZW51LC5vbmVzaWduYWwtcmVzZXQgdWwgbWVudSB1bCwub25lc2lnbmFsLXJlc2V0IHVsIG9sIG1lbnUsLm9uZXNpZ25hbC1yZXNldCB1bCBvbCB1bCwub25lc2lnbmFsLXJlc2V0IHVsIHVsIG1lbnUsLm9uZXNpZ25hbC1yZXNldCB1bCB1bCB1bHtsaXN0LXN0eWxlLXR5cGU6c3F1YXJlfS5vbmVzaWduYWwtcmVzZXQgbGl7ZGlzcGxheTpsaXN0LWl0ZW07bWluLWhlaWdodDphdXRvO21pbi13aWR0aDphdXRvO3BhZGRpbmctbGVmdDoyMHB4fS5vbmVzaWduYWwtcmVzZXQgc3Ryb25ne2ZvbnQtd2VpZ2h0OjcwMH0ub25lc2lnbmFsLXJlc2V0IGVte2ZvbnQtc3R5bGU6aXRhbGljfS5vbmVzaWduYWwtcmVzZXQgY29kZSwub25lc2lnbmFsLXJlc2V0IGtiZCwub25lc2lnbmFsLXJlc2V0IHByZSwub25lc2lnbmFsLXJlc2V0IHNhbXB7Zm9udC1mYW1pbHk6bW9ub3NwYWNlfS5vbmVzaWduYWwtcmVzZXQgYXtjb2xvcjpibHVlO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9Lm9uZXNpZ25hbC1yZXNldCBhOnZpc2l0ZWR7Y29sb3I6IzUyOX0ub25lc2lnbmFsLXJlc2V0IGEsLm9uZXNpZ25hbC1yZXNldCBhICosLm9uZXNpZ25hbC1yZXNldCBpbnB1dFt0eXBlPWNoZWNrYm94XSwub25lc2lnbmFsLXJlc2V0IGlucHV0W3R5cGU9cmFkaW9dLC5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1zdWJtaXRdLC5vbmVzaWduYWwtcmVzZXQgc2VsZWN0e2N1cnNvcjpwb2ludGVyfS5vbmVzaWduYWwtcmVzZXQgYnV0dG9uLC5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1zdWJtaXRde3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MnB4IDZweCAzcHg7Ym9yZGVyLXJhZGl1czo0cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC1mYW1pbHk6YXJpYWwsaGVsdmV0aWNhLHNhbnMtc2VyaWY7Zm9udC1zaXplOnNtYWxsOy13ZWJraXQtYXBwZWFyYW5jZTpwdXNoLWJ1dHRvbjtjb2xvcjpidXR0b250ZXh0O2JvcmRlcjoxcHggc29saWQgI2E2YTZhNjtiYWNrZ3JvdW5kOiNkM2QzZDM7YmFja2dyb3VuZDojZmZmO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudChsaW5lYXIsbGVmdCB0b3AsbGVmdCBib3R0b20sY29sb3Itc3RvcCgwLCNmZmYpLGNvbG9yLXN0b3AoMTAwJSwjZGRkKSxjb2xvci1zdG9wKDEwMCUsI2QxZDFkMSksY29sb3Itc3RvcCgxMDAlLCNkZGQpKTtiYWNrZ3JvdW5kOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwjZmZmIDAsI2RkZCAxMDAlLCNkMWQxZDEgMTAwJSwjZGRkIDEwMCUpO2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwjZmZmIDAsI2RkZCAxMDAlLCNkMWQxZDEgMTAwJSwjZGRkIDEwMCUpO2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvcnN0cj0nI2ZmZmZmZicsZW5kQ29sb3JzdHI9JyNkZGRkZGQnLEdyYWRpZW50VHlwZT0wKTstby1ib3gtc2hhZG93OjFweCAxcHggMCAjZWVlO2JveC1zaGFkb3c6MXB4IDFweCAwICNlZWU7b3V0bGluZTppbml0aWFsfS5vbmVzaWduYWwtcmVzZXQgYnV0dG9ue3BhZGRpbmc6MXB4IDZweCAycHg7bWFyZ2luLXJpZ2h0OjVweH0ub25lc2lnbmFsLXJlc2V0IGlucHV0W3R5cGU9aGlkZGVuXXtkaXNwbGF5Om5vbmV9Lm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYXstd2Via2l0LWFwcGVhcmFuY2U6dGV4dGFyZWE7YmFja2dyb3VuZDojZmZmO3BhZGRpbmc6MnB4O21hcmdpbi1sZWZ0OjRweDt3b3JkLXdyYXA6YnJlYWstd29yZDt3aGl0ZS1zcGFjZTpwcmUtd3JhcDtmb250LXNpemU6MTFweDtmb250LWZhbWlseTphcmlhbCxoZWx2ZXRpY2Esc2Fucy1zZXJpZjtsaW5lLWhlaWdodDoxM3B4O3Jlc2l6ZTpib3RofS5vbmVzaWduYWwtcmVzZXQgaW5wdXQsLm9uZXNpZ25hbC1yZXNldCBzZWxlY3QsLm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYXtib3JkZXI6MXB4IHNvbGlkICNjY2N9Lm9uZXNpZ25hbC1yZXNldCBzZWxlY3R7Zm9udC1zaXplOjExcHg7Zm9udC1mYW1pbHk6aGVsdmV0aWNhLGFyaWFsLHNhbnMtc2VyaWY7ZGlzcGxheTppbmxpbmUtYmxvY2t9Lm9uZXNpZ25hbC1yZXNldCBpbnB1dDpmb2N1cywub25lc2lnbmFsLXJlc2V0IHRleHRhcmVhOmZvY3Vze291dGxpbmU6NXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yO291dGxpbmU6aW5pdGlhbH0ub25lc2lnbmFsLXJlc2V0IGlucHV0W3R5cGU9dGV4dF17YmFja2dyb3VuZDojZmZmO3BhZGRpbmc6MXB4O2ZvbnQtZmFtaWx5OmluaXRpYWw7Zm9udC1zaXplOnNtYWxsfS5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1jaGVja2JveF0sLm9uZXNpZ25hbC1yZXNldCBpbnB1dFt0eXBlPXJhZGlvXXtib3JkZXI6MXB4IHNvbGlkICMyYjJiMmI7Ym9yZGVyLXJhZGl1czo0cHg7b3V0bGluZTppbnRpYWx9Lm9uZXNpZ25hbC1yZXNldCBpbnB1dFt0eXBlPXJhZGlvXXttYXJnaW46MnB4IDJweCAzcHh9Lm9uZXNpZ25hbC1yZXNldCBidXR0b246YWN0aXZlLC5vbmVzaWduYWwtcmVzZXQgaW5wdXRbdHlwZT1zdWJtaXRdOmFjdGl2ZXtiYWNrZ3JvdW5kOiMzYjY3OWU7YmFja2dyb3VuZDotd2Via2l0LWdyYWRpZW50KGxpbmVhcixsZWZ0IHRvcCxsZWZ0IGJvdHRvbSxjb2xvci1zdG9wKDAsIzNiNjc5ZSksY29sb3Itc3RvcCg1MCUsIzJiODhkOSksY29sb3Itc3RvcCg1MSUsIzIwN2NjYSksY29sb3Itc3RvcCgxMDAlLCM3ZGI5ZTgpKTtiYWNrZ3JvdW5kOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwjM2I2NzllIDAsIzJiODhkOSA1MCUsIzIwN2NjYSA1MSUsIzdkYjllOCAxMDAlKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIzNiNjc5ZSAwLCMyYjg4ZDkgNTAlLCMyMDdjY2EgNTElLCM3ZGI5ZTggMTAwJSk7Ym9yZGVyLWNvbG9yOiM1MjU5YjB9Lm9uZXNpZ25hbC1yZXNldCBhYmJyW3RpdGxlXSwub25lc2lnbmFsLXJlc2V0IGFjcm9ueW1bdGl0bGVdLC5vbmVzaWduYWwtcmVzZXQgZGZuW3RpdGxlXXtjdXJzb3I6aGVscDtib3JkZXItYm90dG9tLXdpZHRoOjFweDtib3JkZXItYm90dG9tLXN0eWxlOmRvdHRlZH0ub25lc2lnbmFsLXJlc2V0IGluc3tiYWNrZ3JvdW5kLWNvbG9yOiNmZjk7Y29sb3I6IzAwMH0ub25lc2lnbmFsLXJlc2V0IGRlbHt0ZXh0LWRlY29yYXRpb246bGluZS10aHJvdWdofS5vbmVzaWduYWwtcmVzZXQgYmxvY2txdW90ZSwub25lc2lnbmFsLXJlc2V0IHF7cXVvdGVzOm5vbmV9Lm9uZXNpZ25hbC1yZXNldCBibG9ja3F1b3RlOmFmdGVyLC5vbmVzaWduYWwtcmVzZXQgYmxvY2txdW90ZTpiZWZvcmUsLm9uZXNpZ25hbC1yZXNldCBsaTphZnRlciwub25lc2lnbmFsLXJlc2V0IGxpOmJlZm9yZSwub25lc2lnbmFsLXJlc2V0IHE6YWZ0ZXIsLm9uZXNpZ25hbC1yZXNldCBxOmJlZm9yZXtjb250ZW50OlxcXCJcXFwifS5vbmVzaWduYWwtcmVzZXQgaW5wdXQsLm9uZXNpZ25hbC1yZXNldCBzZWxlY3R7dmVydGljYWwtYWxpZ246bWlkZGxlfS5vbmVzaWduYWwtcmVzZXQgdGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlci1zcGFjaW5nOjB9Lm9uZXNpZ25hbC1yZXNldCBocntkaXNwbGF5OmJsb2NrO2hlaWdodDoxcHg7Ym9yZGVyOjA7Ym9yZGVyLXRvcDoxcHggc29saWQgI2NjYzttYXJnaW46MWVtIDB9Lm9uZXNpZ25hbC1yZXNldCBbZGlyPXJ0bF17ZGlyZWN0aW9uOnJ0bH0ub25lc2lnbmFsLXJlc2V0IG1hcmt7YmFja2dyb3VuZC1jb2xvcjojZmY5O2NvbG9yOiMwMDA7Zm9udC1zdHlsZTppdGFsaWM7Zm9udC13ZWlnaHQ6NzAwfS5vbmVzaWduYWwtcmVzZXQgbWVudXtwYWRkaW5nLWxlZnQ6NDBweDtwYWRkaW5nLXRvcDo4cHh9Lm9uZXNpZ25hbC1yZXNldCBbaGlkZGVuXSwub25lc2lnbmFsLXJlc2V0IHRlbXBsYXRle2Rpc3BsYXk6bm9uZX0ub25lc2lnbmFsLXJlc2V0IGFiYnJbdGl0bGVde2JvcmRlci1ib3R0b206MXB4IGRvdHRlZH0ub25lc2lnbmFsLXJlc2V0IHN1Yiwub25lc2lnbmFsLXJlc2V0IHN1cHtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246cmVsYXRpdmU7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9Lm9uZXNpZ25hbC1yZXNldCBzdXB7dG9wOi0uNWVtfS5vbmVzaWduYWwtcmVzZXQgc3Vie2JvdHRvbTotLjI1ZW19Lm9uZXNpZ25hbC1yZXNldCBpbWd7Ym9yZGVyOjB9Lm9uZXNpZ25hbC1yZXNldCBmaWd1cmV7bWFyZ2luOjB9Lm9uZXNpZ25hbC1yZXNldCB0ZXh0YXJlYXtvdmVyZmxvdzphdXRvO3ZlcnRpY2FsLWFsaWduOnRvcH0ub25lc2lnbmFsLXJlc2V0e2ZvbnQtc2l6ZTptZWRpdW07bGluZS1oZWlnaHQ6MTtkaXJlY3Rpb246bHRyO3RleHQtYWxpZ246bGVmdDt0ZXh0LWFsaWduOnN0YXJ0O2ZvbnQtZmFtaWx5OlRpbWVzIE5ldyBSb21hbixUaW1lcyxzZXJpZjtjb2xvcjojMDAwO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjQwMDt0ZXh0LWRlY29yYXRpb246bm9uZTtsaXN0LXN0eWxlLXR5cGU6ZGlzY30ub25lc2lnbmFsLXJlc2V0IHByZXt3aGl0ZS1zcGFjZTpwcmV9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXR7ei1pbmRleDoyMTQ3NDgzMDAwO3Bvc2l0aW9uOmZpeGVkfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0Lm9uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci1ib3R0b20tbGVmdHtib3R0b206MDtsZWZ0OjB9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQub25lc2lnbmFsLWJlbGwtY29udGFpbmVyLWJvdHRvbS1yaWdodHtib3R0b206MDtyaWdodDowfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlcnstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyMTQ3NDgzMDAwO2ZvbnQtZmFtaWx5OkhlbHZldGljYSBOZXVlLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmO3RyYW5zZm9ybTpzY2FsZSguMDEpIHRyYW5zbGF0ZVooMCk7b3BhY2l0eTowO3RyYW5zaXRpb246dHJhbnNmb3JtIDE3NW1zIGVhc2UtaW4tb3V0LG9wYWNpdHkgMTc1bXMgZWFzZS1pbi1vdXQ7d2lkdGg6MzMwcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0e2JvdHRvbToyMHB4O2xlZnQ6MjBweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc217dHJhbnNmb3JtLW9yaWdpbjoxNnB4IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2V7bGVmdDo0MnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9ne2JvdHRvbTozOXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmJlZm9yZXtyaWdodDo1cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6N3B4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZHt0cmFuc2Zvcm0tb3JpZ2luOjI0cHggY2VudGVyfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtsZWZ0OjYxcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2d7Ym90dG9tOjU4cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle3JpZ2h0OjEycHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6MTRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGd7dHJhbnNmb3JtLW9yaWdpbjozMnB4IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2V7bGVmdDo4MXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9ne2JvdHRvbTo3OHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmJlZm9yZXtyaWdodDoxOHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tbGVmdC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVye3JpZ2h0OjIwcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1sZWZ0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtsZWZ0OjRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2V7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2U6YWZ0ZXJ7cmlnaHQ6MTAwJTtib3JkZXItcmlnaHQtY29sb3I6IzAwMH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLWxlZnQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbntsZWZ0OjB9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodHtib3R0b206MjBweDtyaWdodDoyMHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc217dHJhbnNmb3JtLW9yaWdpbjozMTRweCBjZW50ZXJ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtyaWdodDo0MnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3tib3R0b206MzlweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle3JpZ2h0OjVweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6N3B4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWR7dHJhbnNmb3JtLW9yaWdpbjozMDZweCBjZW50ZXJ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtyaWdodDo2MXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3tib3R0b206NThweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle3JpZ2h0OjEycHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVye3JpZ2h0OjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZ3t0cmFuc2Zvcm0tb3JpZ2luOjI5OHB4IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3JpZ2h0OjgxcHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9ne2JvdHRvbTo3OHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzpiZWZvcmV7cmlnaHQ6MThweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0Lm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7cmlnaHQ6MjBweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtyaWdodDo0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJvdHRvbS1yaWdodCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYm90dG9tLXJpZ2h0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlOmFmdGVye2xlZnQ6MTAwJTtib3JkZXItbGVmdC1jb2xvcjojMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1ib3R0b20tcmlnaHQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbntyaWdodDowfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2JvcmRlci1yYWRpdXM6NTAlO3RyYW5zaXRpb246dHJhbnNmb3JtIDE3NW1zIGVhc2UtaW4tb3V0LGJvcmRlciAxNzVtcyBlYXNlLWluLW91dCx3aWR0aCAxNzVtcyBlYXNlLWluLW91dCxoZWlnaHQgMTc1bXMgZWFzZS1pbi1vdXQ7Y3Vyc29yOnBvaW50ZXI7ei1pbmRleDoyMTQ3NDgzMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uIHN2Z3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlOy13ZWJraXQtZmlsdGVyOmRyb3Atc2hhZG93KDAgMnB4IDRweCByZ2JhKDM0LDM2LDM4LC4zNSkpO2ZpbHRlcjpkcm9wLXNoYWRvdygwIDJweCA0cHggcmdiYSgzNCwzNiwzOCwuMzUpKX0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbi5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24taG92ZXJ7Y3Vyc29yOnBvaW50ZXJ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDtib3JkZXItcmFkaXVzOjUwJTt0ZXh0LWFsaWduOmNlbnRlcjt0b3A6MDtjdXJzb3I6cG9pbnRlcjstd2Via2l0LWZpbHRlcjpkcm9wLXNoYWRvdygwIDJweCA0cHggcmdiYSgzNCwzNiwzOCwwKSk7ZmlsdGVyOmRyb3Atc2hhZG93KDAgMnB4IDRweCByZ2JhKDM0LDM2LDM4LDApKTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAxNzVtcyBlYXNlLWluLW91dCxib3JkZXIgMTc1bXMgZWFzZS1pbi1vdXQsb3BhY2l0eSAuMjFzIGVhc2UtaW4tb3V0LHdpZHRoIC4yMXMgZWFzZS1pbi1vdXQsaGVpZ2h0IC4yMXMgZWFzZS1pbi1vdXQscG9zaXRpb24gLjIxcyBlYXNlLWluLW91dCxyaWdodCAuMjFzIGVhc2UtaW4tb3V0LHRvcCAuMjFzIGVhc2UtaW4tb3V0LGJvdHRvbSAuMjFzIGVhc2UtaW4tb3V0LGxlZnQgLjIxcyBlYXNlLWluLW91dDt6LWluZGV4OjIxNDc0ODM0MDA7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguMDEpO3BvaW50ZXItZXZlbnRzOm5vbmV9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZS5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZS1ob3ZlcntjdXJzb3I6cG9pbnRlcn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdlLW9wZW5lZHtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEpfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZXtwb3NpdGlvbjphYnNvbHV0ZTtjb2xvcjojZmZmO2JhY2tncm91bmQ6IzAwMDtjdXJzb3I6cG9pbnRlcjtib3JkZXItcmFkaXVzOjVweDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKSBzY2FsZVgoMCkgdHJhbnNsYXRlWigwKTtvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAxNzVtcyBlYXNlLWluLW91dCxvcGFjaXR5IDE3NW1zIGVhc2UtaW4tb3V0O3RvcDo1MCU7ei1pbmRleDoyMTQ3NDgxMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZTphZnRlcnt0b3A6NTAlO2JvcmRlcjpzb2xpZCB0cmFuc3BhcmVudDtjb250ZW50OlxcXCIgXFxcIjtoZWlnaHQ6MDt3aWR0aDowO3Bvc2l0aW9uOmFic29sdXRlO3BvaW50ZXItZXZlbnRzOm5vbmU7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1ib2R5e3otaW5kZXg6MjE0NzQ4MjAwMDttYXgtd2lkdGg6MTAwJTt3aGl0ZS1zcGFjZTpub3dyYXA7dGV4dC1vdmVyZmxvdzplbGxpcHNpc30jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2Uub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZS1vcGVuZWR7cG9pbnRlci1ldmVudHM6YXV0bztvcGFjaXR5OjE7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSkgc2NhbGVYKDEpIHRyYW5zbGF0ZVooMCl9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2d7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTstd2Via2l0LWZpbHRlcjpkcm9wLXNoYWRvdygwIDJweCAycHggcmdiYSgzNCwzNiwzOCwuMTUpKTtmaWx0ZXI6ZHJvcC1zaGFkb3coMCAycHggMnB4IHJnYmEoMzQsMzYsMzgsLjE1KSk7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSgwKSB0cmFuc2xhdGVaKDApO3RyYW5zaXRpb246dHJhbnNmb3JtIDE3NW1zIGVhc2UtaW4tb3V0LG9wYWNpdHkgMTc1bXMgZWFzZS1pbi1vdXQ7dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207ei1pbmRleDoyMTQ3NDgxMDAwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVyLCNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmJlZm9yZXt0b3A6MTAwJTtib3JkZXI6c29saWQgdHJhbnNwYXJlbnQ7Y29udGVudDpcXFwiIFxcXCI7aGVpZ2h0OjA7d2lkdGg6MDtwb3NpdGlvbjphYnNvbHV0ZX0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHl7ei1pbmRleDoyMTQ3NDgyMDAwO21heC13aWR0aDoxMDAlO3doaXRlLXNwYWNlOm5vd3JhcDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO2ZvbnQtZmFtaWx5OkhlbHZldGljYSBOZXVlLEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlciAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZy1vcGVuZWR7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZVooMCk7b3BhY2l0eToxfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbXtoZWlnaHQ6MzJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbnt3aWR0aDozMnB4O2hlaWdodDozMnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2V7Zm9udC1zaXplOjhweDt3aWR0aDoxMnB4O2hlaWdodDoxMnB4O2xpbmUtaGVpZ2h0OjEycHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3BhZGRpbmc6OS42cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlOmFmdGVye2JvcmRlci13aWR0aDo2LjZweDttYXJnaW4tdG9wOi02LjZweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UtYm9keXtmb250LXNpemU6MTRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3twYWRkaW5nOjMuMnB4IDkuNnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nOmFmdGVye2JvcmRlci10b3AtY29sb3I6I2ZmZjtib3JkZXItd2lkdGg6Ni42cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXNtIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YmVmb3Jle2JvcmRlci10b3AtY29sb3I6cmdiYSgwLDAsMCwuMSk7Ym9yZGVyLXdpZHRoOjguNnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1zbSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keSwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItc20gLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHkgaDF7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1ke2hlaWdodDo0OHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9ue3dpZHRoOjQ4cHg7aGVpZ2h0OjQ4cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtmb250LXNpemU6MTJweDt3aWR0aDoxOHB4O2hlaWdodDoxOHB4O2xpbmUtaGVpZ2h0OjE4cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3BhZGRpbmc6MTQuNHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZTphZnRlcntib3JkZXItd2lkdGg6OS45cHg7bWFyZ2luLXRvcDotOS45cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdlLWJvZHl7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2d7cGFkZGluZzo0LjhweCAxNC40cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1kIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2c6YWZ0ZXJ7Ym9yZGVyLXRvcC1jb2xvcjojZmZmO2JvcmRlci13aWR0aDo5LjlweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzpiZWZvcmV7Ym9yZGVyLXRvcC1jb2xvcjpyZ2JhKDAsMCwwLC4xKTtib3JkZXItd2lkdGg6MTEuOXB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keSwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHkgaDF7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxne2hlaWdodDo2NHB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9ue3dpZHRoOjY0cHg7aGVpZ2h0OjY0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZXtmb250LXNpemU6MTJweDt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2xpbmUtaGVpZ2h0OjI0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWxnIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1tZXNzYWdle3BhZGRpbmc6MTkuMnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbWVzc2FnZTphZnRlcntib3JkZXItd2lkdGg6MTMuMnB4O21hcmdpbi10b3A6LTEzLjJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLW1lc3NhZ2UtYm9keXtmb250LXNpemU6MTRweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZ3twYWRkaW5nOjYuNHB4IDE5LjJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzphZnRlcntib3JkZXItdG9wLWNvbG9yOiNmZmY7Ym9yZGVyLXdpZHRoOjEzLjJweH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZzpiZWZvcmV7Ym9yZGVyLXRvcC1jb2xvcjpyZ2JhKDAsMCwwLC4xKTtib3JkZXItd2lkdGg6MTUuMnB4fSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1sZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1kaWFsb2ctYm9keSwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItbGcgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWRpYWxvZyAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlhbG9nLWJvZHkgaDF7Zm9udC1zaXplOjE0cHh9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWRlZmF1bHQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbiBzdmcgLmJhY2tncm91bmR7ZmlsbDojZTU0YjRkfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1kZWZhdWx0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24gc3ZnIC5mb3JlZ3JvdW5ke2ZpbGw6I2ZmZn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtZGVmYXVsdCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uIHN2ZyAuc3Ryb2tle2ZpbGw6bm9uZTtzdHJva2U6I2ZmZjtzdHJva2Utd2lkdGg6M3B4O3N0cm9rZS1taXRlcmxpbWl0OjEwfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1kZWZhdWx0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24ub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2UtYWN0aXZlIHN2ZyAuYmFja2dyb3VuZCwjb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtZGVmYXVsdCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbi1hY3RpdmUgc3ZnIC5iYWNrZ3JvdW5ke2ZpbGw6I2RkMjAyMiFpbXBvcnRhbnR9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWRlZmF1bHQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJhZGdle2JvcmRlcjoxcHggc29saWQgI2ZmZjtiYWNrZ3JvdW5kOiMwMDA7Y29sb3I6I2ZmZn0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtaW52ZXJzZSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uIHN2ZyAuYmFja2dyb3VuZHtmaWxsOiNmZmZ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWludmVyc2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbiBzdmcgLmZvcmVncm91bmR7ZmlsbDojZTU0YjRkfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1pbnZlcnNlIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24gc3ZnIC5zdHJva2V7ZmlsbDpub25lO3N0cm9rZTojZTU0YjRkO3N0cm9rZS13aWR0aDozcHg7c3Ryb2tlLW1pdGVybGltaXQ6MTB9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLXRoZW1lLWludmVyc2UgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWJ1dHRvbi5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1iYWRnZS1hY3RpdmUgc3ZnIC5iYWNrZ3JvdW5kLCNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci10aGVtZS1pbnZlcnNlIC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1idXR0b24ub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYnV0dG9uLWFjdGl2ZSBzdmcgLmJhY2tncm91bmR7ZmlsbDojZjJmMmYyIWltcG9ydGFudH0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXIub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItdGhlbWUtaW52ZXJzZSAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItYmFkZ2V7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2JhY2tncm91bmQ6I2U1NGI0ZDtjb2xvcjojZmZmfSNvbmVzaWduYWwtYmVsbC1jb250YWluZXIub25lc2lnbmFsLXJlc2V0IC5vbmVzaWduYWwtYmVsbC1sYXVuY2hlci1hY3RpdmUsI29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWVuYWJsZWR7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0jb25lc2lnbmFsLWJlbGwtY29udGFpbmVyLm9uZXNpZ25hbC1yZXNldCAub25lc2lnbmFsLWJlbGwtbGF1bmNoZXItZGlzYWJsZWR7dmlzaWJpbGl0eTpoaWRkZW59I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLm9uZXNpZ25hbC1iZWxsLWxhdW5jaGVyLWluYWN0aXZle29wYWNpdHk6LjZ9I29uZXNpZ25hbC1iZWxsLWNvbnRhaW5lci5vbmVzaWduYWwtcmVzZXQgLnB1bHNlLXJpbmd7Ym9yZGVyOjdweCBzb2xpZCBoc2xhKDAsMCUsMTAwJSwuNCk7Ym9yZGVyLXJhZGl1czo1MCU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO2JvdHRvbTowO3JpZ2h0OjA7LXdlYmtpdC1hbmltYXRpb246cHVsc2UgLjM1cyBlYXNlLWluLW91dDthbmltYXRpb246cHVsc2UgLjM1cyBlYXNlLWluLW91dDstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjE7b3BhY2l0eTowO3otaW5kZXg6MTAwMDtwb2ludGVyLWV2ZW50czpub25lfUBtZWRpYSBwcmludHsjb25lc2lnbmFsLWJlbGwtY29udGFpbmVye2Rpc3BsYXk6bm9uZX19QC13ZWJraXQta2V5ZnJhbWVzIHB1bHNlezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4xKTtvcGFjaXR5OjA7Ym9yZGVyLXdpZHRoOjEwcHh9NTAle29wYWNpdHk6MTtib3JkZXItd2lkdGg6NXB4fXRvey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMik7b3BhY2l0eTowO2JvcmRlci13aWR0aDoxcHh9fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyIS4vc3JjL2JlbGwuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKlxyXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xyXG5cdHZhciBsaXN0ID0gW107XHJcblxyXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcclxuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IHRoaXNbaV07XHJcblx0XHRcdGlmKGl0ZW1bMl0pIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGl0ZW1bMV0gKyBcIn1cIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goaXRlbVsxXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcclxuXHR9O1xyXG5cclxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxyXG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcclxuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxyXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XHJcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcclxuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxyXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xyXG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXHJcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXHJcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXHJcblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXHJcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XHJcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XHJcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRyZXR1cm4gbGlzdDtcclxufTtcclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxudmFyIHN0eWxlc0luRG9tID0ge30sXHJcblx0bWVtb2l6ZSA9IGZ1bmN0aW9uKGZuKSB7XHJcblx0XHR2YXIgbWVtbztcclxuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0XHRcdHJldHVybiBtZW1vO1xyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uKCkge1xyXG5cdFx0cmV0dXJuIC9tc2llIFs2LTldXFxiLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO1xyXG5cdH0pLFxyXG5cdGdldEhlYWRFbGVtZW50ID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcblx0fSksXHJcblx0c2luZ2xldG9uRWxlbWVudCA9IG51bGwsXHJcblx0c2luZ2xldG9uQ291bnRlciA9IDAsXHJcblx0c3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AgPSBbXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xyXG5cdGlmKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xyXG5cdFx0aWYodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XHJcblx0fVxyXG5cclxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cclxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXHJcblx0aWYgKHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiA9PT0gXCJ1bmRlZmluZWRcIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XHJcblxyXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiA8aGVhZD4uXHJcblx0aWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcInVuZGVmaW5lZFwiKSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcclxuXHJcblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0KTtcclxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcclxuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xyXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XHJcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcclxuXHRcdH1cclxuXHRcdGlmKG5ld0xpc3QpIHtcclxuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0KTtcclxuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcclxuXHRcdH1cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xyXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XHJcblx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKVxyXG5cdFx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oKTtcclxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XHJcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcclxuXHRcdGlmKGRvbVN0eWxlKSB7XHJcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcclxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIHBhcnRzID0gW107XHJcblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCkge1xyXG5cdHZhciBzdHlsZXMgPSBbXTtcclxuXHR2YXIgbmV3U3R5bGVzID0ge307XHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcclxuXHRcdHZhciBpZCA9IGl0ZW1bMF07XHJcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcclxuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XHJcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcclxuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcclxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKVxyXG5cdFx0XHRzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XHJcblx0fVxyXG5cdHJldHVybiBzdHlsZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZUVsZW1lbnQpIHtcclxuXHR2YXIgaGVhZCA9IGdldEhlYWRFbGVtZW50KCk7XHJcblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3Bbc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XHJcblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcclxuXHRcdGlmKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xyXG5cdFx0XHRoZWFkLmluc2VydEJlZm9yZShzdHlsZUVsZW1lbnQsIGhlYWQuZmlyc3RDaGlsZCk7XHJcblx0XHR9IGVsc2UgaWYobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcclxuXHRcdFx0aGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0XHR9XHJcblx0XHRzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlRWxlbWVudCk7XHJcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XHJcblx0XHRoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnLiBNdXN0IGJlICd0b3AnIG9yICdib3R0b20nLlwiKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcclxuXHRzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG5cdHZhciBpZHggPSBzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlRWxlbWVudCk7XHJcblx0aWYoaWR4ID49IDApIHtcclxuXHRcdHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcclxuXHR2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdHN0eWxlRWxlbWVudC50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xyXG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZUVsZW1lbnQpO1xyXG5cdHJldHVybiBzdHlsZUVsZW1lbnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpIHtcclxuXHR2YXIgbGlua0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcclxuXHRsaW5rRWxlbWVudC5yZWwgPSBcInN0eWxlc2hlZXRcIjtcclxuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGlua0VsZW1lbnQpO1xyXG5cdHJldHVybiBsaW5rRWxlbWVudDtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XHJcblx0dmFyIHN0eWxlRWxlbWVudCwgdXBkYXRlLCByZW1vdmU7XHJcblxyXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xyXG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XHJcblx0XHRzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcclxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIGZhbHNlKTtcclxuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpO1xyXG5cdH0gZWxzZSBpZihvYmouc291cmNlTWFwICYmXHJcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcclxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcclxuXHRcdHN0eWxlRWxlbWVudCA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xyXG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRyZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XHJcblx0XHRcdGlmKHN0eWxlRWxlbWVudC5ocmVmKVxyXG5cdFx0XHRcdFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGVFbGVtZW50LmhyZWYpO1xyXG5cdFx0fTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0c3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xyXG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCk7XHJcblx0XHRyZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0dXBkYXRlKG9iaik7XHJcblxyXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcclxuXHRcdGlmKG5ld09iaikge1xyXG5cdFx0XHRpZihuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdH07XHJcbn1cclxuXHJcbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XHJcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xyXG5cclxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xyXG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xyXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XHJcblx0fTtcclxufSkoKTtcclxuXHJcbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcclxuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XHJcblxyXG5cdGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xyXG5cdFx0c3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XHJcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzO1xyXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XHJcblx0XHRcdHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZUVsZW1lbnQsIG9iaikge1xyXG5cdHZhciBjc3MgPSBvYmouY3NzO1xyXG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcclxuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuXHJcblx0aWYobWVkaWEpIHtcclxuXHRcdHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcclxuXHR9XHJcblxyXG5cdGlmKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcblx0XHRzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xyXG5cdH0gZWxzZSB7XHJcblx0XHR3aGlsZShzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG5cdFx0XHRzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG5cdFx0fVxyXG5cdFx0c3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlTGluayhsaW5rRWxlbWVudCwgb2JqKSB7XHJcblx0dmFyIGNzcyA9IG9iai5jc3M7XHJcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xyXG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xyXG5cclxuXHRpZihzb3VyY2VNYXApIHtcclxuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XHJcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XHJcblx0fVxyXG5cclxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcclxuXHJcblx0dmFyIG9sZFNyYyA9IGxpbmtFbGVtZW50LmhyZWY7XHJcblxyXG5cdGxpbmtFbGVtZW50LmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG5cclxuXHRpZihvbGRTcmMpXHJcblx0XHRVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XHJcbn1cclxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1xuICoqIG1vZHVsZSBpZCA9IDE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwidXRmLThcXFwiPz5cXG48IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTkuMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+XFxuPHN2ZyB2ZXJzaW9uPVxcXCIxLjFcXFwiIGNsYXNzPVxcXCJvbmVzaWduYWwtYmVsbC1zdmdcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgeG1sbnM6eGxpbms9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcXFwiIHg9XFxcIjBweFxcXCIgeT1cXFwiMHB4XFxcIlxcblxcdCB3aWR0aD1cXFwiOTkuN3B4XFxcIiBoZWlnaHQ9XFxcIjk5LjdweFxcXCIgdmlld0JveD1cXFwiMCAwIDk5LjcgOTkuN1xcXCIgc3R5bGU9XFxcImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgOTkuNyA5OS43O1xcXCIgeG1sOnNwYWNlPVxcXCJwcmVzZXJ2ZVxcXCI+XFxuPGc+XFxuXFx0PGNpcmNsZSBjbGFzcz1cXFwiYmFja2dyb3VuZFxcXCIgY3g9XFxcIjQ5LjlcXFwiIGN5PVxcXCI0OS45XFxcIiByPVxcXCI0OS45XFxcIi8+XFxuXFx0PGcgaWQ9XFxcIkxheWVyXzJcXFwiPlxcblxcdFxcdDxnPlxcblxcdFxcdFxcdDxwYXRoIGNsYXNzPVxcXCJmb3JlZ3JvdW5kXFxcIiBkPVxcXCJNNTAuMSw2Ni4ySDI3LjdjMCwwLTItMC4yLTItMi4xYzAtMS45LDEuNy0yLDEuNy0yczYuNy0zLjIsNi43LTUuNWMwLTIuMy0xLjEtMy45LTEuMS0xMy4zXFxuXFx0XFx0XFx0XFx0czYtMTYuNiwxMy4yLTE2LjZjMCwwLDEtMi40LDMuOS0yLjRjMi44LDAsMy44LDIuNCwzLjgsMi40YzcuMiwwLDEzLjIsNy4yLDEzLjIsMTYuNnMtMSwxMS0xLDEzLjNjMCwyLjMsNi43LDUuNSw2LjcsNS41XFxuXFx0XFx0XFx0XFx0czEuNywwLjEsMS43LDJjMCwxLjgtMi4xLDIuMS0yLjEsMi4xSDUwLjF6XFxcIi8+XFxuXFx0XFx0XFx0PHBhdGggY2xhc3M9XFxcImZvcmVncm91bmRcXFwiIGQ9XFxcIk00Mi45LDY4LjVoMTQuNWMwLDAtMSw2LjMtNy4yLDYuM1M0Mi45LDY4LjUsNDIuOSw2OC41elxcXCIvPlxcblxcdFxcdFxcdDxlbGxpcHNlIGNsYXNzPVxcXCJzdHJva2VcXFwiIGN4PVxcXCI0OS45XFxcIiBjeT1cXFwiNDkuOVxcXCIgcng9XFxcIjM3LjRcXFwiIHJ5PVxcXCIzNi45XFxcIi8+XFxuXFx0XFx0PC9nPlxcblxcdDwvZz5cXG48L2c+XFxuPC9zdmc+XFxuXCJcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9yYXctbG9hZGVyIS4vc3JjL2JlbGwuc3ZnXG4gKiogbW9kdWxlIGlkID0gMTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=